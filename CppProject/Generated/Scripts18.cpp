/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.23 22:26:53 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void app_startup_window(ScopeAny self)
	{
		global::window_list = ds_list_create();
		global::window_debug_current = e_window_MAIN;
		global::current_step = IntType(0);
		global::minute_steps = IntType(60) * IntType(60);
		global::delta = IntType(1);
		log({ /*"Windows startup"*/ STR(712) });
		sInt(http_assets) = null_;
		sInt(http_download_assets_file) = null_;
		sInt(http_download_assets_zip) = null_;
		sInt(http_alert_news) = null_;
		sInt(http_downloadskin) = null_;
		sReal(window_width) = IntType(1);
		sReal(window_height) = IntType(1);
		window_set_focus();
		window_set_min_width(IntType(100));
		window_set_min_height(IntType(100));
		window_set_caption(/*"Mine-imator"*/ STR(19));
		sStr(window_scroll_focus) = /*""*/ STR(0);
		sStr(window_scroll_focus_prev) = /*""*/ STR(0);
		sStr(window_state) = /*""*/ STR(0);
		sVar(window_busy) = /*""*/ STR(0);
		sVar(window_focus) = /*""*/ STR(0);
		sInt(mouse_cursor) = cr_default;
		sVar(mouse_current_x) = IntType(0);
		sVar(mouse_current_y) = IntType(0);
		sVar(mouse_previous_x) = IntType(0);
		sVar(mouse_previous_y) = IntType(0);
		sReal(mouse_move) = IntType(0);
		sInt(mouse_still) = IntType(0);
		sInt(mouse_wrap_x) = IntType(0);
		sInt(mouse_wrap_y) = IntType(0);
		sReal(mouse_click_timer) = IntType(0);
		sInt(mouse_click_count) = IntType(0);
		app_mouse_clear(self);
		sVar(dragger_drag_value) = IntType(0);
		sVar(meter_drag_value) = IntType(0);
		sVar(wheel_drag_value) = IntType(0);
		sVar(wheel_drag_moon) = false;
		sVar(handle_drag_offset_x) = IntType(0);
		sVar(handle_drag_offset_y) = IntType(0);
		sReal(dragger_multiplier) = IntType(1);
		sReal(dragger_snap) = false;
		sInt(sortlist_resize) = null_;
		sInt(sortlist_resize_column) = IntType(0);
		sReal(sortlist_resize_column_x) = IntType(0);
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = IntType(0);
		sVar(content_height) = IntType(0);
		sBool(content_mouseon) = false;
		sVar(content_tab) = null_;
		sInt(content_direction) = null_;
		sVar(dx) = IntType(0);
		sVar(dy) = IntType(0);
		sVar(dw) = IntType(0);
		sVar(dh) = IntType(0);
		sVar(dx_start) = IntType(0);
		sVar(dy_start) = IntType(0);
		sVar(dw_start) = IntType(0);
		sVar(dh_start) = IntType(0);
		sVar(tab) = null_;
		sReal(tab_control_h) = IntType(0);
		sBool(tab_collapse) = false;
		sVar(tab_collumns) = false;
		sReal(tab_collumns_index) = IntType(0);
		sVar(tab_collumns_width) = IntType(0);
		sVar(tab_collumns_count) = IntType(2);
		sVar(tab_collumns_start_x) = IntType(0);
		sBool(tip_show) = false;
		sInt(tip_window) = e_window_MAIN;
		sVar(tip_alpha) = IntType(0);
		sVar(tip_text) = /*""*/ STR(0);
		sVar(tip_text_wrap) = /*""*/ STR(0);
		sVar(tip_x) = IntType(0);
		sVar(tip_y) = IntType(0);
		sVar(tip_final_x) = -IntType(1);
		sVar(tip_final_y) = -IntType(1);
		sVar(tip_arrow_final_x) = -IntType(1);
		sVar(tip_arrow_final_y) = -IntType(1);
		sReal(tip_w) = IntType(0);
		sReal(tip_h) = IntType(0);
		sVar(tip_box_x) = IntType(0);
		sVar(tip_box_y) = IntType(0);
		sBool(tip_location_x) = IntType(0);
		sBool(tip_location_y) = IntType(0);
		sBool(tip_wrap) = true;
		sBool(tip_keybind_draw) = false;
		sVar(tip_arrow_x) = IntType(0);
		sVar(tip_arrow_y) = IntType(0);
		sReal(tip_arrow_xscale) = IntType(1);
		sReal(tip_arrow_yscale) = IntType(1);
		sReal(tip_arrow) = IntType(0);
		sArr(tip_text_array) = ArrType();
		sBool(tip_force_right) = false;
		sBool(tip_right) = false;
		sVar(tip_keybind) = null_;
		sInt(popup) = null_;
		sVar(popup_ani) = IntType(0);
		sVar(popup_block_ani) = IntType(0);
		sStr(popup_block_ani_ease) = /*"easeoutcirc"*/ STR(567);
		sStr(popup_ani_type) = /*""*/ STR(0);
		sInt(popup_switch_to) = null_;
		sInt(popup_switch_from) = null_;
		sBool(popup_mouseon) = false;
		sInt(place_tl) = null_;
		sBool(place_tl_render) = true;
		sBool(place_spawn) = false;
		sVar(place_view_pos) = null_;
		sInt(place_view_mouse) = null_;
		sVec(place_cam_work_from) = vec3(IntType(0));
		sVar(place_cam_work_angle_look_xy) = IntType(0);
		sVar(place_cam_work_angle_look_z) = IntType(0);
		sReal(ui_large_height) = IntType(32);
		sReal(ui_small_height) = IntType(24);
		sReal(window_compact) = false;
		sReal(panel_compact) = false;
		gc_target_frame_time(IntType(0));
	}
	
	void app_update_animate(ScopeAny self)
	{
		IntType bgobject;
		BoolType updatevalues;
		ArrType cameraarr;
		updatevalues = (sVar(timeline_marker_previous) != sVar(timeline_marker));
		bgobject = null_;
		cameraarr = ArrType();
		sInt(background_light_amount) = IntType(1);
		sArr(background_light_data)[IntType(0)] = IntType(0);
		sVec(background_sun_direction) = vec3(IntType(0));
		sArr(project_path_tl_array) = ArrType::From({});
		sArr(project_use_path_tl_array) = ArrType::From({});
		sVar(project_ik_part_array) = ArrType::From({});
		sReal(background_time_prev) = sReal(background_time);
		sReal(background_time) = ((RealType)sVar(timeline_marker) / sVar(project_tempo)) * IntType(60);
		if ((sReal(background_time_prev) != sReal(background_time) || global::_app->history_resource_update) || global::_app->timeline_playing > 0)
			global::render_samples = -IntType(1);
		withAll (obj_timeline, global::_app->id)
		{
			if (updatevalues)
				tl_update_values(ScopeAny(self));
			self->tex_obj = self->value_inherit.Value(e_value_TEXTURE_OBJ);
			if ((self->tex_obj != self->tex_obj_prev) || global::_app->history_resource_update)
			{
				if (self->render_visible)
				{
					if (render_update_tl_resource(ScopeAny(self)))
						self->tex_obj_prev = self->tex_obj;
				}
			}
			if (self->type == e_tl_type_PATH)
				array_add(VarType::CreateRef(global::_app->project_path_tl_array), self->id);
			if (self->value.Value(e_value_PATH_OBJ) != null_)
				array_add(VarType::CreateRef(global::_app->project_use_path_tl_array), self->id);
			if (tl_supports_ik(ScopeAny(self)))
				array_add(VarType::CreateRef(global::_app->project_ik_part_array), self->id);
			if (self->type == e_tl_type_CAMERA)
			{
				array_add(VarType::CreateRef(cameraarr), self->id);
				if (global::_app->window_busy == /*""*/ STR(0))
				{
					if (self->cam_goalzoom > IntType(0) && abs(self->cam_goalzoom - self->value.Value(e_value_CAM_ROTATE_DISTANCE)) > 0.001)
					{
						withOne (app, global::_app->id, self->id)
						{
							tl_value_set_start(ScopeAny(self), ID_action_tl_frame_cam_rotate_distance, true);
							tl_value_set(ScopeAny(self), { e_value_CAM_ROTATE_DISTANCE, (ObjType(obj_timeline, self.otherId)->cam_goalzoom - ObjType(obj_timeline, self.otherId)->value.Value(e_value_CAM_ROTATE_DISTANCE)) / max({ IntType(1), 4.0 / global::delta }), true });
							tl_value_set_done();
						}
						
					}
					else
						self->cam_goalzoom = null_;
					
				}
			}
			if (self->type == e_temp_type_PARTICLE_SPAWNER)
				particle_spawner_update(ScopeAny(self), self->id);
			if (self->type == e_tl_type_BACKGROUND && self->value_inherit.Value(e_value_VISIBLE) && !(self->hide > 0))
				bgobject = self->id;
			if ((self->type == e_tl_type_POINT_LIGHT || self->type == e_tl_type_SPOT_LIGHT) && self->value_inherit.Value(e_value_VISIBLE))
			{
				if ((self->hide > 0 && !global::render_hidden) || (!global::_app->view_render && self->lq_hiding > 0))
					continue;
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(0)] = self->world_pos.Value(X_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(1)] = self->world_pos.Value(Y_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(2)] = self->world_pos.Value(Z_);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(3)] = self->value.Value(e_value_LIGHT_RANGE);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(4)] = ((RealType)color_get_red((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(5)] = ((RealType)color_get_green((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(6)] = ((RealType)color_get_blue((IntType)(self->value.Value(e_value_LIGHT_COLOR))) / 255.0) * self->value.Value(e_value_LIGHT_STRENGTH);
				global::_app->background_light_data[global::_app->background_light_amount * IntType(8) + IntType(7)] = IntType(1);
				global::_app->background_light_amount++;
			}
		}
		
		if (updatevalues)
			tl_update_matrix(self);
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(project_path_tl_array))); i++)
		{
			withOne (obj_timeline, sArr(project_path_tl_array).Value(i), global::_app->id)
			{
				if (self->path_update)
				{
					tl_update_path(self);
					self->path_update = false;
				}
			}
			
		}
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(sArr(project_use_path_tl_array))); i++)
			ObjType(obj_timeline, sArr(project_use_path_tl_array)[i])->update_matrix = true;
		if (array_length(VarType::CreateRef(sArr(project_use_path_tl_array))) > IntType(0))
		{
			withOne (app, global::_app->id, global::_app->id)
				tl_update_matrix(ScopeAny(self), true);
			
		}
		sVar(project_ik_part_array) = null_;
		sInt(timeline_camera) = null_;
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(cameraarr)); i++)
		{
			IntType cam = cameraarr.Value(i);
			if (ObjType(obj_timeline, cam)->selected > 0 || (ObjType(obj_timeline, cam)->value_inherit.Value(e_value_VISIBLE) && !(ObjType(obj_timeline, cam)->hide > 0)))
			{
				sInt(timeline_camera) = cam;
				break;
			}
		}
		sVar(timeline_marker_previous) = sVar(timeline_marker);
		if (bgobject > 0)
		{
			sVar(background_image_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_IMAGE_SHOW);
			sVar(background_image_rotation) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_IMAGE_ROTATION);
			sVar(background_sky_sun_angle) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_SUN_ANGLE);
			sVar(background_sky_sun_scale) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_SUN_SCALE);
			sVar(background_sky_moon_phase) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_MOON_PHASE);
			sVar(background_sky_moon_angle) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_MOON_ANGLE);
			sVar(background_sky_moon_scale) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_MOON_SCALE);
			sVar(background_sky_time) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_TIME);
			sVar(background_sky_rotation) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_ROTATION);
			sVar(background_sunlight_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_STRENGTH);
			sVar(background_sunlight_angle) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_ANGLE);
			sVar(background_twilight) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_TWILIGHT);
			sVar(background_sky_clouds_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_SHOW);
			sVar(background_sky_clouds_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_SPEED);
			sVar(background_sky_clouds_height) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_HEIGHT);
			sVar(background_sky_clouds_offset) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_OFFSET);
			sVar(background_ground_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GROUND_SHOW);
			sVar(background_ground_slot) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GROUND_SLOT);
			sVar(background_biome) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_BIOME);
			sVar(background_sky_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_COLOR);
			sVar(background_sky_clouds_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SKY_CLOUDS_COLOR);
			sVar(background_sunlight_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_SUNLIGHT_COLOR);
			sVar(background_ambient_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_AMBIENT_COLOR);
			sVar(background_night_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_NIGHT_COLOR);
			sVar(background_grass_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_GRASS_COLOR);
			sVar(background_foliage_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOLIAGE_COLOR);
			sVar(background_water_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WATER_COLOR);
			sVar(background_leaves_oak_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_OAK_COLOR);
			sVar(background_leaves_spruce_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_SPRUCE_COLOR);
			sVar(background_leaves_birch_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_BIRCH_COLOR);
			sVar(background_leaves_jungle_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_JUNGLE_COLOR);
			sVar(background_leaves_acacia_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_ACACIA_COLOR);
			sVar(background_leaves_dark_oak_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_DARK_OAK_COLOR);
			sVar(background_leaves_mangrove_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_LEAVES_MANGROVE_COLOR);
			sVar(background_fog_show) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SHOW);
			sVar(background_fog_sky) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SKY);
			sVar(background_fog_color_custom) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_CUSTOM_COLOR);
			sVar(background_fog_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_COLOR);
			sVar(background_fog_custom_object_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_CUSTOM_OBJECT_COLOR);
			sVar(background_fog_object_color) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_OBJECT_COLOR);
			sVar(background_fog_distance) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_DISTANCE);
			sVar(background_fog_size) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_SIZE);
			sVar(background_fog_height) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_FOG_HEIGHT);
			sVar(background_wind) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND);
			sVar(background_wind_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_SPEED);
			sVar(background_wind_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_STRENGTH);
			sVar(background_wind_direction) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTION);
			sVar(background_wind_directional_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTIONAL_SPEED);
			sVar(background_wind_directional_strength) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_WIND_DIRECTIONAL_STRENGTH);
			sVar(background_texture_animation_speed) = ObjType(obj_timeline, bgobject)->value.Value(e_value_BG_TEXTURE_ANI_SPEED);
			if (sVar(background_biome) == /*"custom"*/ STR(594) || sVar(background_biome_prev) != sVar(background_biome))
			{
				withAll (obj_resource, global::_app->id)
					res_update_colors(ScopeAny(self));
				
				ObjType(obj_preview, ObjType(obj_category, ObjType(obj_tab, sInt(properties))->library)->preview)->update = true;
				sVar(background_biome_prev) = sVar(background_biome);
			}
			background_ground_update_texture(self);
			background_ground_update_texture_material(self);
			background_ground_update_texture_normal(self);
		}
		background_sky_update_sun();
		sReal(background_night_alpha) = background_sky_night_alpha();
		sReal(background_sunset_alpha) = background_sky_rise_set_alpha(false);
		sReal(background_sunrise_alpha) = background_sky_rise_set_alpha(true);
		IntType twilight_color = merge_color((IntType)(sVar(background_sunlight_color)), (sVar(background_twilight) > 0) ? c_red : c_white, max({ sReal(background_sunrise_alpha), sReal(background_sunset_alpha) }) * 0.75);
		sInt(background_sunlight_color_final) = merge_color(twilight_color, c_black, sReal(background_night_alpha));
		sInt(background_ambient_color_final) = merge_color((IntType)(sVar(background_ambient_color)), (IntType)(sVar(background_night_color)), sReal(background_night_alpha));
		sVar(background_fog_color_final) = sVar(background_fog_color);
		sInt(background_sky_color_final) = merge_color((IntType)(sVar(background_sky_color)), (IntType)(hex_to_color(/*"020204"*/ STR(713))), background_sky_night_alpha());
		if (sStr(window_state) == /*"export_movie"*/ STR(49))
			app_update_cameras(sReal(exportmovie_high_quality), true);
		else
			app_update_cameras(sBool(view_render), false);
		
		sVar(timeline_marker_current) = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(timeline_marker_list)); i++)
		{
			if (sVar(timeline_marker) >= idVar(DsList(sInt(timeline_marker_list)).Value(i), pos))
				sVar(timeline_marker_current) = DsList(sInt(timeline_marker_list)).Value(i);
		}
		sBool(history_resource_update) = false;
	}
	
	void app_update_backup(ScopeAny self)
	{
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(project_folder) != /*""*/ STR(0) && sVar(setting_backup) > 0 && sInt(backup_next) > 0 && current_time() > sInt(backup_next))
		{
			sReal(backup_text_ani) += 0.04 * global::delta;
			if (sReal(backup_text_ani) > IntType(1))
			{
				project_backup(self);
				sReal(backup_text_ani) = IntType(4);
			}
		}
		else
			sReal(backup_text_ani) -= 0.04 * global::delta;
		
		sReal(backup_text_ani) = clamp(sReal(backup_text_ani), IntType(0), IntType(4));
	}
	
	RealType app_update_cameras(RealType highquality, BoolType movie)
	{
		if (!(ObjType(obj_view, global::_app->view_second)->show > 0) && global::_app->view_render && !global::_app->view_render_real_time && global::_app->window_state != /*"export_movie"*/ STR(49) && global::_app->window_state != /*"export_image"*/ STR(56) && !movie)
			return IntType(0);
		withAll (obj_timeline, global::_app->id)
		{
			if (!self->render_visible || !type_is_shape(self->type))
				continue;
			VarType texobj;
			if (self->value_inherit.Value(e_value_TEXTURE_OBJ) > IntType(0))
				texobj = self->value_inherit.Value(e_value_TEXTURE_OBJ);
			else
				texobj = idVar(self->temp, shape_tex);
			
			if (texobj != null_ && idVar(texobj, type) == e_tl_type_CAMERA)
				idBool(texobj, cam_surf_required) = true;
		}
		
		withAll (obj_particle, global::_app->id)
		{
			if (idVar(self->type, temp) == particle_sheet || idVar(self->type, temp) == particle_template || !type_is_shape(idVar(idVar(self->type, temp), type)))
				continue;
			if (idVar(idVar(self->type, temp), shape_tex) != null_ && idVar(idVar(idVar(self->type, temp), shape_tex), type) == e_tl_type_CAMERA)
				idBool(idVar(idVar(self->type, temp), shape_tex), cam_surf_required) = true;
		}
		
		withAll (obj_timeline, global::_app->id)
		{
			if (self->type != e_tl_type_CAMERA || !self->cam_surf_required)
				continue;
			if (highquality > 0 && global::render_samples > -IntType(1) && surface_exists((IntType)(self->cam_surf)))
			{
				self->cam_surf_required = false;
				continue;
			}
			global::render_samples = -IntType(1);
			withOne (app, global::_app->id, self->id)
			{
				render_start({ ObjType(obj_timeline, self.otherId)->cam_surf_tmp, self.otherId });
				if (highquality > 0)
					render_high(ScopeAny(self));
				else
					render_low(ScopeAny(self));
				
				ObjType(obj_timeline, self.otherId)->cam_surf_tmp = render_done();
			}
			
			self->cam_surf = surface_require(self->cam_surf, global::render_width, global::render_height);
			VarType tmp = self->cam_surf;
			self->cam_surf = self->cam_surf_tmp;
			self->cam_surf_tmp = tmp;
			self->cam_surf_required = false;
		}
		
		return 0.0;
	}
	
	void app_update_caption()
	{
		if (global::_app->project_name != /*""*/ STR(0))
			window_set_caption(global::_app->project_name + string_repeat(/*" * "*/ STR(714), global::_app->project_changed) + /*" - Mine-imator"*/ STR(715));
		else
			window_set_caption(/*"Mine-imator"*/ STR(19));
		
	}
	
	void app_update_interface(ScopeAny self)
	{
		if (sBool(update_interface_wait))
		{
			interface_update_instant(self);
			sBool(update_interface_wait) = false;
		}
		if (sReal(window_height) <= IntType(900) || sVar(setting_interface_compact) > 0)
		{
			sReal(ui_large_height) = IntType(24);
			sReal(ui_small_height) = IntType(20);
			sReal(window_compact) = true;
		}
		else
		{
			sReal(ui_large_height) = IntType(32);
			sReal(ui_small_height) = IntType(24);
			sReal(window_compact) = false;
		}
		
	}
	
	void app_update_keybinds()
	{
		VarType obj;
		BoolType check, navclear;
		navclear = false;
		for (IntType i = IntType(0); i < e_keybind_amount; i++)
		{
			obj = global::keybinds.Value(i);
			check = keybind_check(obj, /*"keyboard_check"*/ STR(716));
			idBool(obj, released) = false;
			if (idVar(obj, active) > 0)
				idBool(obj, released) = keybind_check(obj, /*"keyboard_check_released"*/ STR(717));
			idBool(obj, pressed) = keybind_check(obj, /*"keyboard_check_pressed"*/ STR(718));
			idVar(obj, active) = check;
			if (idBool(obj, pressed) && idBool(obj, navigation) && string_contains(global::_app->window_busy, /*"camera"*/ STR(120)))
				navclear = true;
		}
		if (navclear)
		{
			for (IntType i = IntType(0); i < e_keybind_amount; i++)
			{
				obj = global::keybinds.Value(i);
				if (!idBool(obj, navigation))
				{
					idBool(obj, pressed) = false;
					idVar(obj, active) = false;
				}
			}
		}
	}
	
	void app_update_keyboard(ScopeAny self)
	{
		if (dev_mode)
		{
			if (keyboard_check_pressed(vk_f7))
				minecraft_assets_reload();
			if (keyboard_check_pressed(vk_f9))
				open_url(file_directory);
			if (keyboard_check_pressed(vk_f10))
				open_url(gmlGlobal::working_directory);
		}
		if (keyboard_check_pressed(vk_f11))
			open_url(log_file);
		if (keyboard_check_pressed(vk_f12))
			sBool(debug_info) = !sBool(debug_info);
		if (sStr(window_state) == /*""*/ STR(0) && (sVar(window_busy) == /*""*/ STR(0) || sStr(settings_menu_name) == /*"colorpicker"*/ STR(719)) && !sBool(textbox_isediting))
		{
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_NEW))->pressed)
				action_toolbar_new(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_IMPORT_ASSET))->pressed)
				action_toolbar_import_asset(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_OPEN))->pressed)
				action_toolbar_open(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE))->pressed)
				action_toolbar_save(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PROJECT_SAVE_AS))->pressed)
				action_toolbar_save_as(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_UNDO))->pressed)
				action_toolbar_undo(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_REDO))->pressed)
				action_toolbar_redo(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PLAY))->pressed)
				action_tl_play(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PLAY_BEGINNING))->pressed)
				action_tl_play_beginning();
			if (!(sReal(timeline_playing) > 0))
			{
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_RIGHT))->pressed)
					sVar(timeline_marker_move) = sVar(timeline_marker);
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_RIGHT))->active > 0)
					action_tl_right();
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_LEFT))->pressed)
					sVar(timeline_marker_move) = sVar(timeline_marker);
				if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_MARKER_LEFT))->active > 0)
					action_tl_left();
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_RENDER_MODE))->pressed)
				view_toggle_render();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CREATE_FOLDER))->pressed)
				action_tl_folder(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SELECT))->pressed)
			{
				if (global::tl_edit > 0)
					action_tl_deselect_all(self);
				else
					action_tl_select_all(self);
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_HIDE))->pressed)
				action_tl_hide_select(self, true);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_SHOW_HIDDEN))->pressed)
				action_tl_hide_select(self, false);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_SECONDARY_VIEW))->pressed)
				action_setting_secondary_view(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DUPLICATE))->pressed && global::tl_edit != null_)
				action_tl_duplicate(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TIMELINE_DELETE))->pressed && global::tl_edit != null_)
				action_tl_remove(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_CREATE))->pressed)
				action_tl_keyframes_create(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_COPY))->pressed)
				tl_keyframes_copy(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_CUT))->pressed)
				action_tl_keyframes_cut(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_PASTE))->pressed)
				action_tl_keyframes_paste(self, sVar(timeline_mouse_pos));
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_KEYFRAMES_DELETE))->pressed)
				action_tl_keyframes_remove(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PARTICLES_SPAWN))->pressed)
				action_lib_pc_spawn();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_PARTICLES_CLEAR))->pressed)
				action_lib_pc_clear();
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_SELECT))->pressed)
			{
				action_tools_disable_all(self);
				sBool(setting_tool_select) = sVar(setting_separate_tool_modes);
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_MOVE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sVar(setting_tool_move) = true;
				}
				else
				{
					sVar(setting_tool_move) = !(sVar(setting_tool_move) > 0);
					sBool(setting_tool_scale) = false;
					if (global::tl_edit > 0)
						idVar(global::tl_edit, show_tool_position) = sVar(setting_tool_move);
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_ROTATE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_rotate) = true;
				}
				else
				{
					sBool(setting_tool_rotate) = !sBool(setting_tool_rotate);
					sBool(setting_tool_scale) = false;
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_SCALE))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_scale) = true;
				}
				else
				{
					sBool(setting_tool_scale) = !sBool(setting_tool_scale);
					if (sBool(setting_tool_scale))
					{
						sVar(setting_tool_move) = false;
						sBool(setting_tool_rotate) = false;
						sBool(setting_tool_bend) = false;
					}
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_BEND))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_bend) = true;
				}
				else
				{
					sBool(setting_tool_bend) = !sBool(setting_tool_bend);
					sBool(setting_tool_scale) = false;
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_TOOL_TRANSFORM))->pressed)
			{
				if (sVar(setting_separate_tool_modes) > 0)
				{
					action_tools_disable_all(self);
					sBool(setting_tool_transform) = true;
				}
				else
				{
					sVar(setting_tool_move) = true;
					sBool(setting_tool_rotate) = true;
					sBool(setting_tool_bend) = true;
					sBool(setting_tool_scale) = false;
					if (global::tl_edit > 0)
						idVar(global::tl_edit, show_tool_position) = sVar(setting_tool_move);
				}
				
			}
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_SNAP))->pressed)
				sReal(setting_snap) = !(sReal(setting_snap) > 0);
		}
		else
			if (sBool(textbox_jump) || (sBool(textbox_isediting) && keyboard_check_pressed(vk_tab)))
			{
				if (sBool(textbox_jump))
				{
					RealType tbxpos, move;
					ArrType tbxdata;
					VarType tab, tabstart, tbx;
					tbxpos = IntType(0);
					for (; tbxpos < ds_list_size(sInt(textbox_list)); tbxpos++)
					{
						tbxdata = DsList(sInt(textbox_list)).Value(tbxpos);
						if (tbxdata.Value(IntType(0)) == sVar(textbox_lastfocus))
							break;
					}
					move = (keyboard_check(vk_shift) ? -IntType(1) : IntType(1));
					tabstart = tbxdata.Value(IntType(1));
					tab = -IntType(1);
					while (tabstart != tab)
					{
						tbxpos += move;
						tbxpos = mod_fix(tbxpos, ds_list_size(sInt(textbox_list)));
						tbxdata = DsList(sInt(textbox_list)).Value(tbxpos);
						tab = tbxdata.Value(IntType(1));
					}
					
					tab = tbxdata.Value(IntType(1));
					if (tab != null_ && idInt(tab, scroll) != null_ && ObjType(obj_scrollbar, idInt(tab, scroll))->needed)
						ObjType(obj_scrollbar, idInt(tab, scroll))->value_goal = (tbxdata.Value(IntType(2)) - (tbxdata.Value(IntType(3)) - ObjType(obj_scrollbar, idInt(tab, scroll))->value)) - (floor((RealType)tbxdata.Value(IntType(4)) / 2.0));
					tbx = tbxdata.Value(IntType(0));
					sVar(window_focus) = string(tbx);
					sVar(textbox_jumpto) = tbx;
					ds_list_clear(sInt(textbox_list));
					sBool(textbox_jump) = false;
				}
				else
					sBool(textbox_jump) = true;
				
			}
		
		if (sVar(textbox_jumpto) == -IntType(1) && sBool(textbox_isediting) && !sBool(textbox_isediting_respond))
		{
			sBool(textbox_isediting) = false;
			if (sVar(window_busy) == /*""*/ STR(0))
				sVar(window_focus) = /*""*/ STR(0);
		}
		sBool(textbox_isediting_respond) = false;
		if (!sBool(textbox_isediting))
		{
			sReal(dragger_multiplier) = keyboard_check(vk_shift) ? .1 : 1.0;
			sReal(dragger_snap) = sReal(setting_snap) > 0 || keyboard_check(vk_control);
		}
		else
		{
			sReal(dragger_multiplier) = IntType(1);
			sReal(dragger_snap) = false;
		}
		
	}
	
	RealType app_update_lists(ScopeAny self)
	{
		if (global::list_item_script == null_)
			return IntType(0);
		if (global::list_item_script_value == VarType())
			script_execute(self, { global::list_item_script });
		else
			script_execute(self, { global::list_item_script, global::list_item_script_value });
		
		global::list_item_script = null_;
		global::list_item_script_value = null_;
		global::list_item_value = null_;
		return 0.0;
	}
	
	void app_update_micro_animations()
	{
		RealType constantspeed;
		constantspeed = 0.1;
		withAll (obj_scrollbar, global::_app->id)
		{
			if (!self->value_ease)
				self->value = self->value_goal;
			else
				self->value += floor((self->value_goal - self->value) / max({ IntType(1), 4.0 / global::delta }));
			
			ObjType(value_animation, self->mousenear)->update(constantspeed);
		}
		
		if (global::_app->window_state == /*""*/ STR(0))
		{
			if (global::_app->timeline_zoom != global::_app->timeline_zoom_goal)
			{
				global::_app->timeline_zoom += (global::_app->timeline_zoom_goal - global::_app->timeline_zoom) / max({ IntType(1), 4.0 / global::delta });
				ObjType(obj_scrollbar, idInt(global::_app->timeline, hor_scroll))->value = max({ IntType(0), ObjType(obj_scrollbar, idInt(global::_app->timeline, hor_scroll))->value });
			}
		}
		withAll (obj_view, global::_app->id)
		{
			if (global::_app->setting_reduced_motion > 0)
				self->toolbar_alpha = self->toolbar_alpha_goal;
			else
				self->toolbar_alpha += (self->toolbar_alpha_goal - self->toolbar_alpha) / max({ IntType(1), 4.0 / global::delta });
			
			if (self->toolbar_alpha > .97 && self->toolbar_alpha_goal == IntType(1))
				self->toolbar_alpha = IntType(1);
		}
		
		for (IntType i = IntType(0); i < ds_list_size(global::microani_list); i++)
		{
			IntType ani = DsList(global::microani_list).Value(i);
			if (ObjType(micro_animation, ani)->steps_hidden > IntType(60) * IntType(3))
			{
				ds_list_add({ global::microani_delete_list, ani });
				continue;
			}
			ObjType(micro_animation, ani)->steps_alive++;
			ObjType(micro_animation, ani)->steps_hidden++;
			ObjType(micro_animation, ani)->update(constantspeed * 1.5);
		}
		for (IntType i = IntType(0); i < ds_list_size(global::microani_delete_list); i++)
		{
			VarType ani = DsList(global::microani_delete_list).Value(i);
			ds_list_delete_value(global::microani_list, ani);
			ds_map_delete(global::microanis, ObjType(micro_animation, ani)->key);
			delete Obj(ani);
		}
		ds_list_clear(global::microani_delete_list);
	}
	
	void app_update_minecraft_resources()
	{
		minecraft_update_patterns();
		minecraft_update_armor();
	}
	
	void app_update_mouse()
	{
		window_set_cursor(global::_app->mouse_cursor);
		global::_app->mouse_cursor = cr_default;
		global::_app->mouse_previous_x = global::_app->mouse_current_x;
		global::_app->mouse_previous_y = global::_app->mouse_current_y;
		global::_app->mouse_current_x = gmlGlobal::mouse_x;
		global::_app->mouse_current_y = gmlGlobal::mouse_y;
		global::_app->mouse_dx = gmlGlobal::mouse_x - global::_app->mouse_previous_x;
		global::_app->mouse_dy = gmlGlobal::mouse_y - global::_app->mouse_previous_y;
		global::_app->mouse_left_pressed = (!global::_app->mouse_left && mouse_check_button(mb_left));
		global::_app->mouse_left_released = (global::_app->mouse_left && !mouse_check_button(mb_left));
		global::_app->mouse_left = mouse_check_button(mb_left);
		global::_app->mouse_right_pressed = (!global::_app->mouse_right && mouse_check_button(mb_right));
		global::_app->mouse_right_released = (global::_app->mouse_right && !mouse_check_button(mb_right));
		global::_app->mouse_right = mouse_check_button(mb_right);
		global::_app->mouse_middle_pressed = (!global::_app->mouse_middle && mouse_check_button(mb_middle));
		global::_app->mouse_middle = mouse_check_button(mb_middle);
		global::_app->mouse_wheel = mouse_wheel_down() - mouse_wheel_up();
		if (global::_app->mouse_left_pressed)
		{
			global::_app->mouse_click_x = gmlGlobal::mouse_x;
			global::_app->mouse_click_y = gmlGlobal::mouse_y;
		}
		else
			if (global::_app->mouse_left)
				global::_app->mouse_move = max({ abs(gmlGlobal::mouse_x - global::_app->mouse_click_x), abs(gmlGlobal::mouse_y - global::_app->mouse_click_y) });
			else
				global::_app->mouse_move = IntType(0);
		
		
		if (global::_app->mouse_previous_x != gmlGlobal::mouse_x || global::_app->mouse_previous_y != gmlGlobal::mouse_y)
			global::_app->mouse_still = IntType(0);
		else
			global::_app->mouse_still++;
		
		if (global::_app->mouse_left_released || global::_app->mouse_right_released)
		{
			global::_app->mouse_wrap_x = IntType(0);
			global::_app->mouse_wrap_y = IntType(0);
		}
		global::_app->window_scroll_focus_prev = global::_app->window_scroll_focus;
		global::_app->window_scroll_focus = /*""*/ STR(0);
		if (global::_app->mouse_still == IntType(0))
		{
			global::_app->mouse_click_count = IntType(0);
			global::_app->mouse_click_timer = IntType(0);
		}
		if (global::_app->mouse_click_count == IntType(1))
		{
			global::_app->mouse_click_timer += (1.0 / gmlGlobal::fps) * IntType(1000);
			if (global::_app->mouse_click_timer < IntType(500) && global::_app->mouse_left_pressed)
				global::_app->mouse_click_count++;
			if (global::_app->mouse_click_timer >= IntType(500))
			{
				global::_app->mouse_click_count = IntType(0);
				global::_app->mouse_click_timer = IntType(0);
			}
		}
		if (global::_app->mouse_click_count >= IntType(2) && global::_app->mouse_left_pressed)
			global::_app->mouse_left_double_pressed = true;
		else
			global::_app->mouse_left_double_pressed = false;
		
		if (global::_app->mouse_click_count >= IntType(2) && global::_app->mouse_left_released)
		{
			global::_app->mouse_click_count = IntType(0);
			global::_app->mouse_click_timer = IntType(0);
		}
		if (global::_app->mouse_left_pressed && global::_app->mouse_click_count == IntType(0))
			global::_app->mouse_click_count++;
	}
	
	void app_update_play()
	{
		if (global::_app->timeline_playing > 0)
		{
			global::_app->timeline_marker = global::_app->timeline_playing_start_marker + ((current_time() - global::_app->timeline_playing_start_time) / 1000.0) * global::_app->project_tempo;
			if (global::_app->setting_timeline_frame_snap > 0)
				global::_app->timeline_marker = floor(global::_app->timeline_marker);
			if (global::_app->timeline_repeat > 0 || global::_app->timeline_seamless_repeat > 0)
			{
				if (global::_app->timeline_region_end != null_)
				{
					if (global::_app->timeline_marker >= global::_app->timeline_region_end)
						action_tl_play_beginning();
				}
				else
					if (global::_app->timeline_marker >= global::_app->timeline_length && global::_app->timeline_length > IntType(0))
						action_tl_play_beginning();
				
			}
		}
	}
	
	void app_update_previews()
	{
		ObjType(obj_preview, global::_app->lib_preview)->select = global::temp_edit;
		ObjType(obj_preview, global::_app->res_preview)->select = global::res_edit;
		ObjType(obj_preview, ObjType(obj_bench_settings, global::_app->bench_settings)->preview)->select = global::_app->bench_settings;
		withAll (obj_preview, global::_app->id)
		{
			if (self->last_select != self->select)
			{
				preview_reset_view(ScopeAny(self));
				particle_spawner_clear(ScopeAny(self));
				self->reset_view = true;
			}
			self->last_select = self->select;
			if (instance_exists(self->select) && Obj(self->select)->subAssetId != ID_obj_resource && idVar(self->select, type) == e_temp_type_PARTICLE_SPAWNER)
				particle_spawner_update(ScopeAny(self), self->id);
			self->spawn_laststep = global::current_step;
		}
		
	}
	
	void app_update_recent(ScopeAny self)
	{
		if (sBool(recent_add_wait) && sVar(window_busy) == /*""*/ STR(0))
			recent_add(self);
	}
	
	RealType app_update_tl_edit(ScopeAny self)
	{
		app_update_tl_edit_tabs(self);
		app_update_tl_edit_select(self);
		if (!instance_exists(global::temp_edit))
		{
			tab_close(self, sInt(template_editor));
			return IntType(0);
		}
		return 0.0;
	}
	
	void app_update_tl_edit_select(ScopeAny self)
	{
		withOne (obj_tab, sInt(frame_editor), self->id)
		{
			ObjType(obj_category, self->transform)->show = false;
			ObjType(obj_category, self->transform)->enabled = false;
			ObjType(obj_category, self->constraints)->enabled = false;
			ObjType(obj_category, self->material)->enabled = false;
			ObjType(obj_category, self->particles)->enabled = false;
			ObjType(obj_category, self->light)->enabled = false;
			ObjType(obj_category, self->light)->has_spotlight = false;
			idReal(self->camera, show) = false;
			idBool(self->camera, enabled) = false;
			idVar(self->camera, video_template) = null_;
			ObjType(obj_category, self->sound)->enabled = false;
			idBool(self->text, enabled) = false;
			ObjType(obj_category, self->item)->enabled = false;
			ObjType(obj_category, self->keyframe)->enabled = false;
		}
		
		withOne (obj_tab, sInt(timeline_editor), self->id)
		{
			ObjType(obj_category, self->appearance)->enabled = false;
			ObjType(obj_category, self->audio)->enabled = false;
			ObjType(obj_category, self->path)->enabled = false;
		}
		
		sReal(select_kf_amount) = IntType(0);
		sInt(select_kf_single) = null_;
		sBool(timeline_settings) = false;
		sInt(timeline_settings_import_loop_tl) = null_;
		sStr(timeline_settings_walk_fn) = /*""*/ STR(0);
		sStr(timeline_settings_run_fn) = /*""*/ STR(0);
		sBool(timeline_settings_keyframes) = false;
		sBool(timeline_settings_keyframes_export) = false;
		if (!sBool(setting_tool_scale) && !(global::_app->setting_separate_tool_modes > 0))
			sVar(setting_tool_move) = true;
		BoolType checkwalk, checkexport;
		VarType checkexportobj;
		checkwalk = true;
		checkexport = true;
		checkexportobj = null_;
		withAll (obj_timeline, self->id)
		{
			if (!(self->selected > 0))
				continue;
			if (self->part_of == null_)
				global::_app->timeline_settings = true;
			if (self->keyframe_select != null_)
			{
				if (checkwalk)
				{
					checkwalk = false;
					global::_app->timeline_settings_import_loop_tl = null_;
					if (self->type == e_tl_type_CHARACTER)
					{
						if (self->keyframe_select_amount == IntType(1) && self->keyframe_select != null_ && ds_list_find_index(self->keyframe_list, self->keyframe_select) < ds_list_size(self->keyframe_list) - IntType(1))
						{
							checkwalk = true;
							global::_app->timeline_settings_import_loop_tl = self->id;
						}
					}
				}
				global::_app->timeline_settings_keyframes = true;
				if (checkexport)
				{
					VarType obj = ((self->part_of != null_) ? self->part_of : VarType(self->id));
					if (checkexportobj == null_)
					{
						checkexportobj = obj;
						global::_app->timeline_settings_keyframes_export = true;
					}
					else
						if (checkexportobj != obj)
						{
							checkexport = false;
							global::_app->timeline_settings_keyframes_export = false;
						}
					
				}
			}
			if (!(self->show_tool_position > 0) && !(global::_app->setting_separate_tool_modes > 0))
				global::_app->setting_tool_move = idVar(global::tl_edit, show_tool_position);
			if (self->value_type.Value(e_value_type_TRANSFORM))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->transform)->enabled = true;
			if (self->value_type.Value(e_value_type_TRANSFORM_POS) && (self->type != e_tl_type_PATH && self->type != e_tl_type_PATH_POINT))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->constraints)->enabled = true;
			if (self->value_type.Value(e_value_type_MATERIAL))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->material)->enabled = true;
			if (self->value_type.Value(e_value_type_PARTICLES))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->particles)->enabled = true;
			if (self->value_type.Value(e_value_type_LIGHT))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->light)->enabled = true;
			if (self->value_type.Value(e_value_type_SPOTLIGHT))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->light)->has_spotlight = true;
			if (self->value_type.Value(e_value_type_CAMERA))
				idBool(ObjType(obj_tab, global::_app->frame_editor)->camera, enabled) = true;
			if (self->value_type.Value(e_value_type_SOUND))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->sound)->enabled = true;
			if (self->value_type.Value(e_value_type_TEXT))
				idBool(ObjType(obj_tab, global::_app->frame_editor)->text, enabled) = true;
			if (self->value_type.Value(e_value_type_ITEM))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->item)->enabled = true;
			if (self->value_type.Value(e_value_type_KEYFRAME))
				ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->keyframe)->enabled = true;
			if (self->value_type.Value(e_value_type_APPEARANCE))
				ObjType(obj_category, ObjType(obj_tab, global::_app->timeline_editor)->appearance)->enabled = true;
			if (self->value_type.Value(e_value_type_AUDIO))
				ObjType(obj_category, ObjType(obj_tab, global::_app->timeline_editor)->audio)->enabled = true;
			if (self->value_type.Value(e_value_type_PATH))
				ObjType(obj_category, ObjType(obj_tab, global::_app->timeline_editor)->path)->enabled = true;
			ObjType(obj_category, ObjType(obj_tab, global::_app->frame_editor)->transform)->show = true;
			if (self->value_type_show.Value(e_value_type_CAMERA))
				idReal(ObjType(obj_tab, global::_app->frame_editor)->camera, show) = true;
		}
		
		if (sInt(timeline_settings_import_loop_tl) != null_)
		{
			VarType name = idVar(idVar(ObjType(obj_timeline, sInt(timeline_settings_import_loop_tl))->temp, model_file), name);
			sStr(timeline_settings_walk_fn) = global::load_assets_startup_dir + mc_loops_directory + name + /*"_walk.miframes"*/ STR(720);
			sStr(timeline_settings_run_fn) = global::load_assets_startup_dir + mc_loops_directory + name + /*"_run.miframes"*/ STR(721);
			if (!file_exists(sStr(timeline_settings_walk_fn)))
			{
				name = idVar(ObjType(obj_timeline, sInt(timeline_settings_import_loop_tl))->temp, model_name);
				sStr(timeline_settings_walk_fn) = global::load_assets_startup_dir + mc_loops_directory + name + /*"_walk.miframes"*/ STR(720);
			}
			if (!file_exists(sStr(timeline_settings_run_fn)))
			{
				name = idVar(ObjType(obj_timeline, sInt(timeline_settings_import_loop_tl))->temp, model_name);
				sStr(timeline_settings_run_fn) = global::load_assets_startup_dir + mc_loops_directory + name + /*"_run.miframes"*/ STR(721);
			}
		}
	}
	
}
