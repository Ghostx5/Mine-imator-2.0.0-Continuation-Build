/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.16 19:54:52 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType draw_dragger_sky(ScopeAny self, StringType name, VarType xx, VarType yy, VarType value, RealType def, IntType script, IntType tbx, RealType time)
	{
		RealType wid, hei, capwidth, snapval;
		VarType caption, fieldx;
		BoolType dragmouseon;
		wid = dragger_width;
		hei = sReal(ui_small_height);
		capwidth = sVar(dw) - wid;
		snapval = IntType(1);
		draw_set_font(sInt(font_label));
		caption = string_limit(text_get({ name }), capwidth);
		if (xx + wid + capwidth < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		context_menu_area(self, { xx, yy, wid + capwidth, hei, /*"contextmenuvalue"*/ STR(1087), value, (time > 0) ? e_context_type_TIME : e_context_type_NUMBER, script, def });
		fieldx = xx + capwidth;
		dragmouseon = app_mouse_box(self, fieldx, yy, wid, hei) && sBool(content_mouseon) && (sVar(window_focus) != string(tbx));
		if (dragmouseon && sBool(mouse_left_pressed))
			sVar(window_focus) = name + /*"press"*/ STR(1095);
		if (sVar(window_focus) == name + /*"press"*/ STR(1095))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
				if (app_mouse_box(self, fieldx, yy, wid, hei))
				{
					if (!(time > 0))
						ObjType(obj_textbox, tbx)->text = string_decimals(value);
					sVar(window_focus) = string(tbx);
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
			else
				if (sReal(mouse_dx) != IntType(0))
				{
					sVar(dragger_drag_value) = value;
					sVar(window_busy) = name + /*"drag"*/ STR(30);
					sVar(window_focus) = /*""*/ STR(0);
				}
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
		{
			sInt(mouse_cursor) = cr_none;
			sVar(dragger_drag_value) += (gmlGlobal::mouse_x - sInt(mouse_click_x)) * sReal(dragger_multiplier);
			window_mouse_set(sInt(mouse_click_x), sInt(mouse_click_y));
			RealType d = snap(sVar(dragger_drag_value), snapval) - value;
			if (d != IntType(0))
			{
				script_execute(self, { script, d, true });
				if (time > 0)
					ObjType(obj_textbox, tbx)->text = rotation_get_time(value + d);
				else
					ObjType(obj_textbox, tbx)->text = string_decimals(value + d);
				
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (draw_inputbox(self, { name, fieldx, yy, wid, hei, string(def), tbx, null_, false, false, sInt(font_digits), e_inputbox_RIGHT }) && script != null_)
		{
			if (time > 0)
				script_execute(self, { script, time_get_rotation(ObjType(obj_textbox, tbx)->text), false });
			else
				script_execute(self, { script, clamp(string_get_real(ObjType(obj_textbox, tbx)->text, IntType(0)), -no_limit, no_limit), false });
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		if (dragmouseon)
			sInt(mouse_cursor) = cr_size_we;
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_label(self, { caption, xx, yy + hei / 2.0, fa_left, fa_middle, labelcolor, labelalpha, sInt(font_label) });
		if (sVar(window_busy) != name + /*"drag"*/ STR(30) && sVar(window_busy) != name + /*"press"*/ STR(1095) && sVar(window_focus) != string(tbx))
		{
			if (time > 0)
				ObjType(obj_textbox, tbx)->text = rotation_get_time(value);
			else
				ObjType(obj_textbox, tbx)->text = string_decimals(value);
			
		}
		return 0.0;
	}
	
	RealType draw_dropshadow(ScopeAny self, VarType xx, VarType yy, VarType width, VarType height, IntType color, VarType alpha)
	{
		alpha = alpha * draw_get_alpha() * .75;
		IntType slicesize;
		RealType offset;
		VarType drawx, drawy;
		slicesize = IntType(27);
		offset = IntType(16);
		drawx = xx - offset;
		drawy = yy - offset;
		width -= (IntType(11) * IntType(2));
		height -= (IntType(11) * IntType(2));
		if (width < IntType(0) || height < IntType(0))
			return IntType(0);
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), IntType(0), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize, IntType(0), IntType(1), slicesize, (IntType)(drawx), (IntType)(drawy), width, 1.0, color, alpha);
		drawx += width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), IntType(0), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx = xx - offset;
		drawy += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), slicesize, slicesize, IntType(1), (IntType)(drawx), (IntType)(drawy), 1.0, height, color, alpha);
		drawx += slicesize + width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), slicesize, slicesize, IntType(1), (IntType)(drawx), (IntType)(drawy), 1.0, height, color, alpha);
		drawx = xx - offset;
		drawy += height;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), IntType(0), slicesize + IntType(1), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		drawx += slicesize;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize, slicesize + IntType(1), IntType(1), slicesize, (IntType)(drawx), (IntType)(drawy), width, 1.0, color, alpha);
		drawx += width;
		draw_sprite_part_ext(ID_spr_dropshadow, IntType(0), slicesize + IntType(1), slicesize + IntType(1), slicesize, slicesize, (IntType)(drawx), (IntType)(drawy), 1.0, 1.0, color, alpha);
		return 0.0;
	}
	
	void draw_gradient(VarType xx, VarType yy, VarType w, RealType h, IntType color, RealType alphalefttop, RealType alpharighttop, RealType alpharightbot, RealType alphaleftbot)
	{
		RealType alpha = draw_get_alpha();
		draw_primitive_begin(pr_trianglestrip);
		draw_vertex_color((IntType)(xx), (IntType)(yy), color, alphalefttop * alpha);
		draw_vertex_color((IntType)(xx + w), (IntType)(yy), color, alpharighttop * alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy + h), color, alphaleftbot * alpha);
		draw_vertex_color((IntType)(xx + w), (IntType)(yy + h), color, alpharightbot * alpha);
		draw_primitive_end();
	}
	
	RealType draw_help_circle(ScopeAny self, StringType text, VarType xx, VarType yy, BoolType disabled)
	{
		if (text == /*""*/ STR(0))
			return IntType(0);
		BoolType mouseon;
		IntType color;
		RealType alpha;
		mouseon = app_mouse_box(self, xx, yy, IntType(20), IntType(20)) && sBool(content_mouseon) && !disabled;
		microani_set(text, null_, mouseon, false, false);
		color = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(global::a_text_tertiary, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER)) * lerp(1.0, .5, global::microani_arr.Value(e_microani_DISABLED));
		draw_image({ ID_spr_icons, icons_HELP_CIRCLE, xx + IntType(10), yy + IntType(10), IntType(1), IntType(1), color, alpha });
		if (!disabled)
			tip_set(self, text_get({ text }), xx, yy, IntType(20), IntType(20));
		microani_update({ mouseon, false, false, disabled, IntType(0) });
		return 0.0;
	}
	
	void draw_image(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count < IntType(5))
			draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), 1.0, 1.0, 0.0, c_white, draw_get_alpha());
		else
			if (argument_count < IntType(7))
				draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], 0.0, c_white, draw_get_alpha());
			else
				if (argument_count < IntType(9))
					draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], 0.0, (IntType)(argument[IntType(6)]), argument[IntType(7)] * draw_get_alpha());
				else
					draw_sprite_ext((IntType)(argument[IntType(0)]), (IntType)(argument[IntType(1)]), (IntType)(argument[IntType(2)]), (IntType)(argument[IntType(3)]), argument[IntType(4)], argument[IntType(5)], argument[IntType(8)], (IntType)(argument[IntType(6)]), argument[IntType(7)] * draw_get_alpha());
			
		
		
	}
	
	RealType draw_image_box_cover(VarType sprite, RealType xx, RealType yy, VarType w, VarType h)
	{
		RealType sw, sh, scale;
		if (!sprite_exists((IntType)(sprite)))
			return IntType(0);
		sw = sprite_get_width((IntType)(sprite));
		sh = sprite_get_height((IntType)(sprite));
		if (sw / sh < (RealType)w / h)
		{
			scale = (RealType)w / sw;
			yy += (h - scale * sh) / 2.0;
			h = sh * scale;
		}
		else
		{
			scale = (RealType)h / sh;
			xx += (w - scale * sw) / 2.0;
			w = sw * scale;
		}
		
		xx = floor(xx);
		yy = floor(yy);
		w = ceil(w);
		h = ceil(h);
		draw_image({ sprite, IntType(0), xx, yy, scale, scale });
		return 0.0;
	}
	
	RealType draw_inputbox(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType inputname, xx, yy, w, h, placeholder, tbx, script, disabled, err, font, type, alpha;
		IntType capwid;
		RealType padding;
		BoolType focused;
		BoolType update;
		inputname = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		w = argument[IntType(3)];
		h = argument[IntType(4)];
		placeholder = argument[IntType(5)];
		tbx = argument[IntType(6)];
		script = argument[IntType(7)];
		disabled = false;
		err = false;
		font = sInt(font_value);
		type = e_inputbox_LEFT;
		alpha = IntType(1);
		focused = (sVar(window_focus) == string(tbx));
		if (argument_count > IntType(8))
			disabled = argument[IntType(8)];
		if (argument_count > IntType(9))
			err = argument[IntType(9)];
		if (argument_count > IntType(10))
			font = argument[IntType(10)];
		if (argument_count > IntType(11))
			type = argument[IntType(11)];
		if (argument_count > IntType(12))
			alpha = argument[IntType(12)];
		capwid = string_width(text_get({ inputname }));
		padding = (h - IntType(22)) / 2.0;
		if (sBool(textbox_jump))
			ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + h < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0) || sVar(window_busy) == string(tbx) + /*"click"*/ STR(1096)) && !(disabled > 0);
		microani_set(string(tbx) + inputname, script, mouseon || sVar(window_focus) == string(tbx), false, (mouseon && sBool(mouse_left)) || (sVar(window_focus) == string(tbx)));
		VarType bordercolor;
		RealType borderalpha;
		bordercolor = merge_color((IntType)(global::c_border), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		bordercolor = merge_color((IntType)(bordercolor), (IntType)(global::c_accent), max({ global::microani_arr.Value(e_microani_PRESS), global::microani_arr.Value(e_microani_ACTIVE) }));
		bordercolor = merge_color((IntType)(bordercolor), (IntType)(global::c_border), global::microani_arr.Value(e_microani_DISABLED));
		borderalpha = lerp(global::a_border, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		borderalpha = lerp(borderalpha, global::a_accent, max({ global::microani_arr.Value(e_microani_PRESS), global::microani_arr.Value(e_microani_ACTIVE) }));
		borderalpha = lerp(borderalpha, global::a_border, global::microani_arr.Value(e_microani_DISABLED)) * alpha;
		if (err > 0)
		{
			bordercolor = global::c_error;
			borderalpha = IntType(1) * alpha;
		}
		draw_box(xx, yy, w, h, false, global::c_level_top, alpha * draw_get_alpha());
		draw_outline(xx, yy, w, h, IntType(1), bordercolor, borderalpha, true);
		draw_box_hover({ xx, yy, w, h, global::microani_arr.Value(e_microani_PRESS) });
		if (err > 0)
		{
			draw_image({ ID_spr_icons, icons_WARNING_TRIANGLE, xx + w - IntType(14), yy + ((RealType)h / 2.0), IntType(1), IntType(1), global::c_error, IntType(1) });
			w -= 28.0;
		}
		if (string_contains(inputname, /*"search"*/ STR(1097)))
		{
			draw_image({ ID_spr_icons, icons_SEARCH, xx + w - IntType(14), yy + ((RealType)h / 2.0), IntType(1), IntType(1), bordercolor, borderalpha });
			w -= 28.0;
		}
		draw_set_font((IntType)(font));
		RealType tbxh;
		VarType placeholderx, textx, texty;
		IntType textvalign, texthalign;
		tbxh = max({ string_height(/*" "*/ STR(17)), h - IntType(9) });
		if (type == e_inputbox_LEFT || type == e_inputbox_RIGHT)
		{
			textx = xx + IntType(8);
			texty = yy + floor((RealType)h / 2.0) - ceil(tbxh / 2.0);
			texthalign = fa_left;
			textvalign = fa_top;
			placeholderx = textx;
			if (type == e_inputbox_RIGHT)
			{
				placeholderx = xx + w - IntType(8);
				texthalign = fa_right;
			}
		}
		else
		{
			textx = xx + (RealType)w / 2.0;
			texty = yy + IntType(38);
			texthalign = fa_center;
			textvalign = fa_bottom;
			placeholderx = textx;
		}
		
		if (font == sInt(font_digits) && h >= IntType(24))
			texty += IntType(1);
		if (disabled > 0)
		{
			draw_label(self, { string_limit(idVar(tbx, text) + idVar(tbx, suffix), w - padding * IntType(2)), placeholderx, texty, texthalign, textvalign, global::c_text_tertiary, global::a_text_tertiary });
			update = false;
		}
		if (idVar(tbx, text) == /*""*/ STR(0) && placeholder != /*""*/ STR(0))
		{
			IntType suffixwid = string_width(idVar(tbx, suffix));
			draw_label(self, { string_limit(placeholder, (w - suffixwid) - padding * IntType(2)), placeholderx - suffixwid, texty, texthalign, textvalign, global::c_text_tertiary, global::a_text_tertiary });
		}
		if (!(disabled > 0))
		{
			if (type == e_inputbox_BIG)
			{
				VarType textwid = min({ w, string_width(idVar(tbx, text) + idVar(tbx, suffix)) });
				update = textbox_draw(self, tbx, xx + (RealType)w / 2.0 - (RealType)textwid / 2.0, yy + IntType(5), textwid, h - IntType(9));
			}
			else
				update = textbox_draw(self, tbx, textx, texty, w - IntType(16), tbxh, true, type == e_inputbox_RIGHT);
			
		}
		if (mouseon)
			sInt(mouse_cursor) = cr_beam;
		if (sVar(window_focus) == string(tbx))
			context_menu_area(self, { xx, yy, w, h, /*"contextmenutextbox"*/ STR(1098), tbx, e_context_type_NONE, null_, null_ });
		draw_box(xx, yy, w, h, false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_DISABLED));
		if (mouseon && sBool(mouse_left_released) && (sVar(window_focus) != string(tbx)))
		{
			sVar(window_focus) = string(tbx);
			app_mouse_clear(self);
		}
		if (update && (script != null_))
			script_execute(self, { script, idVar(tbx, text) });
		microani_update({ mouseon || sVar(window_focus) == string(tbx), (mouseon && sBool(mouse_left)) && sVar(window_focus) != string(tbx), sVar(window_focus) == string(tbx), disabled });
		return update;
	}
	
	RealType draw_keybind(ScopeAny self, IntType keybindID, VarType xx, VarType yy)
	{
		VarType keyobj, w;
		StringType name;
		BoolType mouseon;
		keyobj = global::keybinds.Value(keybindID);
		name = /*"settingskey"*/ STR(1099) + idVar(keyobj, name);
		w = sVar(dw);
		tab_control(self, IntType(28));
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + sReal(tab_control_h) < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			tab_next(self, false);
			return IntType(0);
		}
		mouseon = app_mouse_box(self, xx, yy, w, sReal(tab_control_h)) && sBool(content_mouseon);
		context_menu_area(self, { xx, yy, w, sReal(tab_control_h), /*"keybind"*/ STR(1100), keybindID, null_, null_, null_ });
		microani_set(name, null_, mouseon || sVar(window_busy) == name, false, false);
		microani_update({ mouseon || sVar(window_busy) == name, false, false });
		VarType textcolor;
		RealType textalpha;
		textcolor = ((idReal(keyobj, match_error) > 0) ? global::c_error : global::c_text_secondary);
		textalpha = ((idReal(keyobj, match_error) > 0) ? 1.0 : global::a_text_secondary);
		draw_label(self, { text_get({ name }) + /*":"*/ STR(793), sVar(dx), sVar(dy) + (sReal(tab_control_h) / 2.0), fa_left, fa_middle, textcolor, textalpha, sInt(font_label) });
		textcolor = ((idReal(keyobj, match_error) > 0) ? global::c_error : global::c_text_main);
		textalpha = ((idReal(keyobj, match_error) > 0) ? 1.0 : global::a_text_main);
		draw_label(self, { text_control_name(sVar(window_busy) == name ? global::keybind_edit : idVar(keyobj, keybind)), sVar(dx) + w - (IntType(32) * global::microani_arr.Value(e_microani_HOVER)), sVar(dy) + (sReal(tab_control_h) / 2.0), fa_right, fa_middle, textcolor, textalpha, sInt(font_value) });
		draw_set_alpha(global::microani_arr.Value(e_microani_HOVER));
		if (draw_button_icon(self, { name + /*"edit"*/ STR(116), sVar(dx) + w - IntType(24), sVar(dy) + IntType(2), IntType(24), IntType(24), sVar(window_busy) == name, icons_PENCIL, null_, false, /*"tooltipeditkeybind"*/ STR(1101) }))
		{
			sVar(window_busy) = name;
			global::keybind_edit = keybind_new(null_);
		}
		draw_set_alpha(1.0);
		if (sVar(window_busy) == name)
		{
			BoolType update = false;
			if (keyboard_check_pressed(vk_anykey) || keyboard_check_released(vk_anykey))
			{
				global::keybind_edit[e_keybind_key_CTRL] = (keyboard_check_direct(vk_lcontrol) || keyboard_check_direct(vk_rcontrol));
				global::keybind_edit[e_keybind_key_SHIFT] = (keyboard_check_direct(vk_lshift) || keyboard_check_direct(vk_rshift));
				global::keybind_edit[e_keybind_key_ALT] = (keyboard_check_direct(vk_lalt) || keyboard_check_direct(vk_ralt));
				if (keyboard_check_pressed(vk_anykey))
				{
					IntType key = gmlGlobal::keyboard_lastkey;
					keyboard_clear(gmlGlobal::keyboard_lastkey);
					if (key != vk_control && key != vk_lcontrol && key != vk_rcontrol && key != vk_shift && key != vk_lshift && key != vk_rshift && key != vk_alt && key != vk_lalt && key != vk_ralt)
					{
						global::keybind_edit[e_keybind_key_CHAR] = key;
						update = true;
					}
				}
			}
			if (sBool(mouse_left_pressed))
			{
				update = true;
				app_mouse_clear(self);
			}
			if (update)
			{
				sVar(window_busy) = /*""*/ STR(0);
				if (!array_equals(VarType::CreateRef(global::keybind_edit), VarType::CreateRef(keybind_new(null_))))
					keybind_set(self, keybindID, global::keybind_edit);
			}
		}
		tab_next(self, false);
		return 0.0;
	}
	
	RealType draw_label(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType str, xx, yy, halign, valign, color, alpha, font, seperation, width;
		IntType oldcolor;
		RealType oldalpha;
		RealType strwid, strhei;
		VarType strx, stry;
		str = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		strx = xx;
		stry = yy;
		seperation = -IntType(1);
		width = -IntType(1);
		if (argument_count <= IntType(7))
		{
			strwid = string_width(str);
			strhei = string_height(str);
			if (xx + strwid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + strhei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
				return IntType(0);
		}
		if (argument_count > IntType(3))
		{
			halign = argument[IntType(3)];
			valign = argument[IntType(4)];
			draw_set_halign((IntType)(halign));
			draw_set_valign((IntType)(valign));
			if (argument_count <= IntType(7))
			{
				if (halign == fa_right)
					strx = xx - strwid;
				else
					if (halign == fa_center)
						strx = xx - strwid / 2.0;
				
				if (valign == fa_middle)
					stry = yy - strhei / 2.0;
				else
					if (valign == fa_bottom)
						stry = yy - strhei;
				
				if (strx + strwid < IntType(0) || strx > sVar(content_x) + sVar(content_width) || stry + strhei < IntType(0) || stry > sVar(content_y) + sVar(content_height))
				{
					draw_set_halign(fa_left);
					draw_set_valign(fa_top);
					return IntType(0);
				}
			}
			if (argument_count > IntType(5))
			{
				color = argument[IntType(5)];
				alpha = argument[IntType(6)];
				if (color != null_)
				{
					oldcolor = draw_get_color();
					draw_set_color((IntType)(color));
				}
				if (alpha < IntType(1))
				{
					oldalpha = draw_get_alpha();
					draw_set_alpha(oldalpha * alpha);
				}
				if (argument_count > IntType(7))
				{
					font = argument[IntType(7)];
					draw_set_font((IntType)(font));
					strwid = string_width(str);
					strhei = string_height(str);
					if (halign == fa_right)
						strx = xx - strwid;
					else
						if (halign == fa_center)
							strx = xx - strwid / 2.0;
					
					if (valign == fa_middle)
						stry = yy - strhei / 2.0;
					else
						if (valign == fa_bottom)
							stry = yy - strhei;
					
					if (strx + strwid < IntType(0) || strx > sVar(content_x) + sVar(content_width) || stry + strhei < IntType(0) || stry > sVar(content_y) + sVar(content_height))
					{
						draw_set_halign(fa_left);
						draw_set_valign(fa_top);
						if (color != null_)
							draw_set_color(oldcolor);
						if (alpha < IntType(1))
							draw_set_alpha(oldalpha);
						return IntType(0);
					}
					if (argument_count > IntType(8))
					{
						seperation = argument[IntType(8)];
						width = argument[IntType(9)];
					}
				}
			}
		}
		if (seperation == -IntType(1) && width == -IntType(1))
			draw_text((IntType)(xx), (IntType)(yy), str);
		else
			draw_text_ext((IntType)(xx), (IntType)(yy), str, (IntType)(seperation), (IntType)(width));
		
		if (argument_count > IntType(3))
		{
			draw_set_halign(fa_left);
			draw_set_valign(fa_top);
			if (argument_count > IntType(5))
			{
				if (color != null_)
					draw_set_color(oldcolor);
				if (alpha < IntType(1))
					draw_set_alpha(oldalpha);
			}
		}
		return 0.0;
	}
	
	void draw_label_value(ScopeAny self, VarType xx, VarType yy, VarType w, RealType h, VarType caption, VarType value, BoolType vertical)
	{
		IntType capwid;
		VarType valuex;
		if (!vertical)
			caption = caption + /*": "*/ STR(1058);
		draw_set_font(sInt(font_label));
		caption = string_limit(caption, w);
		capwid = string_width(caption);
		valuex = xx + capwid;
		if (vertical)
			draw_label(self, { caption, xx, yy + IntType(18), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
		else
			draw_label(self, { caption, xx, yy + h / 2.0, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		
		draw_set_font(sInt(font_value));
		if (vertical)
		{
			value = string_limit(value, w);
			draw_label(self, { value, xx, yy + IntType(36), fa_left, fa_bottom, global::c_text_main, global::a_text_main });
		}
		else
		{
			value = string_limit(value, (xx + w) - valuex);
			draw_label(self, { value, xx + capwid, yy + h / 2.0, fa_left, fa_middle, global::c_text_main, global::a_text_main });
		}
		
	}
	
	void draw_line_ext(VarType x1, VarType y1, VarType x2, VarType y2, VarType color, RealType alpha)
	{
		alpha = alpha * draw_get_alpha();
		draw_primitive_begin(pr_linelist);
		draw_vertex_color((IntType)(x1), (IntType)(y1), (IntType)(color), alpha);
		draw_vertex_color((IntType)(x2), (IntType)(y2), (IntType)(color), alpha);
		draw_primitive_end();
	}
	
	void draw_loading_bar(ScopeAny self, VarType xx, VarType yy, VarType wid, RealType hei, RealType perc, VarType text, VarType hinttext)
	{
		yy += IntType(8);
		draw_label(self, { text, xx, yy, fa_left, fa_center, global::c_text_main, global::a_text_main, sInt(font_value) });
		draw_label(self, { hinttext, xx + wid, yy, fa_right, fa_center, global::c_text_secondary, global::a_text_secondary, sInt(font_value) });
		yy += IntType(16);
		draw_box(xx, yy, wid, hei, false, global::c_border, global::a_border);
		draw_box(xx, yy, wid * perc, hei, false, global::c_accent, IntType(1));
	}
	
	RealType draw_meter(ScopeAny self, StringType name, VarType xx, VarType yy, VarType wid, VarType value, RealType minval, RealType maxval, RealType def, RealType snapval, VarType tbx, IntType script, StringType tip)
	{
		RealType hei, thumbhei, trackwid;
		VarType linex, linewid, trackx, dragval, dragx, dragy, inputfocus;
		BoolType mouseon, slidermouseon, locked;
		thumbhei = IntType(20);
		hei = (thumbhei + IntType(24));
		locked = (minval == maxval);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		mouseon = app_mouse_box(self, xx, yy, wid, hei) && sBool(content_mouseon);
		slidermouseon = app_mouse_box(self, xx, yy + IntType(24), wid, thumbhei) && sBool(content_mouseon);
		microani_set(name, script, false, false, false);
		RealType compact = (global::_app->panel_compact > 0 || sReal(window_compact) > 0);
		RealType draggerwid = ((compact > 0) ? dragger_width : IntType(80));
		draw_dragger(self, name + /*"input"*/ STR(1102), (xx + wid - draggerwid) + ((IntType)!(compact > 0) * IntType(6)), yy, draggerwid, value, snapval * .1, minval, maxval, def, snapval, tbx, script, null_, false);
		inputfocus = global::microani_arr.Value(e_microani_ACTIVE);
		if (sVar(window_busy) == name || (sVar(window_busy) != name + /*"inputpress"*/ STR(1103) && sVar(window_focus) != string(tbx)))
			ObjType(obj_textbox, tbx)->text = string_decimals(value);
		microani_set(name, script, (sVar(window_busy) == name) || slidermouseon, slidermouseon && sBool(mouse_left), false, false, IntType(1), false);
		microani_update({ slidermouseon, slidermouseon && sBool(mouse_left), sVar(window_busy) == name, locked, mouseon || (sVar(window_busy) == name + /*"inputpress"*/ STR(1103) || sVar(window_focus) == string(tbx)) });
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), max({ inputfocus, global::microani_arr.Value(e_microani_ACTIVE) }));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, max({ inputfocus, global::microani_arr.Value(e_microani_ACTIVE) }));
		draw_set_font(sInt(font_label));
		VarType labelshort = string_limit(text_get({ name }), sVar(dw) - draggerwid);
		draw_label(self, { labelshort, xx, yy + sReal(ui_small_height) / 2.0, fa_left, fa_middle, labelcolor, labelalpha });
		if (string_width(labelshort) < sVar(dw))
			draw_help_circle(self, tip, xx + string_width(labelshort) + IntType(4), yy + IntType(2), false);
		if (compact > 0)
			return IntType(0);
		yy += IntType(24);
		linex = xx;
		linewid = wid;
		trackx = linex + IntType(6);
		trackwid = linewid - IntType(12);
		context_menu_area(self, { linex, yy, linewid, thumbhei, /*"contextmenuvalue"*/ STR(1087), value, e_context_type_NUMBER, script, def });
		if (slidermouseon)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed))
			{
				sVar(window_busy) = name;
				sVar(window_focus) = name;
				sVar(meter_drag_value) = value;
			}
		}
		if (sVar(window_busy) == name)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (global::_app->setting_unlimited_values > 0)
				sVar(meter_drag_value) = (minval + (gmlGlobal::mouse_x - linex) * (max({ IntType(1), (maxval - minval) }) / linewid));
			else
				sVar(meter_drag_value) = clamp(minval + (gmlGlobal::mouse_x - linex) * (max({ IntType(1), (maxval - minval) }) / linewid), minval, maxval);
			
			RealType d = snap(sVar(meter_drag_value), snapval) - value;
			if (d != IntType(0))
				script_execute(self, { script, d, true });
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		dragval = (sVar(window_busy) == name ? sVar(meter_drag_value) : value);
		if (locked)
			dragx = .5 * linewid;
		else
			dragx = floor(percent(dragval, minval, maxval) * trackwid);
		
		dragy = yy + thumbhei / 2.0;
		VarType pos = trackx + dragx - IntType(6);
		RealType markers = floor((maxval - minval) / snapval);
		if (markers <= IntType(64) && !locked)
		{
			if (((RealType)linewid / markers) > IntType(20))
			{
				for (RealType i = IntType(0); i < markers + IntType(1); i++)
					draw_line_ext(linex + (linewid * (i / markers)), dragy - IntType(6), linex + (linewid * (i / markers)), dragy + IntType(6), global::c_border, global::a_border);
			}
			dragx = snap(floor(percent(dragval, minval, maxval) * linewid), ((RealType)linewid / markers));
			pos = clamp(trackx + dragx - IntType(6), trackx, trackx + trackwid) - IntType(6);
		}
		IntType color;
		RealType alpha;
		color = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), max({ global::microani_arr.Value(e_microani_HOVER), global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		color = merge_color(color, (IntType)(global::c_border), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(global::a_text_tertiary, global::a_text_secondary, max({ global::microani_arr.Value(e_microani_HOVER), global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		alpha = lerp(alpha, global::a_border, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(linex + (pos - linex), dragy - IntType(1), linewid - (pos - linex), IntType(2), false, color, alpha);
		color = merge_color((IntType)(global::c_accent), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = merge_color((IntType)(global::a_accent), (IntType)(global::a_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		draw_box(linex, dragy - IntType(1), pos - linex, IntType(2), false, color, alpha);
		color = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		color = merge_color(color, global::c_accent_pressed, max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		color = merge_color(color, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(pos, dragy - IntType(10), IntType(12), IntType(20), false, global::c_level_middle, IntType(1));
		draw_box(pos, dragy - IntType(10), IntType(12), IntType(20), false, color, alpha);
		draw_box_bevel({ pos, dragy - IntType(10), IntType(12), IntType(20), IntType(1) });
		draw_box_hover({ pos, dragy - IntType(10), IntType(12), IntType(20), global::microani_arr.Value(e_microani_ACTIVE) });
		return 0.0;
	}
	
	RealType draw_meter_range(ScopeAny self, StringType name, VarType xx, VarType yy, RealType wid, RealType minrange, RealType maxrange, RealType snapval, VarType minval, VarType maxval, RealType mindef, RealType maxdef, IntType mintbx, IntType maxtbx, IntType minscript, IntType maxscript)
	{
		RealType thumbhei, hei, linewid, trackwid;
		BoolType mouseon, slidermouseon, minmouseon, maxmouseon;
		VarType textfocus, linex, trackx, thumby, minthumbpos, maxthumbpos;
		thumbhei = IntType(20);
		hei = (thumbhei + IntType(24));
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		mouseon = app_mouse_box(self, xx, yy, wid, hei) && sBool(content_mouseon);
		slidermouseon = app_mouse_box(self, xx, yy + IntType(24), wid, thumbhei) && sBool(content_mouseon);
		microani_set(name, null_, false, false, false);
		textfield_group_add(self, { name + /*"mininput"*/ STR(1104), minval, mindef, minscript, X_, mintbx, null_, 0.1, minrange, min({ maxval, maxrange }) });
		textfield_group_add(self, { name + /*"maxinput"*/ STR(1105), maxval, maxdef, maxscript, X_, maxtbx, null_, 0.1, max({ minval, minrange }), maxrange });
		draw_textfield_group(self, name, (xx + wid - IntType(128)) + IntType(8), yy, IntType(128), IntType(0), null_, null_, snapval, false, false, IntType(0), true);
		textfocus = global::microani_arr.Value(e_microani_CUSTOM);
		microani_set(name, null_, sVar(window_busy) == name + /*"min"*/ STR(1106) || sVar(window_busy) == name + /*"max"*/ STR(1107) || slidermouseon, slidermouseon && sBool(mouse_left), false, false, IntType(1), false);
		microani_update({ sVar(window_busy) == name + /*"min"*/ STR(1106) || sVar(window_busy) == name + /*"max"*/ STR(1107) || slidermouseon, slidermouseon && sBool(mouse_left), sVar(window_busy) == name + /*"min"*/ STR(1106) || sVar(window_busy) == name + /*"max"*/ STR(1107), false, mouseon || textfocus > 0 });
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), max({ textfocus, global::microani_arr.Value(e_microani_ACTIVE) }));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, max({ textfocus, global::microani_arr.Value(e_microani_ACTIVE) }));
		draw_set_font(sInt(font_label));
		draw_label(self, { string_limit(text_get({ name }), wid - IntType(128)), xx, yy + (sReal(ui_small_height) / 2.0), fa_left, fa_middle, labelcolor, labelalpha });
		if (sReal(window_compact) > 0 || global::_app->panel_compact > 0)
			return IntType(0);
		yy += IntType(24);
		linex = xx;
		linewid = wid;
		trackx = linex + IntType(6);
		trackwid = linewid - IntType(12);
		thumby = yy + thumbhei / 2.0;
		minthumbpos = (sVar(window_busy) == name + /*"min"*/ STR(1106) ? sVar(meter_drag_value) : minval);
		minthumbpos = trackx + floor(percent(minthumbpos, minrange, maxrange) * trackwid) - IntType(6);
		maxthumbpos = (sVar(window_busy) == name + /*"max"*/ STR(1107) ? sVar(meter_drag_value) : maxval);
		maxthumbpos = trackx + floor(percent(maxthumbpos, minrange, maxrange) * trackwid) - IntType(6);
		minmouseon = app_mouse_box(self, minthumbpos, thumby - IntType(10), IntType(12), IntType(20)) && sBool(content_mouseon);
		maxmouseon = app_mouse_box(self, maxthumbpos, thumby - IntType(10), IntType(12), IntType(20)) && sBool(content_mouseon);
		if (slidermouseon && sVar(window_busy) == /*""*/ STR(0))
		{
			if (minmouseon || maxmouseon)
				sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left_pressed))
			{
				if (minmouseon)
				{
					sVar(window_busy) = name + /*"min"*/ STR(1106);
					sVar(meter_drag_value) = minval;
				}
				else
					if (maxmouseon)
					{
						sVar(window_busy) = name + /*"max"*/ STR(1107);
						sVar(meter_drag_value) = maxval;
					}
				
				sVar(window_focus) = name;
			}
			if (sBool(mouse_right_pressed))
			{
				script_execute(self, { minscript, mindef, false });
				script_execute(self, { maxscript, maxdef, false });
			}
		}
		if (sVar(window_busy) == name + /*"min"*/ STR(1106) || sVar(window_busy) == name + /*"max"*/ STR(1107))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (global::_app->setting_unlimited_values > 0)
				sVar(meter_drag_value) = minrange + (gmlGlobal::mouse_x - linex) * (max({ IntType(1), (maxrange - minrange) }) / linewid);
			else
				sVar(meter_drag_value) = clamp(minrange + (gmlGlobal::mouse_x - linex) * (max({ IntType(1), (maxrange - minrange) }) / linewid), minrange, maxrange);
			
			if (sVar(window_busy) == name + /*"min"*/ STR(1106))
			{
				RealType d = min({ snap(sVar(meter_drag_value), snapval), maxval }) - minval;
				if (d != IntType(0))
					script_execute(self, { minscript, d, true });
			}
			else
			{
				RealType d = max({ snap(sVar(meter_drag_value), snapval), minval }) - maxval;
				if (d != IntType(0))
					script_execute(self, { maxscript, d, true });
			}
			
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (sVar(window_busy) == name + /*"min"*/ STR(1106))
			minthumbpos = min({ minthumbpos, maxthumbpos });
		if (sVar(window_busy) == name + /*"max"*/ STR(1107))
			maxthumbpos = max({ minthumbpos, maxthumbpos });
		IntType color;
		RealType alpha;
		color = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), max({ global::microani_arr.Value(e_microani_HOVER), global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		color = merge_color(color, (IntType)(global::c_border), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(global::a_text_tertiary, global::a_text_secondary, max({ global::microani_arr.Value(e_microani_HOVER), global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		alpha = lerp(alpha, global::a_border, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(linex, thumby - IntType(1), minthumbpos - linex, IntType(2), false, color, alpha);
		draw_box(maxthumbpos, thumby - IntType(1), (linex + linewid) - maxthumbpos, IntType(2), false, color, alpha);
		color = merge_color((IntType)(global::c_accent), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = merge_color((IntType)(global::a_accent), (IntType)(global::a_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		draw_box(minthumbpos, thumby - IntType(1), maxthumbpos - minthumbpos, IntType(2), false, color, alpha);
		microani_set(name + /*"min"*/ STR(1106), minscript, (sVar(window_busy) == name + /*"min"*/ STR(1106)) || minmouseon, minmouseon && sBool(mouse_left), false);
		microani_update({ (sVar(window_busy) == name + /*"min"*/ STR(1106)) || minmouseon, minmouseon && sBool(mouse_left), false });
		color = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		color = merge_color(color, global::c_accent_pressed, max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		color = merge_color(color, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(minthumbpos, thumby - IntType(10), IntType(12), IntType(20), false, global::c_level_middle, IntType(1));
		draw_box(minthumbpos, thumby - IntType(10), IntType(12), IntType(20), false, color, alpha);
		draw_box_bevel({ minthumbpos, thumby - IntType(10), IntType(12), IntType(20), IntType(1) });
		draw_box_hover({ minthumbpos, thumby - IntType(10), IntType(12), IntType(20), global::microani_arr.Value(e_microani_ACTIVE) });
		microani_set(name + /*"max"*/ STR(1107), maxscript, (sVar(window_busy) == name + /*"max"*/ STR(1107)) || maxmouseon, maxmouseon && sBool(mouse_left), false);
		microani_update({ (sVar(window_busy) == name + /*"max"*/ STR(1107)) || maxmouseon, maxmouseon && sBool(mouse_left), false });
		color = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		color = merge_color(color, global::c_accent_pressed, max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) }));
		color = merge_color(color, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(maxthumbpos, thumby - IntType(10), IntType(12), IntType(20), false, global::c_level_middle, IntType(1));
		draw_box(maxthumbpos, thumby - IntType(10), IntType(12), IntType(20), false, color, alpha);
		draw_box_bevel({ maxthumbpos, thumby - IntType(10), IntType(12), IntType(20), IntType(1) });
		draw_box_hover({ maxthumbpos, thumby - IntType(10), IntType(12), IntType(20), global::microani_arr.Value(e_microani_ACTIVE) });
		return 0.0;
	}
	
	void draw_missing(RealType xx, RealType yy, VarType w, VarType h)
	{
		draw_box(xx, yy, w, h, false, c_fuchsia, IntType(1));
		draw_box(xx + (RealType)w / 2.0, yy, (RealType)w / 2.0, (RealType)h / 2.0, false, c_black, IntType(1));
		draw_box(xx, yy + (RealType)h / 2.0, (RealType)w / 2.0, (RealType)h / 2.0, false, c_black, IntType(1));
	}
	
	RealType draw_outline(VarType xx, VarType yy, VarType ww, VarType hh, RealType size, VarType incolor, VarType inalpha, RealType inline_)
	{
		VarType color;
		RealType alpha;
		color = draw_get_color();
		alpha = draw_get_alpha();
		if (!is_undefined(incolor))
		{
			color = incolor;
			alpha *= inalpha;
			if (alpha == IntType(0))
				return IntType(0);
		}
		if (inline_ > 0)
		{
			xx += size;
			yy += size;
			ww -= size * IntType(2);
			hh -= size * IntType(2);
		}
		draw_box(xx - size, yy - size, ww + (size * IntType(2)), size, false, color, alpha);
		draw_box(xx - size, yy + hh, ww + (size * IntType(2)), size, false, color, alpha);
		draw_box(xx - size, yy, size, hh, false, color, alpha);
		draw_box(xx + ww, yy, size, hh, false, color, alpha);
		return 0.0;
	}
	
	void draw_pattern(IntType xx, RealType yy, RealType w, RealType h)
	{
		RealType ypos;
		IntType pattern;
		pattern = (global::_app->setting_theme == global::theme_light ? IntType(0) : IntType(1));
		ypos = yy;
		while (ypos < yy + h)
		{
			draw_sprite_ext(ID_spr_pattern_left, pattern, xx, (IntType)(ypos), 80.0, 80.0, 0.0, c_white, 1.0);
			ypos += (sprite_get_height(ID_spr_pattern_left) * IntType(80));
		}
		
		ypos = yy;
		while (ypos < yy + h)
		{
			draw_sprite_ext(ID_spr_pattern_right, pattern, xx + w, (IntType)(ypos), 80.0, 80.0, 0.0, c_white, 1.0);
			ypos += (sprite_get_height(ID_spr_pattern_right) * IntType(80));
		}
		
	}
	
	BoolType draw_radiobutton(ScopeAny self, StringType name, VarType xx, VarType yy, IntType value, BoolType active, IntType script)
	{
		VarType text;
		RealType w, h;
		BoolType pressed;
		text = text_get({ name });
		draw_set_font(sInt(font_label));
		w = sReal(ui_small_height) + string_width(name);
		h = sReal(ui_small_height);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0));
		mouseclick = mouseon && sBool(mouse_left);
		pressed = false;
		if (mouseon)
		{
			if (sBool(mouse_left) || sBool(mouse_left_released))
				pressed = true;
			sInt(mouse_cursor) = cr_handpoint;
		}
		microani_set(name, script, mouseon, mouseclick, active);
		VarType buttonx, buttony;
		buttonx = xx + IntType(10);
		buttony = (yy + (sReal(ui_small_height) / 2.0));
		IntType buttoncolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		buttoncolor = merge_color(buttoncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		RealType buttonalpha = lerp(global::a_text_secondary, 1.0, global::microani_arr.Value(e_microani_PRESS));
		buttonalpha = lerp(buttonalpha, 1.0, global::microani_arr.Value(e_microani_ACTIVE));
		draw_image({ ID_spr_radiobutton, IntType(0), buttonx, buttony, IntType(1), IntType(1), buttoncolor, buttonalpha * (IntType(1) - global::microani_arr.Value(e_microani_ACTIVE)) * (IntType(1) - global::microani_arr.Value(e_microani_HOVER)) });
		draw_image({ ID_spr_radiobutton, IntType(1), buttonx, buttony, IntType(1), IntType(1), buttoncolor, buttonalpha * (IntType(1) - global::microani_arr.Value(e_microani_ACTIVE)) * (global::microani_arr.Value(e_microani_HOVER)) });
		draw_image({ ID_spr_radiobutton, IntType(2), buttonx, buttony, IntType(1), IntType(1), buttoncolor, buttonalpha * global::microani_arr.Value(e_microani_ACTIVE) * (IntType(1) - global::microani_arr.Value(e_microani_RADIO_HOVER)) });
		draw_image({ ID_spr_radiobutton_hover, IntType(0), buttonx, buttony, IntType(1), IntType(1), global::c_accent_hover, global::a_accent_hover * global::microani_arr.Value(e_microani_HOVER) });
		draw_label(self, { text, xx + IntType(28), yy + h / 2.0, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_value) });
		microani_update({ mouseon, mouseclick, active });
		if (pressed && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script, value });
			return true;
		}
		return false;
	}
	
	RealType draw_recent(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, wid, hei, mode, recenty;
		BoolType mouseon;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		wid = argument[IntType(2)];
		hei = argument[IntType(3)];
		mode = sStr(recent_display_mode);
		if (argument_count > IntType(4))
			mode = argument[IntType(4)];
		recenty = yy;
		if (mode == /*"simple"*/ STR(1108))
		{
			draw_set_font(sInt(font_value));
			for (IntType i = IntType(0); i < sReal(recent_list_amount); i++)
			{
				BoolType hover = app_mouse_box(self, xx, recenty, wid, IntType(44)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
				BoolType mouseon = hover;
				VarType item = DsList(sInt(recent_list)).Value(i);
				VarType iconx = xx + wid - IntType(8);
				iconx -= 24.0;
				if (hover)
				{
					if (draw_button_icon(self, { /*"recentdelete"*/ STR(1109) + string(item), iconx, recenty + IntType(8), IntType(24), IntType(24), false, icons_DELETE, null_, false, /*"tooltipremove"*/ STR(1110) }))
						action_recent_remove(item);
					mouseon = mouseon && !app_mouse_box(self, iconx, recenty + IntType(8), IntType(24), IntType(24));
				}
				iconx -= 24.0;
				draw_label(self, { string_limit(filename_name(idVar(item, name)), (iconx - xx) - IntType(12)), xx + IntType(12), recenty + IntType(22), fa_left, fa_middle, global::c_text_main, global::a_text_main });
				draw_box(xx + IntType(4), recenty + IntType(43), wid - IntType(8), IntType(1), false, global::c_overlay, global::a_overlay);
				microani_set(/*"recent"*/ STR(1111) + string(item), null_, mouseon, mouseon && sBool(mouse_left), false);
				draw_box(xx, recenty, wid, IntType(44), false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_HOVER));
				draw_box_hover({ xx, recenty, wid, IntType(44), global::microani_arr.Value(e_microani_HOVER) });
				draw_box(xx, recenty, wid, IntType(44), false, global::c_accent_overlay, global::a_accent_overlay * global::microani_arr.Value(e_microani_PRESS));
				microani_update({ mouseon, mouseon && sBool(mouse_left), false });
				if (mouseon)
				{
					sInt(mouse_cursor) = cr_handpoint;
					if (sBool(mouse_left_released))
					{
						if (file_exists_lib(idVar(item, filename)))
						{
							project_load(self, { idVar(item, filename) });
							sStr(window_state) = /*""*/ STR(0);
							return IntType(0);
						}
						else
							error(/*"erroropenprojectexists"*/ STR(73));
						
					}
				}
				recenty += IntType(44);
				if (recenty + IntType(44) > yy + hei)
					break;
			}
		}
		if (mode == /*"list"*/ STR(1112))
		{
			draw_set_font(sInt(font_label));
			VarType liststart = IntType(0);
			if ((sReal(recent_list_amount) * IntType(44)) > hei - IntType(28))
			{
				sStr(window_scroll_focus) = string(sInt(recent_scrollbar));
				scrollbar_draw(self, sInt(recent_scrollbar), e_scroll_VERTICAL, xx + wid - IntType(12), yy + IntType(28), hei - IntType(28), sReal(recent_list_amount) * IntType(44));
				liststart = snap((RealType)ObjType(obj_scrollbar, sInt(recent_scrollbar))->value / 44.0, IntType(1));
				wid -= 12.0;
			}
			if (hei < IntType(28))
				return IntType(0);
			RealType namewidth, timewidth;
			VarType namex, timex;
			namewidth = (wid - (IntType(12) * IntType(3))) / 2.0;
			timewidth = (wid - (IntType(12) * IntType(3))) / 2.0;
			namex = xx + IntType(12);
			timex = xx + IntType(12) + namewidth + IntType(12);
			draw_label(self, { text_get({ /*"recentfilename"*/ STR(1113) }), namex, recenty + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			draw_label(self, { text_get({ /*"recentlastopened"*/ STR(1114) }), timex, recenty + IntType(14), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
			recenty += IntType(28);
			draw_set_font(sInt(font_value));
			for (VarType i = liststart; i < sReal(recent_list_amount); i++)
			{
				BoolType hover = app_mouse_box(self, xx, recenty, wid, IntType(44)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
				mouseon = hover;
				VarType item = DsList(sInt(recent_list_display)).Value(i);
				draw_label(self, { string_limit(filename_name(idVar(item, name)), namewidth), xx + IntType(12), recenty + IntType(22), fa_left, fa_middle, global::c_text_main, global::a_text_main });
				draw_label(self, { string_limit(recent_time_string(idVar(item, last_opened)), timewidth), timex, recenty + IntType(22), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
				VarType iconx = xx + wid - IntType(8);
				iconx -= 24.0;
				if (hover)
				{
					if (draw_button_icon(self, { /*"recentdelete"*/ STR(1109) + string(item), iconx, recenty + IntType(8), IntType(24), IntType(24), false, icons_DELETE, null_, false, /*"tooltipremove"*/ STR(1110) }))
						action_recent_remove(item);
					mouseon = mouseon && !app_mouse_box(self, iconx, recenty + IntType(8), IntType(24), IntType(24));
				}
				iconx -= 24.0;
				if (hover || idVar(item, pinned) > 0)
				{
					if (draw_button_icon(self, { /*"recentpin"*/ STR(1115) + string(item), iconx, recenty + IntType(8), IntType(24), IntType(24), idVar(item, pinned), icons_PIN, null_, false, /*"tooltippin"*/ STR(1116) }))
						action_recent_pin(item);
					mouseon = mouseon && !app_mouse_box(self, iconx, recenty + IntType(8), IntType(24), IntType(24));
				}
				draw_box(xx + IntType(4), recenty + IntType(43), wid - IntType(8), IntType(1), false, global::c_overlay, global::a_overlay);
				microani_set(/*"recent"*/ STR(1111) + string(item), null_, mouseon, mouseon && sBool(mouse_left), false);
				draw_box(xx, recenty, wid, IntType(44), false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_HOVER));
				draw_box_hover({ xx, recenty, wid, IntType(44), global::microani_arr.Value(e_microani_HOVER) });
				draw_box(xx, recenty, wid, IntType(44), false, global::c_accent_overlay, global::a_accent_overlay * global::microani_arr.Value(e_microani_PRESS));
				microani_update({ mouseon, mouseon && sBool(mouse_left), false });
				if (mouseon)
				{
					sInt(mouse_cursor) = cr_handpoint;
					if (sBool(mouse_left_released))
					{
						if (file_exists_lib(idVar(item, filename)))
						{
							project_load(self, { idVar(item, filename) });
							sStr(window_state) = /*""*/ STR(0);
							return IntType(0);
						}
						else
							error(/*"erroropenprojectexists"*/ STR(73));
						
					}
				}
				recenty += IntType(44);
				if (recenty + IntType(44) > yy + hei)
					break;
			}
		}
		if (mode == /*"grid"*/ STR(652))
		{
			VarType liststart = IntType(0);
			if ((sReal(recent_list_amount) * IntType(256)) > hei)
			{
				sStr(window_scroll_focus) = string(sInt(recent_scrollbar));
				scrollbar_draw(self, sInt(recent_scrollbar), e_scroll_VERTICAL, xx + wid + IntType(12), yy, hei, ceil(sReal(recent_list_amount) / 4.0) * IntType(256));
				liststart = ObjType(obj_scrollbar, sInt(recent_scrollbar))->value;
			}
			VarType cardx, item;
			RealType cardy;
			BoolType areamouseon, hover, mouseon;
			cardx = sVar(dx);
			cardy = sVar(dy) - liststart;
			areamouseon = app_mouse_box(self, xx, yy, wid, hei);
			clip_begin(xx - IntType(2), yy - IntType(1), wid + IntType(4), hei + IntType(2));
			for (IntType i = IntType(0); i < sReal(recent_list_amount); i++)
			{
				if (cardy < yy + hei || cardy + IntType(240) + IntType(16) > yy)
				{
					item = DsList(sInt(recent_list_display)).Value(i);
					hover = areamouseon && app_mouse_box(self, cardx, cardy, IntType(240), IntType(240)) && !sBool(popup_mouseon) && !sBool(toast_mouseon) && !sBool(context_menu_mouseon);
					mouseon = hover;
					microani_set(/*"recent"*/ STR(1111) + string(item), null_, mouseon, mouseon && sBool(mouse_left), false);
					draw_box(cardx, cardy, IntType(240), IntType(240), false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_HOVER));
					draw_box_hover({ cardx, cardy, IntType(240), IntType(240), global::microani_arr.Value(e_microani_HOVER) });
					draw_box(cardx, cardy, IntType(240), IntType(240), false, global::c_accent_overlay, global::a_accent_overlay * global::microani_arr.Value(e_microani_PRESS));
					draw_outline(cardx, cardy, IntType(240), IntType(240), IntType(1), (idVar(item, pinned) > 0) ? global::c_accent : global::c_border, (idVar(item, pinned) > 0) ? 1.0 : global::a_border);
					if (idVar(item, thumbnail) != null_)
						draw_sprite((IntType)(idVar(item, thumbnail)), IntType(0), (IntType)(cardx), (IntType)(cardy));
					else
						draw_sprite(ID_spr_missing_thumbnail, IntType(0), (IntType)(cardx), (IntType)(cardy));
					
					RealType iconwid;
					VarType iconx;
					iconwid = IntType(4) + ((IntType)(hover || idVar(item, pinned) > 0) * IntType(28)) + ((IntType)hover * IntType(28));
					iconx = cardx + IntType(240) - IntType(12) - IntType(24);
					mouseon = mouseon && !app_mouse_box(self, cardx + IntType(240) - iconwid - IntType(8), cardy + IntType(8), iconwid, IntType(32));
					if (hover || idVar(item, pinned) > 0)
					{
						draw_box(cardx + IntType(240) - iconwid - IntType(8), cardy + IntType(8), iconwid, IntType(32), false, global::c_level_middle, IntType(1));
						draw_outline(cardx + IntType(240) - iconwid - IntType(8), cardy + IntType(8), iconwid, IntType(32), IntType(1), global::c_border, global::a_border, true);
					}
					if (hover || idVar(item, pinned) > 0)
					{
						if (draw_button_icon(self, { /*"recentpin"*/ STR(1115) + string(item), iconx, cardy + IntType(12), IntType(24), IntType(24), idVar(item, pinned), icons_PIN, null_, false, /*"tooltippin"*/ STR(1116), null_ }))
							action_recent_pin(item);
					}
					iconx -= 28.0;
					if (hover)
					{
						if (draw_button_icon(self, { /*"recentdelete"*/ STR(1109), iconx, cardy + IntType(12), IntType(24), IntType(24), false, icons_DELETE, null_, false, /*"tooltipremove"*/ STR(1110), null_ }))
							action_recent_remove(item);
					}
					microani_set(/*"recent"*/ STR(1111) + string(item), null_, mouseon, mouseon && sBool(mouse_left), false);
					microani_update({ hover, hover && sBool(mouse_left), false });
					draw_set_font(sInt(font_value));
					draw_label(self, { string_limit(idVar(item, name), IntType(210)), cardx + IntType(15), cardy + IntType(209), fa_left, fa_bottom, global::c_text_main, global::a_text_main });
					draw_label(self, { recent_time_string(idVar(item, last_opened)), cardx + IntType(15), cardy + IntType(228), fa_left, fa_bottom, global::c_text_secondary, global::a_text_secondary });
					if (mouseon)
					{
						sInt(mouse_cursor) = cr_handpoint;
						if (sBool(mouse_left_released))
						{
							if (file_exists_lib(idVar(item, filename)))
							{
								project_load(self, { idVar(item, filename) });
								sStr(window_state) = /*""*/ STR(0);
								return IntType(0);
							}
							else
								error(/*"erroropenprojectexists"*/ STR(73));
							
						}
					}
				}
				cardx += IntType(240) + IntType(16);
				if (cardx > (xx + wid))
				{
					cardx = sVar(dx);
					cardy += IntType(240) + IntType(16);
				}
			}
			clip_end();
			RealType gradalpha = .25 * percent(liststart, IntType(0), IntType(25));
			draw_gradient(xx, yy - IntType(1), wid, IntType(16), c_black, gradalpha, gradalpha, IntType(0), IntType(0));
		}
		if (sBool(recent_list_update))
		{
			recent_update(self);
			sBool(recent_list_update) = false;
		}
		return 0.0;
	}
	
}
