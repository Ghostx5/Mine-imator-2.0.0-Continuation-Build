/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.16 19:54:52 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	RealType block_set_redstone_wire(ScopeAny self)
	{
		VarType pow;
		RealType powreal, red;
		pow = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"power"*/ STR(949));
		powreal = (RealType)string_get_real(pow) / 15.0;
		if (powreal == IntType(0))
			red = 0.3;
		else
			red = 0.6 * powreal + 0.4;
		
		sInt(block_color) = make_color_rgb((IntType)(red * IntType(255)), IntType(0), IntType(0));
		sVar(block_vertex_emissive) = powreal;
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_total) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"none"*/ STR(914);
		west = /*"none"*/ STR(914);
		south = /*"none"*/ STR(914);
		north = /*"none"*/ STR(914);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(950))
					east = /*"side"*/ STR(951);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(952) || idVar(block, type) == /*"redstone_comparator"*/ STR(953))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(912));
						if (facing == /*"east"*/ STR(905) || facing == /*"west"*/ STR(906))
							east = /*"side"*/ STR(951);
					}
				
			}
			if (east == /*"none"*/ STR(914) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					east = /*"up"*/ STR(924);
			}
			if (east == /*"none"*/ STR(914) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					east = /*"side"*/ STR(951);
			}
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(950))
					west = /*"side"*/ STR(951);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(952) || idVar(block, type) == /*"redstone_comparator"*/ STR(953))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)), /*"facing"*/ STR(912));
						if (facing == /*"east"*/ STR(905) || facing == /*"west"*/ STR(906))
							west = /*"side"*/ STR(951);
					}
				
			}
			if (west == /*"none"*/ STR(914) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					west = /*"up"*/ STR(924);
			}
			if (west == /*"none"*/ STR(914) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
			{
				block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					west = /*"side"*/ STR(951);
			}
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(950))
					south = /*"side"*/ STR(951);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(952) || idVar(block, type) == /*"redstone_comparator"*/ STR(953))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(912));
						if (facing == /*"south"*/ STR(907) || facing == /*"north"*/ STR(908))
							south = /*"side"*/ STR(951);
					}
				
			}
			if (south == /*"none"*/ STR(914) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					south = /*"up"*/ STR(924);
			}
			if (south == /*"none"*/ STR(914) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					south = /*"side"*/ STR(951);
			}
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_)
			{
				if (block == sInt(block_current) || idVar(block, type) == /*"redstone_connect"*/ STR(950))
					north = /*"side"*/ STR(951);
				else
					if (idVar(block, type) == /*"redstone_repeater"*/ STR(952) || idVar(block, type) == /*"redstone_comparator"*/ STR(953))
					{
						VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)), /*"facing"*/ STR(912));
						if (facing == /*"south"*/ STR(907) || facing == /*"north"*/ STR(908))
							north = /*"side"*/ STR(951);
					}
				
			}
			if (north == /*"none"*/ STR(914) && !sBool(build_edge_zp) && !(sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1));
				if (block == sInt(block_current))
					north = /*"up"*/ STR(924);
			}
			if (north == /*"none"*/ STR(914) && !sBool(build_edge_zn) && !(sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
			{
				block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) - IntType(1));
				if (block == sInt(block_current))
					north = /*"side"*/ STR(951);
			}
		}
		if (east == /*"none"*/ STR(914) && west == /*"none"*/ STR(914) && south == /*"none"*/ STR(914) && north == /*"none"*/ STR(914))
		{
			east = /*"side"*/ STR(951);
			west = /*"side"*/ STR(951);
			south = /*"side"*/ STR(951);
			north = /*"side"*/ STR(951);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(905), east, /*"west"*/ STR(906), west, /*"south"*/ STR(907), south, /*"north"*/ STR(908), north, /*"power"*/ STR(949), pow }));
		return IntType(0);
	}
	
	RealType block_set_snowy(ScopeAny self)
	{
		if (block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(954)) == /*"true"*/ STR(783))
			return IntType(0);
		StringType snowy = /*"false"*/ STR(784);
		if (!sBool(build_edge_zp))
		{
			IntType otherblock = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (otherblock != null_ && idVar(otherblock, type) == /*"snow"*/ STR(955))
				snowy = /*"true"*/ STR(783);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"snowy"*/ STR(954), snowy);
		return IntType(0);
	}
	
	RealType block_set_stairs(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		StringType shape;
		VarType half, facing;
		shape = /*"straight"*/ STR(956);
		half = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"half"*/ STR(927));
		facing = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"facing"*/ STR(912));
		if (!sBool(build_edge_xp) && (facing == /*"east"*/ STR(905) || facing == /*"west"*/ STR(906)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(957))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(927)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(912));
					if (facing == /*"east"*/ STR(905))
					{
						if (otherfacing == /*"south"*/ STR(907))
							shape = /*"outer_right"*/ STR(958);
						else
							if (otherfacing == /*"north"*/ STR(908))
								shape = /*"outer_left"*/ STR(959);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(907))
							shape = /*"inner_left"*/ STR(960);
						else
							if (otherfacing == /*"north"*/ STR(908))
								shape = /*"inner_right"*/ STR(961);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_xn) && (facing == /*"east"*/ STR(905) || facing == /*"west"*/ STR(906)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(957))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(927)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(912));
					if (facing == /*"east"*/ STR(905))
					{
						if (otherfacing == /*"south"*/ STR(907))
							shape = /*"inner_right"*/ STR(961);
						else
							if (otherfacing == /*"north"*/ STR(908))
								shape = /*"inner_left"*/ STR(960);
						
					}
					else
					{
						if (otherfacing == /*"south"*/ STR(907))
							shape = /*"outer_left"*/ STR(959);
						else
							if (otherfacing == /*"north"*/ STR(908))
								shape = /*"outer_right"*/ STR(958);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yp) && (facing == /*"south"*/ STR(907) || facing == /*"north"*/ STR(908)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(957))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(927)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(912));
					if (facing == /*"south"*/ STR(907))
					{
						if (otherfacing == /*"east"*/ STR(905))
							shape = /*"outer_left"*/ STR(959);
						else
							if (otherfacing == /*"west"*/ STR(906))
								shape = /*"outer_right"*/ STR(958);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(905))
							shape = /*"inner_right"*/ STR(961);
						else
							if (otherfacing == /*"west"*/ STR(906))
								shape = /*"inner_left"*/ STR(960);
						
					}
					
				}
			}
		}
		if (!sBool(build_edge_yn) && (facing == /*"south"*/ STR(907) || facing == /*"north"*/ STR(908)))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && idVar(block, type) == /*"stairs"*/ STR(957))
			{
				IntType stateid = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
				if (block_get_state_id_value(block, stateid, /*"half"*/ STR(927)) == half)
				{
					VarType otherfacing = block_get_state_id_value(block, stateid, /*"facing"*/ STR(912));
					if (facing == /*"south"*/ STR(907))
					{
						if (otherfacing == /*"east"*/ STR(905))
							shape = /*"inner_left"*/ STR(960);
						else
							if (otherfacing == /*"west"*/ STR(906))
								shape = /*"inner_right"*/ STR(961);
						
					}
					else
					{
						if (otherfacing == /*"east"*/ STR(905))
							shape = /*"outer_right"*/ STR(958);
						else
							if (otherfacing == /*"west"*/ STR(906))
								shape = /*"outer_left"*/ STR(959);
						
					}
					
				}
			}
		}
		if (shape != /*"straight"*/ STR(956))
			sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"shape"*/ STR(529), shape);
		return IntType(0);
	}
	
	RealType block_set_state_id_value(IntType block, RealType stateid, StringType name, VarType val)
	{
		VarType state;
		if (block == null_ || ObjType(obj_block, block)->states_map == null_)
			return stateid;
		state = DsMap(ObjType(obj_block, block)->states_map).Value(name);
		if (is_undefined(state))
			return stateid;
		stateid -= (mod(((IntType)(stateid / idReal(state, value_id))), idReal(state, value_amount))) * idReal(state, value_id);
		stateid += DsMap(idInt(state, value_map)).Value(val) * idReal(state, value_id);
		return stateid;
	}
	
	RealType block_set_tripwire(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		StringType east, west, south, north;
		east = /*"false"*/ STR(784);
		west = /*"false"*/ STR(784);
		south = /*"false"*/ STR(784);
		north = /*"false"*/ STR(784);
		if (!sBool(build_edge_xp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(962) || idVar(block, name) == /*"tripwire_hook"*/ STR(963)))
				east = /*"true"*/ STR(783);
		}
		if (!sBool(build_edge_xn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(962) || idVar(block, name) == /*"tripwire_hook"*/ STR(963)))
				west = /*"true"*/ STR(783);
		}
		if (!sBool(build_edge_yp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(962) || idVar(block, name) == /*"tripwire_hook"*/ STR(963)))
				south = /*"true"*/ STR(783);
		}
		if (!sBool(build_edge_yn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
			if (block != null_ && (idVar(block, name) == /*"tripwire"*/ STR(962) || idVar(block, name) == /*"tripwire_hook"*/ STR(963)))
				north = /*"true"*/ STR(783);
		}
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"east"*/ STR(905), east, /*"west"*/ STR(906), west, /*"south"*/ STR(907), south, /*"north"*/ STR(908), north }));
		return IntType(0);
	}
	
	RealType block_set_twisting_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zn))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
			if (block == null_ || idVar(block, type) != /*"twisting_vines"*/ STR(964))
				global::vertex_wave_zmin = sInt(block_pos_z);
		}
		else
			global::vertex_wave_zmin = sInt(block_pos_z);
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(821)) == /*"twisting_vines_plant"*/ STR(965))
			return IntType(0);
		if (sInt(build_pos_z) != (sInt(build_size_z) - IntType(1)))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(821), /*"twisting_vines_plant"*/ STR(965) }));
		return IntType(0);
	}
	
	RealType block_set_vine(ScopeAny self)
	{
		if (!sBool(builder_scenery_legacy))
			return IntType(0);
		StringType up = /*"false"*/ STR(784);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_ && block != sInt(block_current))
				up = /*"true"*/ STR(783);
		}
		sReal(block_state_id_current) = block_set_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"up"*/ STR(924), up);
		return IntType(0);
	}
	
	RealType block_set_wall(ScopeAny self)
	{
		if (sBool(builder_scenery) && !sBool(builder_scenery_legacy))
			return IntType(0);
		if (!sBool(builder_scenery) && sInt(build_size_x) == IntType(1) && sInt(build_size_y) == IntType(1))
			return IntType(0);
		IntType east, west, south, north, i;
		VarType variant;
		ArrType states;
		BoolType tall;
		east = IntType(0);
		west = IntType(0);
		south = IntType(0);
		north = IntType(0);
		variant = block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(821));
		states = ArrType::From({ /*"none"*/ STR(914), /*"low"*/ STR(589), /*"tall"*/ STR(966) });
		tall = false;
		i = IntType(0);
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block != null_)
			{
				if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
					tall = true;
			}
		}
		for (IntType _it = 0, _it_max = IntType(2); _it < _it_max; _it++)
		{
			if (!sBool(build_edge_xp) && (i == IntType(0) || (i == IntType(1) && east > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp)))
						east++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(942))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(912));
							if (facing != /*"east"*/ STR(905) && facing != /*"west"*/ STR(906))
								east++;
						}
					
				}
			}
			if (!sBool(build_edge_xn) && (i == IntType(0) || (i == IntType(1) && west > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn)))
						west++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(942))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + i), /*"facing"*/ STR(912));
							if (facing != /*"east"*/ STR(905) && facing != /*"west"*/ STR(906))
								west++;
						}
					
				}
			}
			if (!sBool(build_edge_yp) && (i == IntType(0) || (i == IntType(1) && south > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp)))
						south++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(942))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(912));
							if (facing != /*"south"*/ STR(907) && facing != /*"north"*/ STR(908))
								south++;
						}
					
				}
			}
			if (!sBool(build_edge_yn) && (i == IntType(0) || (i == IntType(1) && north > 0)))
			{
				IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i);
				if (block != null_)
				{
					if (idVar(block, type) == idVar(sInt(block_current), type) || (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn)))
						north++;
					else
						if (idVar(block, type) == /*"fence_gate"*/ STR(942))
						{
							VarType facing = block_get_state_id_value(block, builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + i), /*"facing"*/ STR(912));
							if (facing != /*"south"*/ STR(907) && facing != /*"north"*/ STR(908))
								north++;
						}
					
				}
			}
			if (!tall)
				break;
			else
				i++;
			
		}
		StringType up;
		if ((east > IntType(0) && west > IntType(0) && south == IntType(0) && north == IntType(0)) || (east == IntType(0) && west == IntType(0) && south > IntType(0) && north > IntType(0)))
			up = /*"false"*/ STR(784);
		else
			up = /*"true"*/ STR(783);
		
		sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(821), variant, /*"east"*/ STR(905), states.Value(east), /*"west"*/ STR(906), states.Value(west), /*"south"*/ STR(907), states.Value(south), /*"north"*/ STR(908), states.Value(north), /*"up"*/ STR(924), up }));
		return IntType(0);
	}
	
	RealType block_set_weeping_vines(ScopeAny self)
	{
		if (!sBool(build_edge_zp))
		{
			IntType block = builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
			if (block == null_ || idVar(block, type) != /*"weeping_vines"*/ STR(967))
				global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		}
		else
			global::vertex_wave_zmax = sInt(block_pos_z) + block_size_;
		
		if ((sBool(builder_scenery) && !sBool(builder_scenery_legacy)) || block_get_state_id_value(sInt(block_current), sReal(block_state_id_current), /*"variant"*/ STR(821)) == /*"weeping_vines_plant"*/ STR(968))
			return IntType(0);
		if (sInt(build_pos_z) == IntType(0))
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(821), /*"weeping_vines"*/ STR(967) }));
		else
			sReal(block_state_id_current) = block_get_state_id(sInt(block_current), ArrType::From({ /*"variant"*/ STR(821), /*"weeping_vines_plant"*/ STR(968) }));
		
		return IntType(0);
	}
	
	VarType block_texture_get_blend(VarType texname, VarType res)
	{
		VarType col = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_color_map).Value(texname);
		if (!is_undefined(col))
		{
			if (!res_is_ready(res))
				res = global::mc_res;
			if (is_real(col))
				return col;
			switch (StringType(col).id)
			{
				case 869: // grass
				{
					return idVar(res, color_grass);
				}
				case 870: // foliage
				{
					return idVar(res, color_foliage);
				}
				case 823: // water
				{
					return idVar(res, color_water);
				}
				case 871: // oak_leaves
				{
					return idVar(res, color_leaves_oak);
				}
				case 872: // spruce_leaves
				{
					return idVar(res, color_leaves_spruce);
				}
				case 873: // birch_leaves
				{
					return idVar(res, color_leaves_birch);
				}
				case 874: // jungle_leaves
				{
					return idVar(res, color_leaves_jungle);
				}
				case 875: // acacia_leaves
				{
					return idVar(res, color_leaves_acacia);
				}
				case 876: // dark_oak_leaves
				{
					return idVar(res, color_leaves_dark_oak);
				}
				case 877: // mangrove_leaves
				{
					return idVar(res, color_leaves_mangrove);
				}
			}
			
		}
		return c_white;
	}
	
	RealType block_texture_get_frame(RealType realtime)
	{
		return mod(floor(((realtime > 0) ? global::current_step : global::_app->background_time) * global::_app->background_texture_animation_speed), block_sheet_ani_frames);
	}
	
	void block_tile_entity_banner(Scope<obj_builder_thread> self, IntType map)
	{
		VarType patterns, base;
		BoolType legacy;
		ArrType patternlist, patterncolorlist;
		patterns = DsMap(map).Value(/*"Patterns"*/ STR(969));
		if (ds_map_exists(map, /*"Base"*/ STR(970)))
		{
			base = DsMap(map).Value(/*"Base"*/ STR(970));
			legacy = true;
		}
		else
		{
			base = null_;
			legacy = false;
		}
		
		patternlist = ArrType();
		patterncolorlist = ArrType();
		if (ds_list_valid(patterns))
		{
			for (IntType i = IntType(0); i < ds_list_size((IntType)(patterns)); i++)
			{
				VarType patternmap = DsList(patterns).Value(i);
				if (!ds_map_valid(patternmap))
					continue;
				VarType pattern, color;
				IntType patternindex;
				pattern = value_get_string(DsMap(patternmap).Value(/*"Pattern"*/ STR(971)), DsList(global::minecraft_pattern_short_list).Value(IntType(1)));
				color = value_get_real(DsMap(patternmap).Value(/*"Color"*/ STR(972)), IntType(0));
				patternindex = ds_list_find_index(global::minecraft_pattern_short_list, pattern);
				if (legacy)
					color = (ds_list_size(global::minecraft_color_list) - IntType(1)) - color;
				array_add(VarType::CreateRef(patternlist), DsList(global::minecraft_pattern_list).Value(patternindex));
				array_add(VarType::CreateRef(patterncolorlist), DsList(global::minecraft_color_list).Value(color));
			}
		}
		RealType colorindex = IntType(0);
		if (legacy)
			colorindex = (ds_list_size(global::minecraft_color_list) - IntType(1)) - base;
		else
		{
			VarType color = block_get_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(926));
			if (!is_undefined(color))
				colorindex = ds_list_find_index(global::minecraft_color_name_list, color);
		}
		
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_color_map)[self->build_pos] = DsList(global::minecraft_color_list).Value(colorindex);
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_patterns_map)[self->build_pos] = patternlist;
		DsMap(ObjType(obj_builder, global::mc_builder)->block_banner_pattern_colors_map)[self->build_pos] = patterncolorlist;
	}
	
	RealType block_tile_entity_bed(Scope<obj_builder_thread> self, IntType map)
	{
		VarType colorid = DsMap(map).Value(/*"color"*/ STR(926));
		if (!is_real(colorid))
			return IntType(0);
		if (is_undefined(colorid) || colorid >= ds_list_size(global::minecraft_color_list))
			return IntType(0);
		RealType newstate = block_set_state_id_value(self->block_current, self->block_state_id_current, /*"color"*/ STR(926), DsList(global::minecraft_color_name_list).Value(colorid));
		builder_set_state_id(self, self->build_pos_x, self->build_pos_y, self->build_pos_z, newstate);
		return 0.0;
	}
	
	void block_tile_entity_decorated_pot(Scope<obj_builder_thread> self, IntType map)
	{
		VarType sherdsarr = DsMap(map).Value(/*"sherds"*/ STR(973));
		for (IntType i = IntType(0); i < ds_list_size((IntType)(sherdsarr)); i++)
		{
			VarType sherd = DsList(sherdsarr).Value(i);
			if (DsMap(global::minecraft_sherd_map).Value(sherd) != VarType())
				DsList(sherdsarr)[i] = DsMap(global::minecraft_sherd_map).Value(sherd);
			else
				DsList(sherdsarr)[i] = /*"none"*/ STR(914);
			
		}
		ArrType state = ArrType::From({});
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_front"*/ STR(974), DsList(sherdsarr).Value(IntType(0)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_left"*/ STR(975), DsList(sherdsarr).Value(IntType(1)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_right"*/ STR(976), DsList(sherdsarr).Value(IntType(2)) }));
		array_add(VarType::CreateRef(state), ArrType::From({ /*"sherd_back"*/ STR(977), DsList(sherdsarr).Value(IntType(3)) }));
		array_add(VarType::CreateRef(state), block_get_state_id_state_vars(self->block_current, self->block_state_id_current));
		DsMap(ObjType(obj_builder, global::mc_builder)->block_decorated_pot_sherds_map)[self->build_pos] = state;
	}
	
	void block_tile_entity_hanging_sign(Scope<obj_builder_thread> self, VarType map)
	{
		block_tile_entity_sign(self, map);
	}
	
	VarType block_tile_entity_sign_text(VarType map)
	{
		VarType messagemap = value_get_array(DsMap(map).Value(/*"messages"*/ STR(978)), /*""*/ STR(0));
		VarType text = /*""*/ STR(0);
		for (IntType i = IntType(0); i < IntType(4); i++)
		{
			VarType line = /*""*/ STR(0);
			IntType textmap = json_decode(messagemap.Value(i));
			if (ds_map_valid(textmap))
			{
				if (is_string(DsMap(textmap).Value(/*"text"*/ STR(99))))
					line = DsMap(textmap).Value(/*"text"*/ STR(99));
				ds_map_destroy(textmap);
			}
			if (line == /*""*/ STR(0))
				line = /*" "*/ STR(17);
			if (i > IntType(0))
				text += /*"\n"*/ STR(979);
			text += line;
		}
		return text;
	}
	
	RealType block_tile_entity_sign(Scope<obj_builder_thread> self, IntType map)
	{
		VarType frontmap = DsMap(map).Value(/*"front_text"*/ STR(980));
		VarType backmap = DsMap(map).Value(/*"back_text"*/ STR(981));
		VarType text, color, glowcolor, glowing;
		IntType colorind;
		ArrType glowind;
		if (ds_map_valid(frontmap))
		{
			colorind = ds_list_find_index(global::minecraft_color_name_list, value_get_string(DsMap(frontmap).Value(/*"color"*/ STR(926)), /*"black"*/ STR(607)));
			glowing = value_get_real(DsMap(frontmap).Value(/*"has_glowing_text"*/ STR(982)), IntType(0));
			glowind = DsList(global::minecraft_glowing_sign_list).Value(colorind);
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_color_map)[self->build_pos] = ((glowing > 0) ? glowind.Value(IntType(0)) : DsList(global::minecraft_color_list).Value(colorind));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glow_color_map)[self->build_pos] = glowind.Value(IntType(1));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glowing_map)[self->build_pos] = glowing;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_map)[self->build_pos] = block_tile_entity_sign_text(frontmap);
			colorind = ds_list_find_index(global::minecraft_color_name_list, value_get_string(DsMap(backmap).Value(/*"color"*/ STR(926)), /*"black"*/ STR(607)));
			glowing = value_get_real(DsMap(backmap).Value(/*"has_glowing_text"*/ STR(982)), IntType(0));
			glowind = DsList(global::minecraft_glowing_sign_list).Value(colorind);
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_color_map)[self->build_pos] = ((glowing > 0) ? glowind.Value(IntType(0)) : DsList(global::minecraft_color_list).Value(colorind));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_glow_color_map)[self->build_pos] = glowind.Value(IntType(1));
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_glowing_map)[self->build_pos] = glowing;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_back_map)[self->build_pos] = block_tile_entity_sign_text(backmap);
		}
		else
		{
			colorind = ds_list_find_index(global::minecraft_color_name_list, value_get_string(DsMap(map).Value(/*"Color"*/ STR(972)), /*"black"*/ STR(607)));
			glowing = value_get_real(DsMap(map).Value(/*"GlowingText"*/ STR(983)), IntType(0));
			glowind = DsList(global::minecraft_glowing_sign_list).Value(colorind);
			color = ((glowing > 0) ? glowind.Value(IntType(0)) : DsList(global::minecraft_color_list).Value(colorind));
			glowcolor = glowind.Value(IntType(1));
			text = /*""*/ STR(0);
			for (IntType i = IntType(0); i < IntType(4); i++)
			{
				VarType line = DsMap(map).Value(/*"Text"*/ STR(984) + string(i + IntType(1)));
				if (!is_string(line))
					return IntType(0);
				IntType textmap = json_decode(line);
				if (ds_map_valid(textmap))
				{
					if (ds_list_valid(DsMap(textmap).Value(/*"extra"*/ STR(985))) && ds_list_size((IntType)(DsMap(textmap).Value(/*"extra"*/ STR(985)))) > IntType(0))
					{
						IntType extramap = ds_list_find_value(DsMap(textmap).Value(/*"extra"*/ STR(985)), IntType(0));
						if (ds_map_valid(extramap) && is_string(DsMap(extramap).Value(/*"text"*/ STR(99))))
							textmap = extramap;
					}
					if (is_string(DsMap(textmap).Value(/*"text"*/ STR(99))))
						line = DsMap(textmap).Value(/*"text"*/ STR(99));
					ds_map_destroy(textmap);
				}
				if (line == /*""*/ STR(0))
					line = /*" "*/ STR(17);
				if (i > IntType(0))
					text += /*"\n"*/ STR(979);
				text += line;
			}
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_map)[self->build_pos] = text;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_color_map)[self->build_pos] = color;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glow_color_map)[self->build_pos] = glowcolor;
			DsMap(ObjType(obj_builder, global::mc_builder)->block_text_front_glowing_map)[self->build_pos] = glowing;
		}
		
		return 0.0;
	}
	
	RealType block_tile_entity_skull(Scope<obj_builder_thread> self, VarType map)
	{
		StringType mapname, ownerid, texvalue, texurl;
		VarType texlist;
		mapname = /*"Owner"*/ STR(986);
		if (!ds_map_valid(DsMap(map).Value(mapname)))
		{
			mapname = /*"SkullOwner"*/ STR(987);
			if (!ds_map_valid(DsMap(map).Value(mapname)))
				return IntType(0);
		}
		map = DsMap(map).Value(mapname);
		ownerid = string(DsMap(map).Value(/*"Id"*/ STR(988)));
		map = DsMap(map).Value(/*"Properties"*/ STR(989));
		if (!ds_map_valid(map))
			return IntType(0);
		texlist = DsMap(map).Value(/*"textures"*/ STR(848));
		if (!ds_list_valid(texlist))
			return IntType(0);
		map = DsList(texlist).Value(IntType(0));
		texvalue = base64_decode(DsMap(map).Value(/*"Value"*/ STR(990)));
		map = json_decode(texvalue);
		if (!ds_map_valid(map))
			return IntType(0);
		if (!ds_map_valid(DsMap(map).Value(/*"textures"*/ STR(848))))
			return IntType(0);
		map = DsMap(map).Value(/*"textures"*/ STR(848));
		map = DsMap(map).Value(/*"SKIN"*/ STR(991));
		texurl = DsMap(map).Value(/*"url"*/ STR(992)).Str();
		ownerid = filename_change_ext(filename_name(texurl), /*""*/ STR(0));
		DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_map)[self->build_pos] = ownerid;
		if (ds_map_find_value(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map, ownerid) == VarType())
			DsMap(ObjType(obj_builder, global::mc_builder)->block_skull_texture_map)[ownerid] = texurl;
		return 0.0;
	}
	
	void block_vbuffer_destroy(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
	}
	
	void block_vbuffer_done(ScopeAny self)
	{
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				vertex_end((IntType)(sVar(block_vbuffer)[d][vb]));
				sVar(block_vbuffer)[d][vb] = vbuffer_generate_tangents(sVar(block_vbuffer)[d][vb]);
				vertex_freeze((IntType)(sVar(block_vbuffer)[d][vb]));
			}
		}
	}
	
	void block_vbuffer_start(ScopeAny self)
	{
		if (sVar(block_vbuffer) != null_)
			for (IntType d = IntType(0); d < e_block_depth_amount; d++)
				for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
					vbuffer_destroy(sVar(block_vbuffer)[d][vb]);
		for (IntType d = IntType(0); d < e_block_depth_amount; d++)
		{
			for (IntType vb = IntType(0); vb < e_block_vbuffer_amount; vb++)
			{
				sVar(block_vbuffer)[d][vb] = vbuffer_start();
				vertex_buffer_set_save_data(sVar(block_vbuffer)[d][vb], true);
				ObjType(obj_builder, global::mc_builder)->vbuffer[d][vb] = sVar(block_vbuffer)[d][vb];
			}
		}
	}
	
	RealType bool_to_float(VarType val)
	{
		if (val > 0)
			return IntType(1);
		return IntType(0);
	}
	
	RealType buffer_is_eof()
	{
		return (buffer_tell(global::buffer_current) >= buffer_get_size(global::buffer_current));
	}
	
	IntType buffer_load_lib(VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			file_copy_lib(fn, temp_file);
			return buffer_load(temp_file);
		}
		else
			return buffer_load(fn);
		
		return IntType(0);
	}
	
	RealType buffer_read_alpha(RealType xx, RealType yy, RealType wid)
	{
		return real((RealType)buffer_peek(global::buffer_current, (IntType)((xx + yy * wid) * IntType(4) + IntType(3)), buffer_u8) / 255.0);
	}
	
	IntType buffer_read_byte()
	{
		return real(buffer_read(global::buffer_current, buffer_u8));
	}
	
	IntType buffer_read_color(RealType xx, RealType yy, RealType wid)
	{
		RealType off;
		IntType r, g, b;
		off = (xx + yy * wid) * IntType(4);
		r = real(buffer_peek(global::buffer_current, (IntType)(off), buffer_u8));
		g = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(1)), buffer_u8));
		b = real(buffer_peek(global::buffer_current, (IntType)(off + IntType(2)), buffer_u8));
		return make_color_rgb(r, g, b);
	}
	
	RealType buffer_read_double()
	{
		return real(buffer_read(global::buffer_current, buffer_f64));
	}
	
	RealType buffer_read_double_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(8); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(8), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(8); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(7) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f64));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_float()
	{
		return real(buffer_read(global::buffer_current, buffer_f32));
	}
	
	RealType buffer_read_float_be()
	{
		ArrType byte;
		IntType tmpbuf;
		RealType value;
		for (IntType b = IntType(0); b < IntType(4); b++)
			byte[b] = buffer_read_byte();
		tmpbuf = buffer_create(IntType(4), buffer_fixed, IntType(1));
		for (IntType b = IntType(0); b < IntType(4); b++)
			buffer_write(tmpbuf, buffer_u8, byte.Value(IntType(3) - b));
		buffer_seek(tmpbuf, IntType(0), IntType(0));
		value = real(buffer_read(tmpbuf, buffer_f32));
		buffer_delete(tmpbuf);
		return value;
	}
	
	RealType buffer_read_int()
	{
		return real(buffer_read(global::buffer_current, buffer_s32));
	}
	
	RealType buffer_read_int_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		byte[IntType(2)] = buffer_read_byte();
		byte[IntType(3)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(16777216) + byte.Value(IntType(1)) * IntType(65536) + byte.Value(IntType(2)) * IntType(256) + byte.Value(IntType(3));
	}
	
	IntType buffer_read_int_uns()
	{
		return buffer_read(global::buffer_current, buffer_u32);
	}
	
	RealType buffer_read_long_be()
	{
		RealType i1, i2;
		i1 = buffer_read_int_be();
		i2 = buffer_read_int_be();
		return i1 * IntType(4294967296) + i2;
	}
	
	RealType buffer_read_short()
	{
		return real(buffer_read(global::buffer_current, buffer_s16));
	}
	
	RealType buffer_read_short_be()
	{
		ArrType byte;
		byte[IntType(0)] = buffer_read_byte();
		byte[IntType(1)] = buffer_read_byte();
		return byte.Value(IntType(0)) * IntType(256) + byte.Value(IntType(1));
	}
	
	StringType buffer_read_string_int()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = real(buffer_read_int()); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	StringType buffer_read_string_short_be()
	{
		StringType str = /*""*/ STR(0);
		for (IntType _it = 0, _it_max = buffer_read_short_be(); _it < _it_max; _it++)
			str += chr(buffer_read_byte());
		return str;
	}
	
	void buffer_save_lib(IntType buffer, VarType fn)
	{
		if (global::file_copy_temp)
		{
			file_delete_lib(temp_file);
			buffer_save(buffer, temp_file);
			file_copy_lib(temp_file, fn);
		}
		else
			buffer_save(buffer, fn);
		
	}
	
}
