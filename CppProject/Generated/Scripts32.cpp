/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.22 15:16:08 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	BoolType json_load_value()
	{
		if (global::json_char == e_json_char_CURLY_BEGIN)
			return json_load_object(false);
		else
			if (global::json_char == e_json_char_SQUARE_BEGIN)
				return json_load_array();
			else
				if (global::json_char == e_json_char_QUOTE)
					return json_load_string();
				else
					if ((global::json_char >= e_json_char_NUM_0 && global::json_char <= e_json_char_NUM_9) || global::json_char == e_json_char_MINUS)
						return json_load_number();
					else
						return json_load_word();
				
			
		
		
		return false;
	}
	
	BoolType json_load_word()
	{
		if (global::json_char == e_json_char_T)
		{
			for (IntType _it = 0, _it_max = IntType(4); _it < _it_max; _it++)
				if (!json_load_char())
					return false;
			global::json_value = true;
			global::json_value_type = e_json_type_BOOL;
		}
		else
			if (global::json_char == e_json_char_F)
			{
				for (IntType _it = 0, _it_max = IntType(5); _it < _it_max; _it++)
					if (!json_load_char())
						return false;
				global::json_value = false;
				global::json_value_type = e_json_type_BOOL;
			}
			else
				if (global::json_char == e_json_char_N)
				{
					for (IntType _it = 0, _it_max = IntType(4); _it < _it_max; _it++)
						if (!json_load_char())
							return false;
					global::json_value = null_;
					global::json_value_type = e_json_type_NULL_;
				}
				else
				{
					global::json_error = /*"Unrecognized word"*/ STR(1246);
					return false;
				}
			
		
		
		return true;
	}
	
	void json_save_array(VarType arr, IntType size)
	{
		buffer_write_byte(e_json_char_SQUARE_BEGIN);
		buffer_write_byte(e_json_char_SPACE);
		for (IntType i = IntType(0); i < size; i++)
		{
			if (i > IntType(0))
			{
				buffer_write_byte(e_json_char_COMMA);
				buffer_write_byte(e_json_char_SPACE);
			}
			json_save_value(arr.Value(i));
		}
		buffer_write_byte(e_json_char_SPACE);
		buffer_write_byte(e_json_char_SQUARE_END);
	}
	
	void json_save_array_done()
	{
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		global::json_indent--;
		json_save_indent();
		buffer_write_byte(e_json_char_SQUARE_END);
		global::json_add_comma = true;
	}
	
	void json_save_array_start(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		if (argument_count > IntType(0))
		{
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_string(argument[IntType(0)]);
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_byte(e_json_char_COLON);
			buffer_write_byte(e_json_char_SPACE);
		}
		buffer_write_byte(e_json_char_SQUARE_BEGIN);
		global::json_indent++;
		global::json_add_comma = false;
	}
	
	void json_save_array_value(VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		json_save_value(val);
		global::json_add_comma = true;
	}
	
	void json_save_done()
	{
		buffer_resize(global::buffer_current, buffer_tell(global::buffer_current));
		buffer_save_lib(global::buffer_current, global::json_filename);
		buffer_delete(global::buffer_current);
	}
	
	void json_save_indent()
	{
		for (IntType _it = 0, _it_max = global::json_indent; _it < _it_max; _it++)
			buffer_write_byte(e_json_char_TAB);
	}
	
	void json_save_object_done()
	{
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		global::json_indent--;
		json_save_indent();
		buffer_write_byte(e_json_char_CURLY_END);
		global::json_add_comma = true;
	}
	
	void json_save_object_start(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		if (!global::json_empty)
		{
			buffer_write_byte(e_json_char_RETURN);
			buffer_write_byte(e_json_char_NEW_LINE);
		}
		else
			global::json_empty = false;
		
		json_save_indent();
		if (argument_count > IntType(0))
		{
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_string(argument[IntType(0)]);
			buffer_write_byte(e_json_char_QUOTE);
			buffer_write_byte(e_json_char_COLON);
			buffer_write_byte(e_json_char_SPACE);
		}
		buffer_write_byte(e_json_char_CURLY_BEGIN);
		global::json_indent++;
		global::json_add_comma = false;
	}
	
	void json_save_start(VarType fn)
	{
		global::json_filename = fn;
		global::json_indent = IntType(0);
		global::json_empty = true;
		global::json_add_comma = false;
		global::buffer_current = buffer_create(IntType(8), buffer_grow, IntType(1));
	}
	
	void json_save_value(VarType val)
	{
		if (is_real(val) || is_int32(val) || is_int64(val))
			buffer_write_string(string_decimals(val));
		else
			if (is_array(val))
				json_save_array(val, array_length(VarType::CreateRef(val)));
			else
				if (is_bool(val))
					buffer_write_string(string(val));
				else
				{
					buffer_write_byte(e_json_char_QUOTE);
					buffer_write_string(val);
					buffer_write_byte(e_json_char_QUOTE);
				}
			
		
		
	}
	
	void json_save_var(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		json_save_value(val);
		global::json_add_comma = true;
	}
	
	void json_save_var_bool(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		buffer_write_string((val > 0) ? /*"true"*/ STR(784) : /*"false"*/ STR(785));
		global::json_add_comma = true;
	}
	
	void json_save_var_color(VarType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		json_save_value(/*"#"*/ STR(868) + color_to_hex(val));
		global::json_add_comma = true;
	}
	
	void json_save_var_nullable(StringType name, VarType val)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (val == null_)
			json_save_value(/*"null"*/ STR(1247));
		else
			json_save_value(val);
		
		global::json_add_comma = true;
	}
	
	void json_save_var_point2D(StringType name, VarType value)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (value == null_)
			json_save_value(/*"null"*/ STR(1247));
		else
			json_save_value(point2D(value.Value(X_), value.Value(Y_)));
		
		global::json_add_comma = true;
	}
	
	void json_save_var_point3D(StringType name, VarType value)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (value == null_)
			json_save_value(/*"null"*/ STR(1247));
		else
			json_save_value(point3D(value.Value(X_), value.Value(Z_), value.Value(Y_)));
		
		global::json_add_comma = true;
	}
	
	void json_save_var_save_id(StringType name, VarType obj)
	{
		if (global::json_add_comma)
			buffer_write_byte(e_json_char_COMMA);
		buffer_write_byte(e_json_char_RETURN);
		buffer_write_byte(e_json_char_NEW_LINE);
		json_save_indent();
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_string(name);
		buffer_write_byte(e_json_char_QUOTE);
		buffer_write_byte(e_json_char_COLON);
		buffer_write_byte(e_json_char_SPACE);
		if (obj == null_)
			json_save_value(/*"null"*/ STR(1247));
		else
		{
			json_save_value(save_id_get(obj));
			idBool(obj, save) = true;
		}
		
		global::json_add_comma = true;
	}
	
	void json_save_var_state_vars(StringType name, VarType vars)
	{
		json_save_object_start({ name });
		for (IntType i = IntType(0); i < array_length(VarType::CreateRef(vars)); i += IntType(2))
			json_save_var(vars.Value(i), vars.Value(i + IntType(1)));
		json_save_object_done();
	}
	
	void json_startup()
	{
	}
	
	void keybinds_reset_default(ScopeAny self)
	{
		for (IntType i = IntType(0); i < e_keybind_amount; i++)
			keybind_restore(self, i, true);
		keybinds_update_match();
		settings_save(self);
	}
	
	void keybinds_update_match()
	{
		withAll (obj_keybind, noone)
		{
			self->match_error = false;
			withAll (obj_keybind, self->id)
			{
				if (self->id == self.otherId)
					continue;
				if (array_equals(VarType::CreateRef(self->keybind), VarType::CreateRef(ObjType(obj_keybind, self.otherId)->keybind)) && (self->navigation == ObjType(obj_keybind, self.otherId)->navigation))
				{
					ObjType(obj_keybind, self.otherId)->match_error = true;
					break;
				}
			}
			
		}
		
	}
	
	BoolType keybind_check(VarType keybindobj, StringType checkscript)
	{
		VarType keybind;
		BoolType scriptres, charcheck;
		keybind = idVar(keybindobj, keybind);
		switch (StringType(checkscript).id)
		{
			case 714: // keyboard_check
			{
				scriptres = keyboard_check((IntType)(keybind.Value(e_keybind_key_CHAR)));
				break;
			}
			case 716: // keyboard_check_pressed
			{
				scriptres = keyboard_check_pressed((IntType)(keybind.Value(e_keybind_key_CHAR)));
				break;
			}
			case 715: // keyboard_check_released
			{
				scriptres = keyboard_check_released((IntType)(keybind.Value(e_keybind_key_CHAR)));
				break;
			}
		}
		
		charcheck = (keybind.Value(e_keybind_key_CHAR) == null_ || scriptres);
		if (checkscript == /*"keyboard_check"*/ STR(714))
		{
			idBool(keybindobj, check_ctrl) = (keyboard_check(vk_control) == keybind.Value(e_keybind_key_CTRL)) || (idBool(keybindobj, navigation) && !(keybind.Value(e_keybind_key_CTRL) > 0));
			idBool(keybindobj, check_shift) = (keyboard_check(vk_shift) == keybind.Value(e_keybind_key_SHIFT)) || (idBool(keybindobj, navigation) && !(keybind.Value(e_keybind_key_SHIFT) > 0));
			idBool(keybindobj, check_alt) = (keyboard_check(vk_alt) == keybind.Value(e_keybind_key_ALT)) || (idBool(keybindobj, navigation) && !(keybind.Value(e_keybind_key_ALT) > 0));
		}
		return (charcheck && idBool(keybindobj, check_ctrl) && idBool(keybindobj, check_shift) && idBool(keybindobj, check_alt));
	}
	
	void keybind_event_create(Scope<obj_keybind> self)
	{
		self->name = /*""*/ STR(0);
		self->keybind_id = null_;
		self->keybind = null_;
		self->keybind_default = null_;
		self->pressed = false;
		self->active = false;
		self->released = false;
		self->check_ctrl = false;
		self->check_shift = false;
		self->check_alt = false;
		self->match_error = false;
	}
	
	VarType keybind_new(VarType char_, BoolType ctrl, BoolType shift, BoolType alt)
	{
		if (is_string(char_))
			char_ = ord(char_);
		return ArrType::From({ char_, ctrl, shift, alt });
	}
	
	void keybind_register(StringType name, IntType keybindID, VarType keybind, BoolType navigation)
	{
		IntType obj = (new obj_keybind)->id;
		ObjType(obj_keybind, obj)->name = name;
		ObjType(obj_keybind, obj)->keybind_id = keybindID;
		ObjType(obj_keybind, obj)->keybind_default = keybind;
		ObjType(obj_keybind, obj)->keybind = keybind;
		ObjType(obj_keybind, obj)->navigation = navigation;
		global::keybinds[keybindID] = obj;
	}
	
	void keybind_restore(ScopeAny self, IntType keybindID, BoolType group)
	{
		VarType obj = global::keybinds.Value(keybindID);
		idVar(obj, keybind) = idVar(obj, keybind_default);
		if (!group)
		{
			keybinds_update_match();
			settings_save(self);
		}
	}
	
	void keybind_set(ScopeAny self, IntType keybindID, VarType keybind)
	{
		VarType obj = global::keybinds.Value(keybindID);
		idVar(obj, keybind) = keybind;
		keybinds_update_match();
		settings_save(self);
	}
	
	RealType keyframes_save(ScopeAny self)
	{
		BoolType ismodel;
		VarType tllast;
		ismodel = false;
		tllast = null_;
		withAll (obj_keyframe, self->id)
		{
			if (!(self->selected > 0))
				continue;
			if (tllast != null_ && self->timeline != tllast)
				ismodel = true;
			tllast = self->timeline;
		}
		
		VarType name;
		if (ismodel && idVar(global::tl_edit, part_of) != null_)
			name = idVar(idVar(global::tl_edit, part_of), display_name);
		else
			name = idVar(global::tl_edit, display_name);
		
		VarType fn = file_dialog_save_keyframes(name);
		if (fn == /*""*/ STR(0))
			return IntType(0);
		fn = filename_new_ext(fn, /*".miframes"*/ STR(33));
		log({ /*"Saving keyframes"*/ STR(1262), fn });
		global::save_folder = filename_dir(fn);
		global::load_folder = sStr(project_folder);
		log({ /*"load_folder"*/ STR(753), global::load_folder });
		log({ /*"save_folder"*/ STR(752), global::save_folder });
		project_save_start(fn, false);
		VarType firstpos, lastpos;
		firstpos = null_;
		lastpos = null_;
		withAll (obj_keyframe, self->id)
		{
			if (!(self->selected > 0))
				continue;
			tl_keyframe_save(self->id);
			if (firstpos == null_ || self->position < firstpos)
				firstpos = self->position;
			lastpos = max({ self->position, lastpos });
		}
		
		json_save_var_bool(/*"is_model"*/ STR(36), ismodel);
		json_save_var(/*"tempo"*/ STR(37), sVar(project_tempo));
		json_save_var(/*"length"*/ STR(39), lastpos - firstpos);
		json_save_array_start({ /*"keyframes"*/ STR(38) });
		withAll (obj_keyframe, self->id)
		{
			if (!(self->selected > 0))
				continue;
			json_save_object_start();
			json_save_var(/*"position"*/ STR(40), self->position - firstpos);
			if (ismodel && idVar(self->timeline, part_of) != null_)
				json_save_var(/*"part_name"*/ STR(41), idVar(self->timeline, model_part_name));
			keyframe_update_item_name(self);
			project_save_values(/*"values"*/ STR(42), self->value, idArr(self->timeline, value_default));
			json_save_object_done();
		}
		
		json_save_array_done();
		project_save_objects(self);
		project_save_done();
		log({ /*"Keyframes saved"*/ STR(1263) });
		return 0.0;
	}
	
	void keyframe_event_destroy(Scope<obj_keyframe> self)
	{
		ds_list_delete_value(idInt(self->timeline, keyframe_list), self->id);
		if (self->value.Value(e_value_SOUND_OBJ) != null_)
			idInt(self->value.Value(e_value_SOUND_OBJ), count)--;
	}
	
	RealType keyframe_update_item_name(Scope<obj_keyframe> self)
	{
		if (idVar(self->timeline, type) != e_tl_type_ITEM)
			return IntType(0);
		VarType slot = self->value.Value(e_value_ITEM_SLOT);
		if (self->value.Value(e_value_TEXTURE_OBJ) != null_)
		{
			VarType tex = self->value.Value(e_value_TEXTURE_OBJ);
			if (idVar(tex, type) == e_res_type_PACK && slot < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)))
				self->value[e_value_ITEM_NAME] = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(slot);
			else
				self->value[e_value_ITEM_NAME] = /*""*/ STR(0);
			
		}
		else
			if (idVar(idVar(idVar(self->timeline, temp), item_tex), type) == e_res_type_PACK && slot < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list)))
			{
				self->value[e_value_ITEM_NAME] = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list).Value(slot);
			}
			else
				self->value[e_value_ITEM_NAME] = /*""*/ STR(0);
		
		
		return 0.0;
	}
	
	BoolType key_valid(VarType key)
	{
		StringType keystr;
		key = string_upper(key);
		keystr = /*"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"*/ STR(1264);
		if (string_length(key) != IntType(8))
			return false;
		for (IntType c = IntType(0); c < IntType(8); c += IntType(2))
		{
			IntType pos1, pos2;
			pos1 = string_pos(string_char_at(key, c + IntType(1)), keystr);
			pos2 = string_pos(string_char_at(key, (IntType)(IntType(8) - c)), keystr);
			if (pos1 == IntType(0) || pos2 == IntType(0))
				return false;
			if (pos1 != string_length(keystr) + IntType(1) - pos2)
				return false;
		}
		return true;
	}
	
	void langauge_new(StringType fn)
	{
		IntType obj = (new obj_language)->id;
		withOne (obj_language, obj, noone)
		{
			self->filename = filename_name(fn);
			self->name = text_get({ /*"filelanguage"*/ STR(1265) });
			self->locale = text_exists(/*"filelocale"*/ STR(1266)) ? string(text_get({ /*"filelocale"*/ STR(1266) })) : /*""*/ STR(0);
		}
		
	}
	
	RealType languages_load()
	{
		StringType fn = languages_file;
		if (!file_exists_lib(fn))
			return IntType(0);
		log({ /*"Loading languages"*/ STR(1267), fn });
		VarType map = json_load({ fn });
		if (!ds_map_valid(map))
			return IntType(0);
		global::load_format = DsMap(map).Value(/*"format"*/ STR(88));
		log({ /*"load_format"*/ STR(1268), global::load_format });
		VarType list, obj;
		list = DsMap(map).Value(/*"languages"*/ STR(1269));
		for (IntType i = IntType(0); i < ds_list_size((IntType)(list)); i++)
		{
			map = DsList(list).Value(i);
			VarType name, locale, fn;
			name = value_get_string(DsMap(map).Value(/*"name"*/ STR(828)), /*""*/ STR(0));
			locale = value_get_string(DsMap(map).Value(/*"locale"*/ STR(1270)), /*""*/ STR(0));
			fn = value_get_string(DsMap(map).Value(/*"filename"*/ STR(1271)), /*""*/ STR(0));
			language_remove(fn);
			IntType obj = (new obj_language)->id;
			ObjType(obj_language, obj)->name = name;
			ObjType(obj_language, obj)->locale = locale;
			ObjType(obj_language, obj)->filename = fn;
		}
		ds_list_destroy((IntType)(list));
		return 0.0;
	}
	
	void languages_save()
	{
		log({ /*"Saving languages"*/ STR(1272), languages_file });
		json_save_start(languages_file);
		json_save_object_start();
		json_save_var(/*"format"*/ STR(88), settings_format);
		json_save_array_start({ /*"languages"*/ STR(1269) });
		withAll (obj_language, noone)
		{
			json_save_object_start();
			json_save_var(/*"name"*/ STR(828), json_string_encode(self->name));
			json_save_var(/*"locale"*/ STR(1270), self->locale);
			json_save_var(/*"filename"*/ STR(1271), self->filename);
			json_save_object_done();
		}
		
		json_save_array_done();
		json_save_object_done();
		json_save_done();
		debug({ /*"Saved languges"*/ STR(1273) });
	}
	
	RealType language_add(ScopeAny self)
	{
		StringType fn = file_dialog_open_language();
		if (fn == /*""*/ STR(0))
			return IntType(0);
		if (file_exists_lib(languages_directory + filename_name(fn)))
			if (!question(/*"This file already exists the language file directory. Do you want to replace the file?"*/ STR(1274)))
				return IntType(0);
		file_copy_lib(fn, languages_directory + filename_name(fn));
		action_setting_language_load(self, languages_directory + filename_name(fn));
		language_remove(filename_name(fn));
		langauge_new(fn);
		languages_save();
		return 0.0;
	}
	
	RealType language_load(VarType fn, IntType map, BoolType reload)
	{
		log({ /*"Loading language file"*/ STR(1275), fn });
		ds_map_clear(map);
		if (filename_ext(fn) == /*".milanguage"*/ STR(1276))
		{
			StringType convfn = file_directory + /*"conv.tmp"*/ STR(1277);
			json_file_convert_unicode(fn, convfn);
			if (!file_exists_lib(convfn))
			{
				StringType msg = /*"An error occurred while reading the language file:\nCould not convert."*/ STR(1278);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1279));
				show_message(msg);
				window_set_caption(/*""*/ STR(0));
				return IntType(0);
			}
			IntType jsonmap = json_load({ convfn });
			if (ds_map_valid(jsonmap))
			{
				language_load_map(/*""*/ STR(0), jsonmap, map);
				ds_map_destroy(jsonmap);
			}
			else
			{
				StringType msg = /*"An error occured while reading the language file:\n"*/ STR(1280) + global::json_error + /*" on line "*/ STR(1238) + string(global::json_line) + /*", column "*/ STR(1239) + string(global::json_column);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1279));
				show_message(msg);
				window_set_caption(/*""*/ STR(0));
				return IntType(0);
			}
			
		}
		else
			language_load_legacy(fn, map);
		
		if (!reload && map != global::language_english_map)
		{
			IntType missingkeyslist;
			VarType key;
			missingkeyslist = ds_list_create();
			key = ds_map_find_first(global::language_english_map);
			while (!is_undefined(key))
			{
				if (is_undefined(DsMap(map).Value(key)))
					ds_list_add({ missingkeyslist, key });
				key = ds_map_find_next(global::language_english_map, key);
			}
			
			if (ds_list_size(missingkeyslist) > IntType(0))
			{
				ds_list_sort(missingkeyslist, true);
				VarType msg = /*"The following texts are missing in the translation and will display as English:\n"*/ STR(1281);
				for (IntType i = IntType(0); i < ds_list_size(missingkeyslist); i++)
					msg += DsList(missingkeyslist).Value(i) + /*": "*/ STR(1061) + string_replace_all(DsMap(global::language_english_map).Value(DsList(missingkeyslist).Value(i)), /*"\n"*/ STR(982), /*"\\n"*/ STR(1257)) + /*"\n"*/ STR(982);
				log({ msg });
				window_set_caption(/*"Error"*/ STR(1279));
				show_message(/*"Some texts are missing in the translation and will display as English. See the log for details:\n"*/ STR(1282) + log_file);
				window_set_caption(/*"Mine-imator"*/ STR(19));
			}
		}
		return 0.0;
	}
	
	RealType language_load_legacy(VarType fn, IntType map)
	{
		if (!file_exists_lib(fn))
			return IntType(0);
		file_copy_lib(fn, temp_file);
		IntType f = file_text_open_read(temp_file);
		while (!file_text_eof(f))
		{
			StringType line;
			IntType commapos;
			line = file_text_read_string(f);
			commapos = string_pos(/*":"*/ STR(796), line);
			if (commapos > IntType(0))
			{
				StringType key, val;
				key = string_copy(line, IntType(1), (IntType)(commapos - IntType(1)));
				val = string_delete(line, IntType(1), commapos + IntType(1));
				DsMap(map)[key] = val;
			}
			file_text_readln(f);
		}
		
		file_text_close(f);
		return 0.0;
	}
	
	RealType language_load_map(StringType pre, VarType smap, IntType dmap)
	{
		VarType key;
		if (!ds_map_valid(smap))
			return IntType(0);
		key = ds_map_find_first((IntType)(smap));
		while (!is_undefined(key))
		{
			if (string_contains(key, /*"/"*/ STR(16)))
				language_load_map(pre + string_replace(key, /*"/"*/ STR(16), /*""*/ STR(0)), DsMap(smap).Value(key), dmap);
			else
				DsMap(dmap)[pre + key] = DsMap(smap).Value(key);
			
			key = ds_map_find_next((IntType)(smap), key);
		}
		
		return 0.0;
	}
	
	void language_remove(VarType fn)
	{
		StringType filename = filename_name(fn);
		withAll (obj_language, noone)
		{
			if (ObjType(obj_language, self->id)->filename == filename)
			{
				instance_destroy(ScopeAny(self));
				break;
			}
		}
		
	}
	
	BoolType legacy_startup()
	{
		log({ /*"Loading legacy file"*/ STR(1283) });
		IntType map = json_load({ legacy_file });
		if (!ds_map_valid(map))
		{
			log({ /*"Error loading legacy.midata"*/ STR(1284) });
			return false;
		}
		global::legacy_model_id_05_map = DsMap(map).Value(/*"legacy_model_id_05"*/ STR(1285));
		global::legacy_model_id_06_map = DsMap(map).Value(/*"legacy_model_id_06"*/ STR(1286));
		global::legacy_model_id_100_demo_map = DsMap(map).Value(/*"legacy_model_id_100_demo"*/ STR(1287));
		ds_map_merge(global::legacy_model_id_05_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1288)));
		ds_map_merge(global::legacy_model_id_06_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1288)));
		ds_map_merge(global::legacy_model_id_100_demo_map, DsMap(map).Value(/*"legacy_model_id"*/ STR(1288)));
		global::legacy_model_part_map = DsMap(map).Value(/*"legacy_model_part"*/ STR(1289));
		global::legacy_model_name_map = DsMap(map).Value(/*"legacy_model_name"*/ STR(1290));
		global::legacy_block_set[IntType(255)] = false;
		global::legacy_block_id = DsMap(map).Value(/*"legacy_block_id"*/ STR(1291));
		global::legacy_block_texture_name_map = DsMap(map).Value(/*"legacy_block_texture_name"*/ STR(1292));
		global::legacy_block_05_texture_list = DsMap(map).Value(/*"legacy_block_05_textures"*/ STR(1293));
		global::legacy_block_07_demo_texture_list = DsMap(map).Value(/*"legacy_block_07_demo_textures"*/ STR(1294));
		global::legacy_block_100_texture_list = DsMap(map).Value(/*"legacy_block_100_textures"*/ STR(1295));
		for (IntType i = IntType(0); i < IntType(256); i++)
		{
			for (IntType d = IntType(0); d < IntType(16); d++)
			{
				global::legacy_block_obj[i][d] = null_;
				global::legacy_block_state_id[i][d] = IntType(0);
				global::legacy_block_mc_id[i][d] = /*""*/ STR(0);
			}
		}
		global::legacy_item_texture_name_map = DsMap(map).Value(/*"legacy_item_texture_name"*/ STR(1296));
		global::legacy_biomes_map = DsMap(map).Value(/*"legacy_biomes"*/ STR(1297));
		global::legacy_biomes_ids_map = ds_int_map_create();
		VarType key = ds_map_find_first((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1298))));
		while (!is_undefined(key))
		{
			DsMap(global::legacy_biomes_ids_map)[string_get_real(key)] = ds_map_find_value((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1298))), key);
			key = ds_map_find_next((IntType)(DsMap(map).Value(/*"legacy_biome_ids"*/ STR(1298))), key);
		}
		
		global::biomes_ids_map = ds_int_map_create();
		key = ds_map_find_first((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1299))));
		while (!is_undefined(key))
		{
			DsMap(global::biomes_ids_map)[string_get_real(key)] = ds_map_find_value((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1299))), key);
			key = ds_map_find_next((IntType)(DsMap(map).Value(/*"biome_ids"*/ STR(1299))), key);
		}
		
		global::legacy_model_names_map = DsMap(map).Value(/*"legacy_model_names"*/ STR(1300));
		global::legacy_model_states_map = DsMap(map).Value(/*"legacy_model_states"*/ STR(1301));
		global::legacy_model_state_values_map = DsMap(map).Value(/*"legacy_model_state_values"*/ STR(1302));
		global::legacy_block_names_map = DsMap(map).Value(/*"legacy_block_names"*/ STR(1303));
		global::legacy_particles_map = DsMap(map).Value(/*"legacy_particles"*/ STR(1304));
		return true;
	}
	
	RealType lengthdir_z(VarType length, VarType dir)
	{
		return -lengthdir_y(length, dir);
	}
	
	BoolType lib_startup()
	{
		global::file_copy_temp = false;
		if (is_cpp())
			return true;
		log({ /*"External library init"*/ STR(1305) });
		StringType libpath, pathfile, pathmovie, pathwindow;
		libpath = /*"Data/Libraries/"*/ STR(1306);
		pathfile = libpath + /*"file.dll"*/ STR(1307);
		pathmovie = libpath + /*"movie.dll"*/ STR(1308);
		pathwindow = libpath + /*"window.dll"*/ STR(1309);
		if (!file_exists(pathfile))
			return missing_file(pathfile);
		if (!file_exists(pathmovie))
			return missing_file(pathmovie);
		if (!file_exists(pathwindow))
			return missing_file(pathwindow);
		log({ /*"External library"*/ STR(1310), pathwindow });
		global::lib_window_maximize = external_define({ pathwindow, /*"window_maximize"*/ STR(1311), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_window_set_focus = external_define({ pathwindow, /*"window_set_focus"*/ STR(1312), dll_cdecl, ty_real, IntType(1), ty_string });
		log({ /*"External library"*/ STR(1310), pathfile });
		global::file_copy_temp = true;
		global::lib_open_url = external_define({ pathfile, /*"open_url"*/ STR(1313), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_execute = external_define({ pathfile, /*"execute"*/ STR(1139), dll_cdecl, ty_real, IntType(3), ty_string, ty_string, ty_real });
		global::lib_unzip = external_define({ pathfile, /*"unzip"*/ STR(1314), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_gzunzip = external_define({ pathfile, /*"gzunzip"*/ STR(1315), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_rename = external_define({ pathfile, /*"file_rename"*/ STR(1316), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_copy = external_define({ pathfile, /*"file_copy"*/ STR(1317), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_file_delete = external_define({ pathfile, /*"file_delete"*/ STR(1318), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_file_exists = external_define({ pathfile, /*"file_exists"*/ STR(1319), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_create = external_define({ pathfile, /*"directory_create"*/ STR(1320), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_delete = external_define({ pathfile, /*"directory_delete"*/ STR(1321), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_directory_exists = external_define({ pathfile, /*"directory_exists"*/ STR(1322), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_json_file_convert_unicode = external_define({ pathfile, /*"json_file_convert_unicode"*/ STR(1323), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		log({ /*"External library"*/ STR(1310), pathmovie });
		global::lib_movie_init = external_define({ pathmovie, /*"movie_init"*/ STR(1324), dll_cdecl, ty_real, IntType(0) });
		global::lib_movie_set = external_define({ pathmovie, /*"movie_set"*/ STR(1325), dll_cdecl, ty_real, IntType(5), ty_real, ty_real, ty_real, ty_real, ty_real });
		global::lib_movie_start = external_define({ pathmovie, /*"movie_start"*/ STR(1326), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_movie_audio_file_decode = external_define({ pathmovie, /*"movie_audio_file_decode"*/ STR(1327), dll_cdecl, ty_real, IntType(2), ty_string, ty_string });
		global::lib_movie_audio_file_add = external_define({ pathmovie, /*"movie_audio_file_add"*/ STR(1328), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_movie_audio_sound_add = external_define({ pathmovie, /*"movie_audio_sound_add"*/ STR(1329), dll_cdecl, ty_real, IntType(6), ty_real, ty_real, ty_real, ty_real, ty_real, ty_real });
		global::lib_movie_frame = external_define({ pathmovie, /*"movie_frame"*/ STR(1330), dll_cdecl, ty_real, IntType(1), ty_string });
		global::lib_movie_done = external_define({ pathmovie, /*"movie_done"*/ STR(1331), dll_cdecl, ty_real, IntType(0) });
		log({ /*"External library"*/ STR(1310), /*"movie init"*/ STR(1332) });
		lib_movie_init();
		math_lib_startup(pathwindow);
		return true;
	}
	
	void list_destroy(ScopeAny self, IntType list)
	{
		instance_destroy(self, { list });
	}
	
	void list_event_destroy(Scope<obj_list> self)
	{
		for (IntType i = IntType(0); i < ds_list_size(self->item); i++)
			instance_destroy(ScopeAny(self), { DsList(self->item).Value(i) });
		ds_list_destroy(self->item);
	}
	
	IntType list_init(ScopeAny self, VarType name)
	{
		list_init_start();
		if (sVar(menu_model_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_model_state), value_amount); i++)
				list_item_add(minecraft_asset_get_name(/*"modelstatevalue"*/ STR(786), idVar(sInt(menu_model_state), value_name).Value(i)), idVar(sInt(menu_model_state), value_name).Value(i));
		}
		if (sVar(menu_block_current) != null_)
		{
			for (IntType i = IntType(0); i < idReal(sInt(menu_block_state), value_amount); i++)
				list_item_add(minecraft_asset_get_name(/*"blockstatevalue"*/ STR(805), idVar(sInt(menu_block_state), value_name).Value(i)), idVar(sInt(menu_block_state), value_name).Value(i));
		}
		if (sVar(menu_model_current) != null_ || sVar(menu_block_current) != null_)
			return list_init_end(self);
		switch (StringType(name).id)
		{
			case 772: // benchskin
			case 773: // benchskinmaterial
			case 774: // benchskinnormal
			case 776: // benchspblocktex
			case 777: // benchspblocktexmaterial
			case 778: // benchspblocktexnormal
			case 779: // benchbodypartskin
			case 780: // benchbodypartskinmaterial
			case 781: // benchbodypartskinnormal
			case 1333: // libraryskin
			case 1334: // libraryskinmaterial
			case 1335: // libraryskinnormal
			case 1336: // libraryspblocktex
			case 1337: // libraryspblocktexmaterial
			case 1338: // libraryspblocktexnormal
			case 1339: // librarybodypartskin
			case 1340: // librarybodypartskinmaterial
			case 1341: // librarybodypartskinnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(760)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0 && (name == /*"benchskin"*/ STR(772) || name == /*"libraryskin"*/ STR(1333)))
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1343) }), null_, icons_DOWNLOAD });
				VarType tex;
				withOne (obj_resource, global::mc_res, self->id)
				{
					if (string_contains(name, /*"material"*/ STR(652)))
						tex = res_get_model_texture_material(ScopeAny(self), model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
					else
						if (string_contains(name, /*"normal"*/ STR(641)))
							tex = res_get_model_tex_normal(ScopeAny(self), model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
						else
							tex = res_get_model_texture(ScopeAny(self), model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
					
					
				}
				
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, tex });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					withOne (Object, res, self->id)
					{
						if (string_contains(name, /*"material"*/ STR(652)))
							tex = res_get_model_texture_material(self, model_part_get_texture_material_name(idVar(temp, model_file), idInt(temp, model_texture_material_name_map)));
						else
							if (string_contains(name, /*"normal"*/ STR(641)))
								tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(idVar(temp, model_file), idInt(temp, model_tex_normal_name_map)));
							else
								tex = res_get_model_texture(self, model_part_get_texture_name(idVar(temp, model_file), idInt(temp, model_texture_name_map)));
						
						
					}
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 818: // benchmodeltex
			case 1344: // librarymodeltex
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(760)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1343) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, block_sheet_texture) == null_)
							texobj = global::mc_res;
					}
					else
					{
						if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
							texobj = global::mc_res;
					}
					
				}
				if (texobj != null_)
				{
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, sVar(model_file));
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 819: // benchmodeltexmaterial
			case 1345: // librarymodeltexmaterial
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(760)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1343) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, block_sheet_texture_material) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 820: // benchmodeltexnormal
			case 1346: // librarymodeltexnormal
			{
				VarType temp;
				if (string_contains(ObjType(obj_menu, sVar(menu_current))->menu_name, /*"bench"*/ STR(760)))
					temp = sInt(bench_settings);
				else
					temp = global::temp_edit;
				
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				if (idVar(temp, model_file) != null_ && idVar(idVar(temp, model_file), player_skin) > 0)
					menu_add_item({ e_option_DOWNLOAD_SKIN, text_get({ /*"libraryskindownload"*/ STR(1343) }), null_, icons_DOWNLOAD });
				VarType texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_format) == e_model_format_BLOCK)
					{
						if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, block_sheet_tex_normal) == null_)
							texobj = global::mc_res;
					}
				}
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
					{
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
					}
					else
					{
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, sVar(model_file));
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == idVar(temp, model) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 791: // benchscenery
			case 1347: // libraryscenery
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				menu_add_item({ e_option_IMPORT_WORLD, text_get({ /*"librarysceneryimport"*/ STR(1348) }), null_, icons_SCENERY });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SCENERY || idVar(res, type) == e_res_type_FROM_WORLD)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 792: // benchblocktex
			case 793: // benchblocktexmaterial
			case 794: // benchblocktexnormal
			case 1349: // libraryblocktex
			case 1350: // libraryblocktexmaterial
			case 1351: // libraryblocktexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idInt(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 801: // benchitemtex
			case 802: // benchitemtexmaterial
			case 803: // benchitemtexnormal
			case 1352: // libraryitemtex
			case 1353: // libraryitemtexmaterial
			case 1354: // libraryitemtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 782: // benchbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)); p++)
				{
					VarType part = DsList(idInt(ObjType(obj_bench_settings, sInt(bench_settings))->model_file, file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(787), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 1355: // templateeditorbodypart
			{
				for (IntType p = IntType(0); p < ds_list_size(idInt(idVar(global::temp_edit, model_file), file_part_list)); p++)
				{
					VarType part = DsList(idInt(idVar(global::temp_edit, model_file), file_part_list)).Value(p);
					menu_add_item({ ObjType(obj_model_part, part)->name, minecraft_asset_get_name(/*"modelpart"*/ STR(787), ObjType(obj_model_part, part)->name) });
				}
				break;
			}
			
			case 807: // benchtextfont
			case 1356: // librarytextfont
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 810: // benchshapetype
			{
				for (IntType i = IntType(0); i < e_shape_type_amount; i++)
					menu_add_item({ i, text_get({ /*"type"*/ STR(814) + DsList(global::tl_type_name_list).Value(e_tl_type_CUBE + i) }) });
				break;
			}
			
			case 811: // benchshapetex
			case 812: // benchshapetexmaterial
			case 813: // benchshapetexnormal
			case 1357: // libraryshapetex
			case 1358: // libraryshapetexmaterial
			case 1359: // libraryshapetexnormal
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"benchshapetex"*/ STR(811) || name == /*"libraryshapetex"*/ STR(1357))
				{
					withAll (obj_timeline, self->id)
						if (self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 771: // benchmodel
			case 1360: // librarymodel
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_MODEL)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1361: // particleeditorspawnregiontype
			{
				menu_add_item({ /*"sphere"*/ STR(521), text_get({ /*"particleeditorspawnregiontypesphere"*/ STR(1362) }), null_, icons_BOUNDARY_CIRCLE });
				menu_add_item({ /*"cube"*/ STR(3), text_get({ /*"particleeditorspawnregiontypecube"*/ STR(1363) }), null_, icons_BOUNDARY_CUBE });
				menu_add_item({ /*"box"*/ STR(1364), text_get({ /*"particleeditorspawnregiontypebox"*/ STR(1365) }), null_, icons_BOUNDARY_BOX });
				menu_add_item({ /*"path"*/ STR(528), text_get({ /*"particleeditorspawnregiontypepath"*/ STR(1366) }), null_, icons_PATH });
				break;
			}
			
			case 1367: // particleeditorspawnregionpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1368: // particleeditorboundingbox
			{
				menu_add_item({ /*"none"*/ STR(917), text_get({ /*"particleeditorboundingboxtypenone"*/ STR(1369) }) });
				menu_add_item({ /*"spawn"*/ STR(1370), text_get({ /*"particleeditorboundingboxtypespawn"*/ STR(1371) }) });
				menu_add_item({ /*"ground"*/ STR(135), text_get({ /*"particleeditorboundingboxtypeground"*/ STR(1372) }) });
				menu_add_item({ /*"custom"*/ STR(592), text_get({ /*"particleeditorboundingboxtypecustom"*/ STR(1373) }) });
				break;
			}
			
			case 1374: // particleeditortypetemp
			{
				menu_add_item({ particle_template, text_get({ /*"particleeditortypetemplate"*/ STR(1375) }) });
				menu_add_item({ particle_sheet, text_get({ /*"particleeditortypespritesheet"*/ STR(1376) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(lib_list), display_list)); i++)
				{
					VarType temp = DsList(idInt(sInt(lib_list), display_list)).Value(i);
					if (idVar(temp, type) != e_temp_type_PARTICLE_SPAWNER)
						menu_add_item({ temp, idVar(temp, display_name) });
				}
				break;
			}
			
			case 1377: // particleeditortypespritetex
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->particles_texture.Value(img) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idArr(res, particles_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, particles_texture).Value(img) });
				}
				break;
			}
			
			case 1378: // particleeditortypespritetemplatepack
			{
				VarType img = idVar(global::ptype_edit, sprite_tex_image);
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != global::mc_res && idVar(res, type) == e_res_type_PACK)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1379: // particleeditortypespritetemplate
			{
				for (IntType i = IntType(0); i < ds_list_size(global::particle_template_list); i++)
				{
					VarType temp = DsList(global::particle_template_list).Value(i);
					if (ObjType(obj_particle_template, temp)->animated)
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1379) + ObjType(obj_particle_template, temp)->name }) + /*" "*/ STR(17) + text_get({ /*"particleeditortypespritetemplateframes"*/ STR(1380), ObjType(obj_particle_template, temp)->frames }) });
					else
						menu_add_item({ ObjType(obj_particle_template, temp)->name, text_get({ /*"particleeditortypespritetemplate"*/ STR(1379) + ObjType(obj_particle_template, temp)->name }) });
					
				}
				break;
			}
			
			case 1381: // backgroundimage
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1382: // backgroundimagetype
			{
				menu_add_item({ /*"image"*/ STR(90), text_get({ /*"backgroundimagetypeimage"*/ STR(1383) }) });
				menu_add_item({ /*"sphere"*/ STR(521), text_get({ /*"backgroundimagetypesphere"*/ STR(1384) }) });
				menu_add_item({ /*"box"*/ STR(1364), text_get({ /*"backgroundimagetypebox"*/ STR(1385) }) });
				break;
			}
			
			case 1386: // backgroundskysuntex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->sun_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, sun_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, sun_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1387: // backgroundskymoontex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->moon_texture.Value(sVar(background_sky_moon_phase)) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idArr(res, moon_texture).Value(IntType(0)))
						menu_add_item({ res, idVar(res, display_name), idArr(res, moon_texture).Value(sVar(background_sky_moon_phase)) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1388: // backgroundskymoonphase
			{
				for (IntType p = IntType(0); p < IntType(8); p++)
					menu_add_item({ p, text_get({ /*"backgroundskymoonphase"*/ STR(1388) + string(p + IntType(1)) }), idArr(sVar(background_sky_moon_tex), moon_texture).Value(p) });
				break;
			}
			
			case 1389: // backgroundskycloudstex
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->clouds_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res == global::mc_res)
						continue;
					if (idVar(res, clouds_texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, clouds_texture) });
					else
						if (idVar(res, texture) > 0)
							menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					
				}
				break;
			}
			
			case 1390: // backgroundgroundtex
			case 1391: // backgroundgroundtexmaterial
			case 1392: // backgroundgroundtexnormal
			{
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, icons_FOLDER });
				menu_add_item({ global::mc_res, ObjType(obj_resource, global::mc_res)->display_name, ObjType(obj_resource, global::mc_res)->block_preview_texture });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (name == /*"backgroundgroundtexmaterial"*/ STR(1391))
					{
						if (res != global::mc_res && idInt(res, block_sheet_texture_material) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					}
					else
						if (name == /*"backgroundgroundtexnormal"*/ STR(1392))
						{
							if (res != global::mc_res && idInt(res, block_sheet_tex_normal) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
						else
						{
							if (res != global::mc_res && idInt(res, block_sheet_texture) != null_)
								menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
						}
					
					
				}
				break;
			}
			
			case 1393: // resourcespackimage
			{
				menu_add_item({ /*"preview"*/ STR(1394), text_get({ /*"resourcespackpreview"*/ STR(1395) }) });
				menu_add_item({ /*"modeltextures"*/ STR(1396), text_get({ /*"resourcespackmodeltextures"*/ STR(1397) }) });
				menu_add_item({ /*"blocksheet"*/ STR(537), text_get({ /*"resourcespackblocksheet"*/ STR(1398) }) });
				menu_add_item({ /*"colormap"*/ STR(1399), text_get({ /*"resourcespackcolormap"*/ STR(1400) }) });
				menu_add_item({ /*"itemsheet"*/ STR(535), text_get({ /*"resourcespackitemsheet"*/ STR(1401) }) });
				menu_add_item({ /*"particlesheet"*/ STR(539), text_get({ /*"resourcespackparticlesheet"*/ STR(1402) }) });
				menu_add_item({ /*"suntexture"*/ STR(1403), text_get({ /*"resourcespacksuntexture"*/ STR(1404) }) });
				menu_add_item({ /*"moontexture"*/ STR(1405), text_get({ /*"resourcespackmoontexture"*/ STR(1406) }) });
				menu_add_item({ /*"cloudtexture"*/ STR(1407), text_get({ /*"resourcespackcloudtexture"*/ STR(1408) }) });
				break;
			}
			
			case 1409: // resourcespackmaterial
			{
				menu_add_item({ /*"diffuse"*/ STR(647), text_get({ /*"resourcespackmaterialdiffuse"*/ STR(1410) }) });
				menu_add_item({ /*"material"*/ STR(652), text_get({ /*"resourcespackmaterialmaterial"*/ STR(1411) }) });
				menu_add_item({ /*"normal"*/ STR(641), text_get({ /*"resourcespackmaterialnormal"*/ STR(1412) }) });
				break;
			}
			
			case 1413: // resourcespackimagemodeltexture
			{
				for (IntType t = IntType(0); t < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list)); t++)
					menu_add_item({ DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t), DsList(ObjType(obj_minecraft_assets, global::mc_assets)->model_texture_list).Value(t) });
				break;
			}
			
			case 1414: // resourcesscenerystructurepalette
			{
				for (IntType p = IntType(0); p < idInt(global::res_edit, scenery_palette_size); p++)
					menu_add_item({ p, text_get({ /*"resourcesscenerystructurepalettenumber"*/ STR(1415), p + IntType(1) }) });
				break;
			}
			
			case 1416: // frameeditorpath
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				withAll (obj_timeline, self->id)
				{
					if (self->type == e_tl_type_PATH)
						menu_add_item({ self->id, self->display_name });
				}
				
				break;
			}
			
			case 1417: // frameeditorchartex
			case 1418: // frameeditorspblocktex
			case 1419: // frameeditorbodyparttex
			case 1420: // frameeditormodeltex
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex), type) == e_res_type_PACK)
								texobj = sVar(block_tex);
							else
								texobj = sVar(model_tex);
							
						}
						
					}
				}
				if (texobj == null_)
				{
					texobj = idVar(temp, model);
					if (texobj != null_)
					{
						if (idInt(texobj, model_format) == e_model_format_BLOCK)
						{
							if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, block_sheet_texture) == null_)
								texobj = global::mc_res;
						}
						else
						{
							if (idInt(texobj, model_texture_map) == null_ && idInt(texobj, model_texture) == null_)
								texobj = global::mc_res;
						}
						
					}
				}
				if (texobj != null_)
				{
					VarType modelfile = idVar(temp, model_file);
					if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
						modelfile = idVar(global::tl_edit, model_part);
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, texobj, modelfile);
					
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1421: // frameeditorchartexmaterial
			case 1422: // frameeditorspblocktexmaterial
			case 1423: // frameeditorbodyparttexmaterial
			case 1424: // frameeditormodeltexmaterial
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_material);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_material), type) == e_res_type_PACK)
								texobj = sVar(block_tex_material);
							else
								texobj = sVar(model_tex_material);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_texture_material_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_material_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_material_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1425: // frameeditorchartexnormal
			case 1426: // frameeditorspblocktexnormal
			case 1427: // frameeditorbodyparttexnormal
			case 1428: // frameeditormodeltexnormal
			{
				VarType temp = idVar(global::tl_edit, temp);
				VarType texobj = idVar(temp, model_tex_normal);
				if ((idVar(global::tl_edit, type) == e_tl_type_SPECIAL_BLOCK || idVar(global::tl_edit, type) == e_tl_type_BODYPART) && idVar(global::tl_edit, part_root) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_root), type) == e_tl_type_SCENERY)
					{
						withOne (Object, idVar(idVar(global::tl_edit, part_root), temp), self->id)
						{
							if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK)
								texobj = sVar(block_tex_normal);
							else
								texobj = sVar(model_tex_normal);
							
						}
						
					}
				}
				if (texobj == null_)
					texobj = idVar(temp, model);
				if (texobj != null_)
				{
					if (idInt(texobj, model_tex_normal_map) == null_ && idInt(texobj, model_texture) == null_)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
					else
					{
						VarType modelfile = idVar(temp, model_file);
						if (idVar(global::tl_edit, type) == e_temp_type_BODYPART)
							modelfile = idVar(global::tl_edit, model_part);
						VarType tex;
						withOne (Object, temp, self->id)
							tex = temp_get_model_tex_normal_preview(self, texobj, modelfile);
						
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), tex });
					}
					
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }), null_ });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if ((Obj(temp)->subAssetId != ID_obj_timeline && res == idVar(temp, model)) || res == texobj)
						continue;
					VarType tex;
					withOne (Object, temp, self->id)
						tex = temp_get_model_tex_normal_preview(self, res, sVar(model_file));
					
					if (tex != null_)
						menu_add_item({ res, idVar(res, display_name), tex });
				}
				break;
			}
			
			case 1429: // frameeditorblocktex
			case 1430: // frameeditorblocktexmaterial
			case 1431: // frameeditorblocktexnormal
			{
				VarType texobj = null_;
				if (name == /*"frameeditorblocktexmaterial"*/ STR(1430))
					texobj = idVar(idVar(global::tl_edit, temp), block_tex_material);
				else
					if (name == /*"frameeditorblocktexnormal"*/ STR(1431))
						texobj = idVar(idVar(global::tl_edit, temp), block_tex_normal);
					else
						if (name == /*"frameeditorblocktex"*/ STR(1429))
							texobj = idVar(idVar(global::tl_edit, temp), block_tex);
				
				
				if (idVar(global::tl_edit, type) == e_tl_type_BLOCK && idVar(global::tl_edit, part_of) != null_)
				{
					if (idVar(idVar(global::tl_edit, part_of), type) == e_tl_type_SCENERY)
					{
						VarType temp = idVar(idVar(global::tl_edit, part_of), temp);
						withOne (Object, temp, self->id)
						{
							if (name == /*"frameeditorblocktexmaterial"*/ STR(1430))
							{
								if (idVar(sVar(block_tex_material), type) == e_res_type_PACK || idVar(sVar(block_tex_material), type) == e_res_type_BLOCK_SHEET)
									texobj = sVar(block_tex_material);
							}
							else
								if (name == /*"frameeditorblocktexnormal"*/ STR(1431))
								{
									if (idVar(sVar(block_tex_normal), type) == e_res_type_PACK || idVar(sVar(block_tex_normal), type) == e_res_type_BLOCK_SHEET)
										texobj = sVar(block_tex_normal);
								}
								else
									if (name == /*"frameeditorblocktex"*/ STR(1429))
									{
										if (idVar(sVar(block_tex), type) == e_res_type_PACK || idVar(sVar(block_tex), type) == e_res_type_BLOCK_SHEET)
											texobj = sVar(block_tex);
									}
							
							
						}
						
					}
				}
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idInt(res, block_sheet_texture) != null_)
						menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
				}
				break;
			}
			
			case 1432: // frameeditoritemtex
			case 1433: // frameeditoritemtexmaterial
			case 1434: // frameeditoritemtexnormal
			{
				VarType texobj;
				if (name == /*"frameeditoritemtexmaterial"*/ STR(1433))
					texobj = idVar(idVar(global::tl_edit, temp), item_tex_material);
				else
					if (name == /*"frameeditoritemtexnormal"*/ STR(1434))
						texobj = idVar(idVar(global::tl_edit, temp), item_tex_normal);
					else
						texobj = idVar(idVar(global::tl_edit, temp), item_tex);
				
				
				if (idVar(texobj, type) == e_res_type_TEXTURE)
					menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), idVar(texobj, texture) });
				else
					if (idInt(texobj, item_sheet_texture) != null_)
						menu_add_item({ texobj, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), idInt(texobj, block_preview_texture) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_TEXTURE)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
					else
						if (idInt(res, item_sheet_texture) != null_)
							menu_add_item({ res, idVar(res, display_name), idInt(res, block_preview_texture) });
					
				}
				break;
			}
			
			case 1435: // frameeditorshapetex
			case 1436: // frameeditorshapetexmaterial
			case 1437: // frameeditorshapetexnormal
			{
				VarType texobj;
				if (idVar(global::tl_edit, temp) == null_)
					texobj = null_;
				else
					if (name == /*"frameeditorshapetex"*/ STR(1435))
						texobj = idVar(idVar(global::tl_edit, temp), shape_tex);
					else
						if (name == /*"frameeditorshapetexmaterial"*/ STR(1436))
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_material);
						else
							texobj = idVar(idVar(global::tl_edit, temp), shape_tex_normal);
					
				
				
				if (texobj != null_)
				{
					if (Obj(texobj)->subAssetId == ID_obj_timeline)
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }) });
					else
						menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(texobj, display_name) }), idVar(texobj, texture) });
					
					menu_add_item({ IntType(0), text_get({ /*"listnone"*/ STR(795) }) });
				}
				else
					menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
				
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != texobj && idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				if (name == /*"frameeditorshapetex"*/ STR(1435) && idVar(global::tl_edit, type) != e_tl_type_PATH)
				{
					withAll (obj_timeline, self->id)
						if (self->id != texobj && self->type == e_tl_type_CAMERA)
							menu_add_item({ self->id, self->display_name });
					
				}
				break;
			}
			
			case 1438: // frameeditorcameralensdirttexture
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), text_get({ /*"listnone"*/ STR(795) }) }) });
				menu_add_item({ e_option_BROWSE, text_get({ /*"listbrowse"*/ STR(1342) }), null_, null_, ID_action_tl_frame_cam_lens_dirt_tex_browse });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, texture) > 0)
						menu_add_item({ res, idVar(res, display_name), idVar(res, texture) });
				}
				break;
			}
			
			case 1439: // frameeditorsoundfile
			{
				menu_add_item({ null_, text_get({ /*"listnone"*/ STR(795) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (idVar(res, type) == e_res_type_SOUND)
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1440: // frameeditortextfont
			{
				menu_add_item({ null_, text_get({ /*"listdefault"*/ STR(821), idVar(idVar(idVar(global::tl_edit, temp), text_font), display_name) }) });
				for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(res_list), display_list)); i++)
				{
					VarType res = DsList(idInt(sInt(res_list), display_list)).Value(i);
					if (res != idVar(idVar(global::tl_edit, temp), text_font) && font_exists(idInt(res, font)))
						menu_add_item({ res, idVar(res, display_name) });
				}
				break;
			}
			
			case 1441: // settingsminecraftversion
			{
				ArrType files = file_find(minecraft_directory, /*".midata"*/ STR(96));
				for (IntType i = IntType(0); i < array_length(VarType::CreateRef(files)); i++)
				{
					VarType fn = filename_new_ext(filename_name(files.Value(i)), /*""*/ STR(0));
					menu_add_item({ fn, fn });
				}
				break;
			}
			
			case 1442: // rendershadowssunbuffersize
			case 1443: // rendershadowsspotbuffersize
			case 1444: // rendershadowspointbuffersize
			{
				menu_add_item({ IntType(256), text_get({ /*"rendershadowsbuffersize256"*/ STR(1445) }) + /*" (256x256)"*/ STR(1446) });
				menu_add_item({ IntType(512), text_get({ /*"rendershadowsbuffersize512"*/ STR(1447) }) + /*" (512x512)"*/ STR(1448) });
				menu_add_item({ IntType(1024), text_get({ /*"rendershadowsbuffersize1024"*/ STR(1449) }) + /*" (1024x1024)"*/ STR(1450) });
				menu_add_item({ IntType(2048), text_get({ /*"rendershadowsbuffersize2048"*/ STR(1451) }) + /*" (2048x2048)"*/ STR(1452) });
				menu_add_item({ IntType(4096), text_get({ /*"rendershadowsbuffersize4096"*/ STR(1453) }) + /*" (4096x4096)"*/ STR(1454) });
				if (name != /*"rendershadowspointbuffersize"*/ STR(1444))
					menu_add_item({ IntType(8192), text_get({ /*"rendershadowsbuffersize8192"*/ STR(1455) }) + /*" (8192x8192)"*/ STR(1456) });
				break;
			}
			
			case 1457: // settingswatermarkpositionx
			{
				menu_add_item({ /*"left"*/ STR(189), text_get({ /*"settingswatermarkleft"*/ STR(1458) }) });
				menu_add_item({ /*"center"*/ STR(1459), text_get({ /*"settingswatermarkcenter"*/ STR(1460) }) });
				menu_add_item({ /*"right"*/ STR(190), text_get({ /*"settingswatermarkright"*/ STR(1461) }) });
				break;
			}
			
			case 1462: // settingswatermarkpositiony
			{
				menu_add_item({ /*"top"*/ STR(188), text_get({ /*"settingswatermarktop"*/ STR(1463) }) });
				menu_add_item({ /*"center"*/ STR(1459), text_get({ /*"settingswatermarkcenter"*/ STR(1460) }) });
				menu_add_item({ /*"bottom"*/ STR(187), text_get({ /*"settingswatermarkbottom"*/ STR(1464) }) });
				break;
			}
			
			case 1465: // projectvideosize
			case 1466: // exportmovievideosize
			case 1467: // exportimageimagesize
			case 1468: // frameeditorcameravideosize
			{
				if (ObjType(obj_menu, sVar(menu_current))->menu_name == /*"frameeditorcameravideosize"*/ STR(1468))
					menu_add_item({ null_, text_get({ /*"frameeditorcameravideosizeuseproject"*/ STR(1469) }) });
				for (IntType i = IntType(0); i < ds_list_size(global::videotemplate_list); i++)
					withOne (Object, DsList(global::videotemplate_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"projectvideosizetemplate"*/ STR(1470) + idVar(self->id, name) }) + /*" ("*/ STR(1149) + string(sVar(width)) + /*"x"*/ STR(859) + string(sVar(height)) + /*")"*/ STR(1125) });
				
				menu_add_item({ IntType(0), text_get({ /*"projectvideosizecustom"*/ STR(1471) }) });
				break;
			}
			
			case 1472: // exportmovieformat
			{
				menu_add_item({ /*"mp4"*/ STR(57), text_get({ /*"exportmovieformatmp4"*/ STR(1473) }) });
				menu_add_item({ /*"mov"*/ STR(58), text_get({ /*"exportmovieformatmov"*/ STR(1474) }) });
				menu_add_item({ /*"wmv"*/ STR(59), text_get({ /*"exportmovieformatwmv"*/ STR(1475) }) });
				menu_add_item({ /*"png"*/ STR(60), text_get({ /*"exportmovieformatpng"*/ STR(1476) }) });
				break;
			}
			
			case 1477: // exportmovievideoquality
			{
				for (IntType i = IntType(0); i < ds_list_size(global::videoquality_list); i++)
					withOne (Object, DsList(global::videoquality_list).Value(i), self->id)
						menu_add_item({ self->id, text_get({ /*"exportmovievideoquality"*/ STR(1477) + idVar(self->id, name) }) });
				
				menu_add_item({ IntType(0), text_get({ /*"exportmovievideoqualitycustom"*/ STR(1478) }) });
				break;
			}
			
			case 1479: // exportmovieframerate
			{
				menu_add_item({ IntType(24), /*"24"*/ STR(1480) });
				menu_add_item({ IntType(30), /*"30"*/ STR(1481) });
				menu_add_item({ IntType(60), /*"60"*/ STR(1482) });
				menu_add_item({ IntType(0), text_get({ /*"exportmovieframeratecustom"*/ STR(1483) }) });
				break;
			}
			
			case 1484: // projectrendersettings
			{
				menu_add_item({ /*""*/ STR(0), text_get({ /*"projectrendersettingscustom"*/ STR(1485) }) });
				menu_add_item({ /*"performance"*/ STR(1486), text_get({ /*"projectrendersettingsperformance"*/ STR(1487) }), null_ });
				menu_add_item({ /*"balanced"*/ STR(1488), text_get({ /*"projectrendersettingsbalanced"*/ STR(1489) }), null_ });
				menu_add_item({ /*"extreme"*/ STR(1490), text_get({ /*"projectrendersettingsextreme"*/ STR(1491) }), null_ });
				StringType file = file_find_first(render_directory + /*"*.mirender"*/ STR(1492), IntType(0));
				while (file != /*""*/ STR(0))
				{
					if (file != /*"performance.mirender"*/ STR(1493) && file != /*"balanced.mirender"*/ STR(1494) && file != /*"extreme.mirender"*/ STR(1495))
						menu_add_item({ filename_change_ext(file, /*""*/ STR(0)), filename_change_ext(file, /*""*/ STR(0)), null_ });
					file = file_find_next();
				}
				
				break;
			}
			
			case 1496: // timelineeditorblendmode
			{
				for (IntType i = IntType(0); i < ds_list_size(global::blend_mode_list); i++)
					menu_add_item({ DsList(global::blend_mode_list).Value(i), text_get({ /*"timelineeditorblendmode"*/ STR(1496) + DsList(global::blend_mode_list).Value(i) }) });
				break;
			}
			
			case 1497: // startupsortby
			{
				list_item_add(text_get({ /*"recentsortdatenewest"*/ STR(1498) }), e_recent_sort_date_newest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortdateoldest"*/ STR(1499) }), e_recent_sort_date_oldest, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortnameaz"*/ STR(1500) }), e_recent_sort_name_az, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				list_item_add(text_get({ /*"recentsortnameza"*/ STR(1501) }), e_recent_sort_name_za, /*""*/ STR(0), null_, null_, null_, ID_action_recent_sort);
				break;
			}
			
			case 1502: // timelinemarkercolor
			{
				for (IntType i = IntType(0); i <= IntType(8); i++)
				{
					list_item_add(text_get({ /*"timelinemarkercolor"*/ STR(1502) + string(i) }), i, /*""*/ STR(0), ID_spr_16, null_, null_, null_);
					ObjType(obj_list_item, global::list_item_last)->thumbnail_blend = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(i);
				}
				break;
			}
			
			case 1503: // settingslanguage
			{
				withAll (obj_language, self->id)
					list_item_add(ObjType(obj_language, self->id)->name, languages_directory + ObjType(obj_language, self->id)->filename, ObjType(obj_language, self->id)->locale, null_, null_, null_, ID_action_setting_language_load);
				
				break;
			}
			
			case 1504: // viewmodepass
			{
				for (IntType i = IntType(0); i < e_render_pass_amount; i++)
					list_item_add(text_get({ /*"viewmodepass"*/ STR(1504) + DsList(global::render_pass_list).Value(i) }), i);
				break;
			}
			
			case 1505: // viewcameramain
			case 1506: // viewcamerasecond
			{
				list_item_add(text_get({ /*"viewcamerawork"*/ STR(1507) }), -IntType(4));
				VarType tlname = (sInt(timeline_camera) == -IntType(4) ? text_get({ /*"viewcamerawork"*/ STR(1507) }) : ObjType(obj_timeline, sInt(timeline_camera))->display_name);
				list_item_add(text_get({ /*"viewcameraactive"*/ STR(1508), tlname }), -IntType(5));
				withAll (obj_timeline, self->id)
					if (self->type == e_tl_type_CAMERA)
						list_item_add(self->display_name, self->id);
				
				break;
			}
			
			case 1509: // worldimportworld
			{
				world_import_world_menu_init();
				break;
			}
			
			case 1510: // worldimportdimension
			{
				world_import_dimension_menu_init();
				break;
			}
			
			case 1511: // settingsinterfacescale
			{
				menu_add_item({ IntType(1), /*"100%"*/ STR(1512) });
				if (interface_scale_default_get() >= IntType(2))
					menu_add_item({ IntType(2), /*"200%"*/ STR(1513) });
				if (interface_scale_default_get() >= IntType(3))
					menu_add_item({ IntType(3), /*"300%"*/ STR(1514) });
				break;
			}
			
			case 1515: // renderalphamode
			case 1516: // timelineeditoralphamode
			{
				if (name == /*"timelineeditoralphamode"*/ STR(1516))
					menu_add_item({ e_alpha_mode_DEFAULT, text_get({ /*"renderalphamodedefault"*/ STR(1517) }) });
				menu_add_item({ e_alpha_mode_HASHED, text_get({ /*"renderalphamodehashed"*/ STR(1518) }) });
				menu_add_item({ e_alpha_mode_BLEND, text_get({ /*"renderalphamodeblend"*/ STR(1519) }) });
				break;
			}
			
			case 1520: // rendertonemapper
			case 1521: // frameeditorcameratonemapper
			{
				menu_add_item({ e_tonemapper_NONE, text_get({ /*"rendertonemappernone"*/ STR(1522) }) });
				menu_add_item({ e_tonemapper_REINHARD, text_get({ /*"rendertonemapperreinhard"*/ STR(1523) }) });
				menu_add_item({ e_tonemapper_ACES, text_get({ /*"rendertonemapperaces"*/ STR(1524) }) });
				break;
			}
			
			case 1525: // armoreditorpatternhelmet
			case 1526: // armoreditorpatternchestplate
			case 1527: // armoreditorpatternleggings
			case 1528: // armoreditorpatternboots
			{
				menu_add_item({ /*"none"*/ STR(917), text_get({ /*"armoreditorpattern"*/ STR(1529) + /*"none"*/ STR(917) }) });
				for (IntType i = IntType(0); i < ds_list_size((IntType)(global::minecraft_armor_trim_pattern_list)); i++)
					menu_add_item({ DsList(global::minecraft_armor_trim_pattern_list).Value(i), text_get({ /*"armoreditorpattern"*/ STR(1529) + DsList(global::minecraft_armor_trim_pattern_list).Value(i) }) });
				break;
			}
			
			case 1530: // armoreditormaterialhelmet
			case 1531: // armoreditormaterialchestplate
			case 1532: // armoreditormaterialleggings
			case 1533: // armoreditormaterialboots
			{
				menu_add_item({ /*"none"*/ STR(917), text_get({ /*"armoreditormaterial"*/ STR(1534) + /*"none"*/ STR(917) }) });
				for (IntType i = IntType(0); i < ds_list_size((IntType)(global::minecraft_armor_trim_material_list)); i++)
					menu_add_item({ DsList(global::minecraft_armor_trim_material_list).Value(i), text_get({ /*"armoreditormaterial"*/ STR(1534) + DsList(global::minecraft_armor_trim_material_list).Value(i) }) });
				break;
			}
			
		}
		
		return list_init_end(self);
	}
	
}
