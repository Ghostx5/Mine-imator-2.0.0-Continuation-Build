/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.16 19:54:52 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void draw_blank(RealType xx, RealType yy, VarType w, VarType h)
	{
		draw_primitive_begin(pr_trianglestrip);
		draw_vertex_texture((IntType)(xx), (IntType)(yy), 0.0, 0.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy), 1.0, 0.0);
		draw_vertex_texture((IntType)(xx), (IntType)(yy + h), 0.0, 1.0);
		draw_vertex_texture((IntType)(xx + w), (IntType)(yy + h), 1.0, 1.0);
		draw_primitive_end();
	}
	
	RealType draw_box(VarType xx, VarType yy, VarType width, VarType height, RealType outline, VarType incolor, VarType inalpha)
	{
		VarType color;
		RealType alpha;
		color = draw_get_color();
		alpha = draw_get_alpha();
		if (!is_undefined(incolor))
		{
			color = incolor;
			alpha *= inalpha;
		}
		if (alpha == IntType(0) || width <= IntType(0) || height <= IntType(0))
			return IntType(0);
		draw_primitive_begin((outline > 0) ? pr_linestrip : pr_trianglefan);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + width), (IntType)(yy), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx + width), (IntType)(yy + height), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy + height), (IntType)(color), alpha);
		draw_vertex_color((IntType)(xx), (IntType)(yy), (IntType)(color), alpha);
		draw_primitive_end();
		return 0.0;
	}
	
	void draw_box_bevel(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, width, height, alpha, light;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		width = argument[IntType(2)];
		height = argument[IntType(3)];
		alpha = argument[IntType(4)];
		light = false;
		if (argument_count > IntType(5))
			light = argument[IntType(5)];
		if (light > 0)
		{
			draw_box(xx, yy, IntType(3), height, false, c_white, .6 * alpha);
			draw_box(xx + width - IntType(3), yy, IntType(3), height, false, c_black, .05 * alpha);
			draw_box(xx, yy + height - IntType(3), width, IntType(3), false, c_black, .1 * alpha);
			draw_box(xx, yy, width, IntType(3), false, c_white, .8 * alpha);
		}
		else
		{
			draw_box(xx, yy, IntType(3), height, false, c_white, .15 * alpha);
			draw_box(xx + width - IntType(3), yy, IntType(3), height, false, c_black, .1 * alpha);
			draw_box(xx, yy + height - IntType(3), width, IntType(3), false, c_black, .2 * alpha);
			draw_box(xx, yy, width, IntType(3), false, c_white, .3 * alpha);
		}
		
	}
	
	RealType draw_box_hover(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx = argument[0];
		VarType yy = argument[1];
		VarType width = argument[2];
		VarType height = argument[3];
		VarType inalpha = argument[4];
		RealType size, alpha;
		VarType color;
		size = IntType(2);
		color = global::c_hover;
		alpha = global::a_hover * inalpha;
		if (alpha == IntType(0))
			return IntType(0);
		RealType t = percent(argument[IntType(4)], IntType(0), .75);
		draw_outline(xx, yy, width, height, IntType(1), color, alpha * t);
		t = percent(argument[IntType(4)], .25, IntType(1));
		draw_outline(xx - IntType(1), yy - IntType(1), width + IntType(2), height + IntType(2), IntType(1), color, alpha * t);
		return 0.0;
	}
	
	void draw_box_rounded(RealType xx, VarType yy, RealType w, RealType h, VarType incolor, RealType inalpha, BoolType roundlefttop, BoolType roundrighttop, BoolType roundrightbottom, BoolType roundleftbottom, IntType roundsize, VarType roundsprite)
	{
		IntType oldcolor;
		RealType oldalpha;
		if (!is_undefined(incolor))
		{
			oldcolor = draw_get_color();
			oldalpha = draw_get_alpha();
			draw_set_color((IntType)(incolor));
			draw_set_alpha(oldalpha * inalpha);
		}
		if (is_undefined(roundsprite))
			roundsprite = ID_spr_rounded_2;
		draw_primitive_begin(pr_trianglefan);
		draw_vertex((IntType)(xx + w / 2.0), (IntType)(yy + h / 2.0));
		if (roundlefttop)
		{
			draw_vertex((IntType)(xx), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy));
		
		if (roundrighttop)
		{
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + roundsize));
			draw_vertex((IntType)(xx + w), (IntType)(yy + roundsize));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy));
		
		if (roundrightbottom)
		{
			draw_vertex((IntType)(xx + w), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx + w - roundsize), (IntType)(yy + h));
		}
		else
			draw_vertex((IntType)(xx + w), (IntType)(yy + h));
		
		if (roundleftbottom)
		{
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h));
			draw_vertex((IntType)(xx + roundsize), (IntType)(yy + h - roundsize));
			draw_vertex((IntType)(xx), (IntType)(yy + h - roundsize));
		}
		else
			draw_vertex((IntType)(xx), (IntType)(yy + h));
		
		draw_vertex((IntType)(xx), (IntType)(yy + roundsize * (IntType)roundlefttop));
		draw_primitive_end();
		if (roundlefttop)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1) });
		if (roundrighttop)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(90) });
		if (roundrightbottom)
			draw_image({ roundsprite, IntType(0), xx + w - roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(180) });
		if (roundleftbottom)
			draw_image({ roundsprite, IntType(0), xx + roundsize, yy + h - roundsize, IntType(1), IntType(1), draw_get_color(), IntType(1), -IntType(270) });
		if (!is_undefined(incolor))
		{
			draw_set_color(oldcolor);
			draw_set_alpha(oldalpha);
		}
	}
	
	void draw_box_selection(RealType xx, RealType yy, RealType ww, RealType hh)
	{
		clip_begin(xx, yy, ww, hh);
		render_set_culling(false);
		draw_box(xx, yy, ww, hh, false, global::c_accent_overlay, global::a_accent_overlay);
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + (IntType(64) * i)), yy + IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(90) });
		for (IntType i = IntType(1); i < ceil(ww / 64.0) + IntType(1); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), (xx + ww - (IntType(64) * i)), yy + hh - IntType(2), IntType(2), IntType(1), global::c_accent, IntType(1), -IntType(90) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx + ww, yy + (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1), IntType(180) });
		for (IntType i = IntType(0); i < ceil(hh / 64.0); i++)
			draw_image({ ID_spr_selection_outline, IntType(0), xx, yy + hh - (IntType(64) * i), IntType(2), IntType(1), global::c_accent, IntType(1) });
		render_set_culling(true);
		clip_end();
	}
	
	RealType draw_button_accent(ScopeAny self, VarType xx, VarType yy, RealType width, RealType height, IntType index)
	{
		BoolType mouseon, mouseclick;
		VarType accent;
		width = floor(width);
		height = floor(height);
		if (xx + width < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + height < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		mouseon = app_mouse_box(self, xx, yy, width, height) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (index < IntType(9))
			accent = ObjType(obj_theme, sInt(setting_theme))->accent_list.Value(index);
		else
			accent = null_;
		
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		microani_set(/*"accentlistitem"*/ STR(1084) + string(index), null_, mouseon, mouseclick, sInt(setting_accent) == index, 0.5);
		microani_update({ mouseon, mouseclick, sInt(setting_accent) == index });
		if (accent != null_)
		{
			draw_box(xx, yy, width, height, false, accent, IntType(1));
			draw_image({ ID_spr_icons, icons_TICK, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE) });
		}
		else
		{
			draw_outline(xx + IntType(1), yy + IntType(1), width - IntType(2), height - IntType(2), IntType(1), global::c_border, global::a_border);
			draw_box(xx, yy, width, height, false, sVar(setting_accent_custom), global::microani_arr.Value(e_microani_ACTIVE));
			draw_image({ ID_spr_icons, icons_PICKER, xx + width / 2.0, yy + height / 2.0, IntType(1), IntType(1), merge_color((IntType)(global::c_text_secondary), global::c_level_middle, global::microani_arr.Value(e_microani_ACTIVE)), lerp(global::a_text_secondary, 1.0, global::microani_arr.Value(e_microani_ACTIVE)) });
			tip_set(self, text_get({ /*"tooltipcustomaccentcolor"*/ STR(1085) }), xx, yy, width, height);
		}
		
		IntType buttoncolor;
		RealType buttonalpha;
		buttoncolor = merge_color(c_white, c_black, global::microani_arr.Value(e_microani_PRESS));
		buttonalpha = lerp(0.0, .17, global::microani_arr.Value(e_microani_HOVER) * (IntType(1) - global::microani_arr.Value(e_microani_PRESS)));
		buttonalpha = lerp(buttonalpha, .20, global::microani_arr.Value(e_microani_PRESS));
		draw_box(xx, yy, width, height, false, buttoncolor, buttonalpha);
		draw_box_hover({ xx, yy, width, height, global::microani_arr.Value(e_microani_HOVER) });
		if (mouseon && sBool(mouse_left_released))
		{
			sInt(setting_accent) = index;
			sVar(update_interface_timeout) = current_time() + IntType(10000);
			sBool(update_interface_wait) = true;
			return true;
		}
		return 0.0;
	}
	
	RealType draw_button_collapse(ScopeAny self, StringType name, VarType open, IntType script, VarType active, StringType caption, StringType tip)
	{
		draw_set_font(sInt(font_label));
		RealType xx;
		VarType yy;
		IntType wid;
		BoolType mouseon, mousepress, mouseclick;
		xx = sVar(dx) - IntType(8);
		yy = sVar(dy) + (sReal(tab_control_h) / 2.0) - IntType(10);
		wid = string_width(text_get({ caption })) + IntType(26);
		mouseon = app_mouse_box(self, xx, sVar(dy), wid, IntType(24)) && sBool(content_mouseon) && active > 0;
		mousepress = mouseon && sBool(mouse_left);
		mouseclick = mouseon && sBool(mouse_left_released);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || sVar(dy) + IntType(24) < sVar(content_y) || sVar(dy) > sVar(content_y) + sVar(content_height))
			return IntType(0);
		draw_button_icon(self, { name + /*"collapse"*/ STR(1086), xx, yy, IntType(20), IntType(20), open > 0 && active > 0, null_, null_, !(active > 0), /*""*/ STR(0), ID_spr_chevron_ani });
		microani_update({ mouseon, mousepress, open > 0 && active > 0 });
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		sVar(dx) += IntType(16);
		sVar(dw) -= 16.0;
		sBool(tab_collapse) = true;
		global::collapse_ani = test_reduced_motion(open, global::microani_arr.Value(e_microani_ACTIVE));
		if (script > 0)
			draw_switch(self, caption, sVar(dx), sVar(dy), active, script, tip);
		else
		{
			draw_label(self, { text_get({ caption }), sVar(dx), sVar(dy) + sReal(tab_control_h) / 2.0, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
			draw_help_circle(self, tip, sVar(dx) + string_width(text_get({ caption })) + IntType(4), sVar(dy) + IntType(2), false);
		}
		
		if (mouseclick && ds_map_exists(global::collapse_map, name))
			action_collapse(name, !(DsMap(global::collapse_map).Value(name) > 0));
		return mouseclick;
	}
	
	void draw_button_color(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, VarType color, VarType def, BoolType hsvmode, IntType script)
	{
		VarType textx, textw, buttonx, buttonw;
		RealType h;
		BoolType mouseon, mouseclick, active;
		textx = xx;
		h = sReal(ui_small_height);
		if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
		{
			buttonx = xx;
			buttonw = w;
			textw = w;
			yy += (label_height + IntType(8));
		}
		else
		{
			buttonx = xx + floor((RealType)w / 2.0);
			buttonw = floor((RealType)w / 2.0);
			textw = floor((RealType)w / 2.0) - IntType(8);
		}
		
		active = (sStr(settings_menu_name) == /*"colorpicker"*/ STR(716) && ObjType(obj_colorpicker, sInt(colorpicker))->value_name == name);
		mouseon = app_mouse_box(self, buttonx, yy, buttonw, h) && sBool(content_mouseon);
		mouseclick = mouseon && sBool(mouse_left);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		context_menu_area(self, { xx, yy, w, h, /*"contextmenuvalue"*/ STR(1087), color, e_context_type_COLOR, script, def });
		microani_set(name, script, mouseon, mouseclick, active, false, IntType(1), true);
		IntType col, labelcolor;
		RealType alpha, labelalpha;
		col = merge_color(IntType(0), global::c_overlay, global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box(buttonx, yy, buttonw, h, false, global::c_level_top, IntType(1));
		draw_box(buttonx, yy, buttonw, h, false, col, alpha);
		col = merge_color((IntType)(global::c_border), (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_HOVER));
		col = merge_color(col, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(global::a_border, global::a_text_tertiary, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(alpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_outline(buttonx, yy, buttonw, h, IntType(1), col, alpha, true);
		draw_box(buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), false, color, IntType(1));
		draw_outline(buttonx + IntType(4), yy + IntType(4), buttonw - IntType(8), h - IntType(8), IntType(1), global::c_border, global::a_border, IntType(1));
		draw_box_hover({ buttonx, yy, buttonw, h, global::microani_arr.Value(e_microani_PRESS) });
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_set_font(sInt(font_label));
		if (!(global::_app->panel_compact > 0) && sVar(tab_collumns_count) > IntType(1))
			draw_label(self, { string_limit(text_get({ name }), textw - IntType(8)), xx, yy - (label_height + IntType(8)), fa_left, fa_top, labelcolor, labelalpha });
		else
			draw_label(self, { string_limit(text_get({ name }), textw - IntType(8)), xx, yy + h / 2.0, fa_left, fa_center, labelcolor, labelalpha });
		
		microani_update({ mouseon, mouseclick, active || (mouseon && sBool(mouse_left)), false });
		if (mouseon && sBool(mouse_left_released))
		{
			colorpicker_show(self, name, color, def, script, xx, yy, w, h);
			if (hsvmode)
				ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"hsv"*/ STR(1043);
		}
	}
	
	RealType draw_button_icon(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType name, xx, yy, wid, hei, value, icon, script, disabled, tip, sprite;
		name = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		wid = argument[IntType(3)];
		hei = argument[IntType(4)];
		value = argument[IntType(5)];
		icon = argument[IntType(6)];
		script = null_;
		disabled = false;
		tip = /*""*/ STR(0);
		sprite = ID_spr_icons;
		if (argument_count > IntType(7))
			script = argument[IntType(7)];
		if (argument_count > IntType(8))
			disabled = argument[IntType(8)];
		if (argument_count > IntType(9))
			tip = argument[IntType(9)];
		if (argument_count > IntType(10))
			if (argument[IntType(10)] != null_)
				sprite = argument[IntType(10)];
		if (tip != /*""*/ STR(0))
			tip_set(self, text_get({ tip }), xx, yy, wid, hei);
		if (xx + wid < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon, animated;
		mouseon = (sBool(content_mouseon) && !(disabled > 0) && app_mouse_box(self, xx, yy, wid, hei));
		animated = (sprite != ID_spr_icons && sprite != null_ && icon == null_ && sprite_get_number((IntType)(sprite)) > IntType(1));
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		microani_set(name, script, mouseon, mouseon && sBool(mouse_left), value);
		draw_box_hover({ xx, yy, wid, hei, global::microani_arr.Value(e_microani_PRESS) });
		IntType onbackcolor, oniconcolor, offbackcolor, officoncolor;
		RealType onbackalpha, oniconalpha, offbackalpha, officonalpha, dropdown;
		dropdown = (icon == icons_CHEVRON_DOWN_TINY);
		offbackcolor = global::c_overlay;
		offbackcolor = merge_color(offbackcolor, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_PRESS));
		offbackalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		offbackalpha = lerp(offbackalpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_PRESS));
		onbackcolor = merge_color((IntType)(global::c_accent_overlay), global::c_overlay, global::microani_arr.Value(e_microani_HOVER));
		onbackcolor = merge_color(onbackcolor, (IntType)(global::c_accent_overlay), global::microani_arr.Value(e_microani_PRESS));
		onbackalpha = lerp(global::a_accent_overlay, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
		onbackalpha = lerp(onbackalpha, global::a_accent_overlay, global::microani_arr.Value(e_microani_PRESS));
		onbackcolor = merge_color(offbackcolor, onbackcolor, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		onbackalpha = lerp(offbackalpha, onbackalpha, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		onbackalpha = lerp(onbackalpha, 0.0, global::microani_arr.Value(e_microani_DISABLED));
		officoncolor = merge_color((IntType)((dropdown > 0) ? global::c_text_tertiary : global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		officoncolor = merge_color(officoncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		officonalpha = lerp((dropdown > 0) ? global::a_text_tertiary : global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		officonalpha = lerp(officonalpha, 1.0, global::microani_arr.Value(e_microani_PRESS));
		oniconcolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		oniconcolor = merge_color(oniconcolor, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		oniconalpha = merge_color((IntType)(global::a_accent), (IntType)(global::a_accent_hover), global::microani_arr.Value(e_microani_HOVER));
		oniconalpha = merge_color((IntType)(oniconalpha), (IntType)(global::a_accent_pressed), global::microani_arr.Value(e_microani_PRESS));
		oniconcolor = merge_color(officoncolor, oniconcolor, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		oniconalpha = lerp(officonalpha, oniconalpha, global::microani_arr.Value(e_microani_ACTIVE) * (IntType)!animated);
		oniconcolor = merge_color(oniconcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		oniconalpha = lerp(oniconalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_box(xx, yy, wid, hei, false, onbackcolor, onbackalpha);
		if (animated)
		{
			RealType frame = floor((sprite_get_number((IntType)(sprite)) - IntType(1)) * global::microani_arr.Value(e_microani_ACTIVE));
			draw_image({ sprite, frame, xx + (RealType)wid / 2.0, yy + (RealType)hei / 2.0, IntType(1), IntType(1), oniconcolor, oniconalpha });
		}
		else
			draw_image({ sprite, icon, xx + (RealType)wid / 2.0, yy + (RealType)hei / 2.0, IntType(1), IntType(1), oniconcolor, oniconalpha });
		
		microani_update({ mouseon, mouseon && sBool(mouse_left), value, disabled });
		if (mouseon && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script, !(value > 0) });
			app_mouse_clear(self);
			return true;
		}
		return 0.0;
	}
	
	RealType draw_button_label(ScopeAny self, VarType name, VarType xx, VarType yy, VarType w, IntType icon, IntType type, IntType script, IntType anchor, BoolType disabled)
	{
		RealType h, capwid;
		IntType font;
		VarType cap;
		BoolType customw;
		h = IntType(32);
		cap = text_get({ name });
		h = (type != e_button_TOOLBAR ? IntType(32) : sReal(toolbar_size));
		font = (type != e_button_TOOLBAR ? sInt(font_button) : sInt(font_value));
		if (type == e_button_BIG)
		{
			h = IntType(64);
			font = sInt(font_heading_big);
		}
		draw_set_font(font);
		capwid = string_width(cap);
		if (w == null_)
		{
			w = capwid + (icon == null_ ? IntType(24) : IntType(52));
			customw = false;
		}
		else
			customw = true;
		
		if (anchor == e_anchor_CENTER)
			xx = xx - floor((RealType)w / 2.0);
		else
			if (anchor == e_anchor_RIGHT)
				xx -= w;
		
		if (yy > sVar(content_y) + sVar(content_height) || yy + h < sVar(content_y) || xx > sVar(content_x) + sVar(content_width) || xx + w < sVar(content_x))
			return IntType(0);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && !disabled;
		mouseclick = mouseon && sBool(mouse_left);
		microani_set(name, script, mouseon, mouseclick, false);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		VarType focus;
		IntType backcolor, linecolor, contentcolor;
		RealType backalpha, linealpha, contentalpha, contentx;
		focus = max({ global::microani_arr.Value(e_microani_ACTIVE), global::microani_arr.Value(e_microani_PRESS) });
		if (type == e_button_PRIMARY || type == e_button_BIG)
		{
			backcolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
			backcolor = merge_color(backcolor, global::c_accent_pressed, focus);
			backcolor = merge_color(backcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			backalpha = lerp(1.0, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = global::c_button_text;
			contentalpha = global::a_button_text;
		}
		else
		{
			backcolor = merge_color(global::c_overlay, (IntType)(global::c_accent_overlay), focus);
			backalpha = lerp(0.0, global::a_overlay, global::microani_arr.Value(e_microani_HOVER));
			backalpha = lerp(backalpha, global::a_accent_overlay, focus);
			backalpha = lerp(backalpha, 0.0, global::microani_arr.Value(e_microani_DISABLED));
			contentcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
			contentcolor = merge_color(contentcolor, (IntType)(global::c_accent), focus);
			contentcolor = merge_color(contentcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
			contentalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
			contentalpha = lerp(contentalpha, 1.0, focus);
			contentalpha = lerp(contentalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
			linecolor = merge_color((IntType)(global::c_border), (IntType)(global::c_accent), focus);
			linealpha = lerp(global::a_border, global::a_accent, focus);
		}
		
		draw_box(xx, yy, w, h, false, backcolor, backalpha);
		if (type == e_button_PRIMARY || type == e_button_BIG)
			draw_box_bevel({ xx, yy, w, h, IntType(1) });
		if (type == e_button_SECONDARY)
		{
			draw_box(xx, yy, w, h, false, global::c_level_top, draw_get_alpha());
			draw_outline(xx, yy, w, h, IntType(1), linecolor, linealpha, IntType(1));
		}
		draw_box_hover({ xx, yy, w, h, global::microani_arr.Value(e_microani_PRESS) });
		if (customw)
			contentx = floor((xx + (RealType)w / 2.0) - ((capwid + (icon == null_ ? 0.0 : 32.0)) / 2.0));
		else
			contentx = floor(xx + (icon == null_ ? 12.0 : 8.0));
		
		if (icon != null_)
		{
			draw_image({ ID_spr_icons, icon, contentx + IntType(12), yy + h / 2.0, IntType(1), IntType(1), contentcolor, contentalpha });
			contentx += IntType(32);
		}
		draw_label(self, { cap, contentx, yy + h / 2.0, fa_left, fa_middle, contentcolor, contentalpha });
		microani_update({ mouseon, mouseclick, false, disabled });
		if (mouseon && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script });
			return true;
		}
		return 0.0;
	}
	
	BoolType draw_button_menu(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType name, type, xx, yy, wid, hei, value, text, script, tex, disabled, icon, caption, texcolor, texalpha, capwid;
		RealType flip;
		BoolType mouseon, menuactive, menuhide;
		VarType cap, menuid, nameid;
		name = argument[IntType(0)];
		type = argument[IntType(1)];
		xx = argument[IntType(2)];
		yy = argument[IntType(3)];
		wid = argument[IntType(4)];
		hei = argument[IntType(5)];
		value = argument[IntType(6)];
		text = argument[IntType(7)];
		script = argument[IntType(8)];
		if (argument_count > IntType(9))
			disabled = argument[IntType(9)];
		else
			disabled = false;
		
		if (argument_count > IntType(10))
			tex = argument[IntType(10)];
		else
			tex = null_;
		
		if (argument_count > IntType(11))
			icon = argument[IntType(11)];
		else
			icon = null_;
		
		if (argument_count > IntType(12))
			caption = argument[IntType(12)];
		else
			caption = /*""*/ STR(0);
		
		if (argument_count > IntType(13))
		{
			texcolor = argument[IntType(13)];
			texalpha = argument[IntType(14)];
			if (texcolor == null_)
				texcolor = c_white;
			if (texalpha == null_)
				texalpha = IntType(1);
		}
		else
		{
			texcolor = c_white;
			texalpha = IntType(1);
		}
		
		if (argument_count > IntType(15))
			capwid = argument[IntType(15)];
		else
			capwid = null_;
		
		if (sVar(menu_model_current) != null_)
		{
			cap = minecraft_asset_get_name(/*"modelstate"*/ STR(782), name);
			name = /*"modelstate"*/ STR(782) + name;
		}
		else
			if (sVar(menu_block_current) != null_)
			{
				cap = minecraft_asset_get_name(/*"blockstate"*/ STR(801), name);
				name = /*"blockstate"*/ STR(801) + name;
			}
			else
				cap = text_get({ name });
		
		
		if (sBool(menu_bench))
			nameid = /*"bench"*/ STR(759) + name;
		else
			nameid = name;
		
		menuactive = false;
		menuhide = false;
		menuid = null_;
		for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
		{
			if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
			{
				menuactive = true;
				menuhide = ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_ani_type == /*"hide"*/ STR(757);
				menuid = DsList(sInt(menu_list)).Value(i);
			}
		}
		flip = (yy + hei + hei * IntType(8) > sReal(window_height));
		microani_set(nameid, null_, false, false, false);
		IntType textcolor, bordercolor, chevroncolor, animation;
		RealType textalpha, borderalpha, chevronalpha;
		VarType fadealpha;
		textcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		textcolor = merge_color(textcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		textcolor = merge_color(textcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		textalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		textalpha = lerp(textalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		textalpha = lerp(textalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		fadealpha = global::microani_arr.Value(e_microani_FADE);
		animation = global::current_microani;
		if (type != e_menu_LIST_SEAMLESS)
		{
			draw_set_font(sInt(font_label));
			if (capwid == null_ && (!(sReal(window_compact) > 0) || global::_app->panel_compact > 0))
			{
				draw_label(self, { string_limit(cap, sVar(dw)), xx, yy - IntType(3), fa_left, fa_top, textcolor, textalpha });
				yy += (label_height + IntType(8));
			}
			else
			{
				if (capwid == null_ && sReal(window_compact) > 0)
				{
					cap = string_limit(cap, (RealType)sVar(dw) / 3.0);
					capwid = (RealType)sVar(dw) / 3.0;
				}
				draw_label(self, { cap, xx, yy + (RealType)hei / 2.0, fa_left, fa_middle, textcolor, textalpha });
				wid -= capwid;
				xx += capwid;
			}
			
			ObjType(value_animation, ObjType(micro_animation, animation)->fade)->value = IntType(1);
		}
		if (menuactive)
		{
			xx = lerp(xx, ObjType(obj_menu, menuid)->menu_x, ObjType(obj_menu, menuid)->menu_ani_ease);
			wid = lerp(wid, ObjType(obj_menu, menuid)->menu_w, ObjType(obj_menu, menuid)->menu_ani_ease);
		}
		bordercolor = merge_color((IntType)(global::c_border), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		bordercolor = merge_color(bordercolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		borderalpha = lerp(global::a_border, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_PRESS));
		borderalpha = lerp(borderalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		draw_box(xx, yy, wid, hei, false, global::c_level_top, draw_get_alpha());
		draw_outline(xx, yy, wid, hei, IntType(1), bordercolor, borderalpha * fadealpha, true);
		draw_box_hover({ xx, yy, wid, hei, global::microani_arr.Value(e_microani_PRESS) });
		mouseon = app_mouse_box(self, xx, yy, wid, hei) && !(disabled > 0) && sBool(content_mouseon);
		if (mouseon)
			sInt(mouse_cursor) = cr_handpoint;
		IntType item = list_item_add(text, null_, caption, tex, icon, -IntType(1), null_, false, false);
		ObjType(obj_list_item, item)->disabled = disabled;
		if (type == e_menu_TRANSITION_LIST)
		{
			ObjType(obj_list_item, item)->thumbnail_blend = global::c_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_alpha = global::a_text_secondary;
			ObjType(obj_list_item, item)->thumbnail_backdrop = false;
		}
		else
		{
			ObjType(obj_list_item, item)->thumbnail_blend = texcolor;
			ObjType(obj_list_item, item)->thumbnail_alpha = texalpha;
		}
		
		list_item_draw(self, { item, xx, yy, wid, hei, false, null_, null_, false });
		instance_destroy(self, { item });
		chevroncolor = merge_color((IntType)(global::c_text_tertiary), (IntType)(global::c_text_secondary), global::microani_arr.Value(e_microani_HOVER));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		chevroncolor = merge_color(chevroncolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		chevronalpha = lerp(global::a_text_tertiary, global::a_text_secondary, global::microani_arr.Value(e_microani_HOVER));
		chevronalpha = lerp(chevronalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		chevronalpha = lerp(chevronalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_image({ ID_spr_icons, icons_CHEVRON_DOWN_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * (IntType(1) - global::microani_arr.Value(e_microani_CUSTOM_LINEAR)) });
		draw_image({ ID_spr_icons, icons_CHEVRON_UP_TINY, xx + wid - IntType(12), yy + (RealType)hei / 2.0, IntType(1), IntType(1), chevroncolor, chevronalpha * global::microani_arr.Value(e_microani_CUSTOM_LINEAR) });
		draw_box(xx, yy, wid, hei, false, global::c_overlay, global::a_overlay * global::microani_arr.Value(e_microani_DISABLED));
		microani_update({ mouseon, mouseon && sBool(mouse_left), (menuactive && !menuhide), disabled, ((menuactive && !menuhide) ? !(flip > 0) : flip) });
		if (menuactive)
		{
			sVar(menu_x) = xx;
			sVar(menu_y) = yy;
		}
		if (mouseon && sBool(mouse_left_released) && menuhide)
		{
			sVar(window_busy) = /*"menu"*/ STR(1088);
			ObjType(obj_menu, menuid)->menu_ani_type = /*"show"*/ STR(758);
			app_mouse_clear(self);
		}
		if (mouseon && sBool(mouse_left_released) && !menuhide)
		{
			VarType m = null_;
			for (IntType i = IntType(0); i < ds_list_size(sInt(menu_list)); i++)
			{
				if (ObjType(obj_menu, DsList(sInt(menu_list)).Value(i))->menu_name == nameid)
				{
					m = DsList(sInt(menu_list)).Value(i);
					break;
				}
			}
			if (m == null_)
				m = (new obj_menu)->id;
			sVar(window_busy) = /*"menu"*/ STR(1088);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			ObjType(obj_menu, m)->menu_name = nameid;
			ObjType(obj_menu, m)->menu_type = type;
			ObjType(obj_menu, m)->menu_window = window_get_current();
			ObjType(obj_menu, m)->menu_temp_edit = global::temp_edit;
			ObjType(obj_menu, m)->menu_script = script;
			ObjType(obj_menu, m)->menu_value = value;
			ObjType(obj_menu, m)->menu_ani = IntType(0);
			ObjType(obj_menu, m)->menu_ani_type = /*"show"*/ STR(758);
			ObjType(obj_menu, m)->menu_flip = flip;
			ObjType(obj_menu, m)->menu_x = xx;
			ObjType(obj_menu, m)->menu_x_start = xx;
			ObjType(obj_menu, m)->menu_y = yy;
			ObjType(obj_menu, m)->menu_w = wid;
			ObjType(obj_menu, m)->menu_w_start = wid;
			ObjType(obj_menu, m)->menu_button_h = hei;
			ObjType(obj_menu, m)->menu_item_w = wid;
			ObjType(obj_menu, m)->menu_item_h = ObjType(obj_menu, m)->menu_button_h;
			ObjType(obj_menu, m)->menu_include_tl_edit = (ObjType(obj_menu, m)->menu_name != /*"timelineeditorparent"*/ STR(1089));
			ObjType(obj_menu, m)->menu_margin = IntType(0);
			ObjType(obj_menu, m)->menu_transition = null_;
			ObjType(obj_menu, m)->menu_steps = IntType(0);
			ObjType(obj_menu, m)->menu_floating = false;
			ObjType(obj_menu, m)->content_x = sVar(content_x);
			ObjType(obj_menu, m)->content_width = sVar(content_width);
			sVar(menu_current) = m;
			sInt(menu_model_state) = sInt(menu_model_state_current);
			sInt(menu_block_state) = sInt(menu_block_state_current);
			if (type == e_menu_LIST || type == e_menu_LIST_SEAMLESS)
				ObjType(obj_menu, m)->menu_list = list_init(self, name);
			else
				if (type == e_menu_TIMELINE)
					ObjType(obj_menu, m)->menu_list = menu_timeline_init(self, m);
				else
					if (type == e_menu_BIOME)
						ObjType(obj_menu, m)->menu_list = menu_biome_init(self, m);
			
			
			ObjType(obj_menu, m)->menu_amount = ObjType(obj_menu, m)->menu_list == null_ ? IntType(0) : ds_list_size(ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->item);
			if (ObjType(obj_menu, m)->menu_list != null_)
				ObjType(obj_list, ObjType(obj_menu, m)->menu_list)->show_ticks = false;
			withOne (obj_menu, m, self->id)
				menu_focus_selected(self);
			
			if (ObjType(obj_menu, m)->menu_flip > 0)
				ObjType(obj_menu, m)->menu_show_amount = floor((ObjType(obj_menu, m)->menu_y * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			else
				ObjType(obj_menu, m)->menu_show_amount = floor(((sReal(window_height) - (ObjType(obj_menu, m)->menu_y + ObjType(obj_menu, m)->menu_button_h)) * 0.9) / ObjType(obj_menu, m)->menu_item_h);
			
			global::current_microani = animation;
			sInt(menu_popup) = sInt(popup);
			return true;
		}
		global::current_microani = animation;
		return false;
	}
	
	void draw_button_text(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType text, xx, yy, script, value, tip, font;
		IntType wid, hei;
		BoolType mouseon;
		text = argument[IntType(0)];
		xx = argument[IntType(1)];
		yy = argument[IntType(2)];
		script = argument[IntType(3)];
		value = argument[IntType(4)];
		tip = /*""*/ STR(0);
		font = sInt(font_value);
		if (argument_count > IntType(5))
			tip = argument[IntType(5)];
		if (argument_count > IntType(6))
			font = argument[IntType(6)];
		draw_set_font((IntType)(font));
		wid = string_width(text);
		hei = string_height(text);
		mouseon = app_mouse_box(self, xx, yy - hei, wid, hei);
		microani_set(text, script, mouseon, mouseon && sBool(mouse_left), false);
		IntType color;
		RealType alpha;
		color = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		alpha = lerp(global::a_accent, global::a_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		color = merge_color(color, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		alpha = lerp(alpha, global::a_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		draw_label(self, { text, xx, yy, fa_left, fa_bottom, color, alpha });
		RealType grow = IntType(3) - (IntType(3) * (global::microani_arr.Value(e_microani_HOVER) * (IntType(1) - global::microani_arr.Value(e_microani_PRESS))));
		draw_line_ext(xx + grow, yy, xx + wid - (grow * IntType(2)), yy, color, alpha * global::microani_arr.Value(e_microani_HOVER));
		if (mouseon)
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (tip != /*""*/ STR(0))
				tip_set(self, tip, xx, yy - hei, wid, hei);
			if (sBool(mouse_left_released) && script != null_)
			{
				script_execute(self, { script, value });
				app_mouse_clear(self);
			}
		}
		microani_update({ mouseon, mouseon && sBool(mouse_left), false });
	}
	
	RealType draw_button_transition(ScopeAny self, VarType xx, VarType yy, VarType transition)
	{
		BoolType mouseon, press, active;
		VarType tipname;
		mouseon = app_mouse_box(self, xx, yy, IntType(36), IntType(36));
		press = mouseon && sBool(mouse_left);
		if (global::tl_edit != null_)
			active = idVar(global::tl_edit, value).Value(e_value_TRANSITION) == transition;
		else
			active = false;
		
		tipname = transition;
		if (tipname != /*"linear"*/ STR(542) && tipname != /*"instant"*/ STR(543) && tipname != /*"bezier"*/ STR(544))
		{
			tipname = string_replace(tipname, /*"easeinout"*/ STR(1090), /*""*/ STR(0));
			tipname = string_replace(tipname, /*"easein"*/ STR(1091), /*""*/ STR(0));
			tipname = string_replace(tipname, /*"easeout"*/ STR(1092), /*""*/ STR(0));
			tipname = /*"ease"*/ STR(1093) + tipname;
		}
		if (transition == /*"bezier"*/ STR(544) && !(sReal(setting_advanced_mode) > 0))
			return IntType(0);
		return draw_button_icon(self, { /*"menu"*/ STR(1088) + transition, xx, yy, IntType(36), IntType(36), active, null_, null_, false, /*"transition"*/ STR(1094) + tipname, DsMap(sVar(transition_texture_map)).Value(transition) });
	}
	
	RealType draw_checkbox(ScopeAny self, StringType name, VarType xx, VarType yy, VarType active, IntType script, StringType tip)
	{
		VarType text;
		RealType w, h;
		BoolType pressed;
		text = text_get({ name });
		draw_set_font(sInt(font_label));
		w = IntType(32) + string_width(text);
		h = sReal(ui_small_height);
		if (xx + w < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + h < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
			return IntType(0);
		BoolType mouseon, mouseclick;
		mouseon = app_mouse_box(self, xx, yy, w, h) && sBool(content_mouseon) && (sVar(window_busy) == /*""*/ STR(0));
		mouseclick = mouseon && sBool(mouse_left);
		pressed = false;
		if (mouseon)
		{
			if (sBool(mouse_left) || sBool(mouse_left_released))
				pressed = true;
			sInt(mouse_cursor) = cr_handpoint;
		}
		microani_set(name, script, mouseon, mouseclick, active);
		VarType checkboxx, checkboxy;
		checkboxx = xx;
		checkboxy = yy + (h / 2.0) - IntType(8);
		IntType offcolor, oncolor, color;
		RealType offalpha, onalpha, alpha;
		offcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		offcolor = merge_color(offcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_PRESS));
		offalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		offalpha = lerp(offalpha, global::a_accent, global::microani_arr.Value(e_microani_PRESS));
		oncolor = merge_color((IntType)(global::c_accent), global::c_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		oncolor = merge_color(oncolor, global::c_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		onalpha = lerp(global::a_accent, global::a_accent_hover, global::microani_arr.Value(e_microani_HOVER));
		onalpha = lerp(onalpha, global::a_accent_pressed, global::microani_arr.Value(e_microani_PRESS));
		color = merge_color(offcolor, oncolor, global::microani_arr.Value(e_microani_ACTIVE));
		alpha = lerp(offalpha, onalpha, global::microani_arr.Value(e_microani_ACTIVE));
		color = merge_color(color, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		alpha = lerp(alpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		draw_outline(checkboxx, checkboxy, IntType(16), IntType(16), IntType(2) + (IntType(6) * global::microani_arr.Value(e_microani_ACTIVE)), color, alpha, true);
		draw_image({ ID_spr_checkbox_tick, IntType(0), checkboxx + IntType(8), checkboxy + IntType(8), IntType(1), IntType(1), global::c_level_middle, IntType(1) * global::microani_arr.Value(e_microani_ACTIVE) });
		draw_box_hover({ checkboxx, checkboxy, IntType(16), IntType(16), global::microani_arr.Value(e_microani_PRESS) });
		VarType shortlabel = string_limit(text, sVar(dw) - IntType(24));
		draw_label(self, { shortlabel, xx + IntType(24), yy + (h / 2.0), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		microani_update({ mouseon, mouseclick, active });
		if (string_width(shortlabel) < sVar(dw) - IntType(28))
			draw_help_circle(self, tip, xx + IntType(24) + string_width(shortlabel) + IntType(4), yy + (h / 2.0) - IntType(10), false);
		if (pressed && sBool(mouse_left_released))
		{
			if (script != null_)
				script_execute(self, { script, !(active > 0) });
			return true;
		}
		return 0.0;
	}
	
	void draw_circle_ext(RealType xx, RealType yy, RealType rad, BoolType outline, RealType detail, IntType color, RealType alpha)
	{
		IntType oldcolor;
		RealType oldalpha;
		oldcolor = draw_get_color();
		oldalpha = draw_get_alpha();
		draw_set_color(color);
		draw_set_alpha(oldalpha * alpha);
		if (outline)
			draw_primitive_begin(pr_linestrip);
		else
		{
			draw_primitive_begin(pr_trianglefan);
			draw_vertex((IntType)(xx), (IntType)(yy));
		}
		
		for (RealType s = IntType(0); s <= pi_ * IntType(2); s += (pi_ * IntType(2)) / detail)
			draw_vertex((IntType)(xx + cos(s) * rad), (IntType)(yy + sin(s) * rad));
		draw_primitive_end();
		draw_set_color(oldcolor);
		draw_set_alpha(oldalpha);
	}
	
	void draw_divide(VarType xx, VarType yy, VarType w)
	{
		draw_line_ext(xx, yy, xx + w, yy, global::c_border, global::a_border);
	}
	
	void draw_divide_vertical(VarType xx, VarType yy, VarType h)
	{
		draw_line_ext(xx, yy, xx, yy + h, global::c_border, global::a_border);
	}
	
	RealType draw_dragger(ScopeAny self, StringType name, VarType xx, VarType yy, RealType wid, VarType value, RealType mul, RealType minval, VarType maxval, VarType def, RealType snapval, VarType tbx, IntType script, VarType capwidth, BoolType showcaption, BoolType disabled, StringType tip)
	{
		VarType caption, fieldx;
		RealType hei;
		BoolType dragmouseon;
		hei = sReal(ui_small_height);
		if (capwidth == null_ && showcaption)
			capwidth = sVar(dw) - wid;
		else
			if (!showcaption)
				capwidth = IntType(0);
		
		draw_set_font(sInt(font_label));
		if (capwidth > IntType(0))
			caption = string_limit(text_get({ name }), min({ capwidth, sVar(dw) - wid }));
		else
			caption = string_limit(text_get({ name }), sVar(dw) - wid);
		
		if (xx + wid + capwidth < sVar(content_x) || xx > sVar(content_x) + sVar(content_width) || yy + hei < sVar(content_y) || yy > sVar(content_y) + sVar(content_height))
		{
			if (sBool(textbox_jump))
				ds_list_add({ sInt(textbox_list), ArrType::From({ tbx, sVar(content_tab), yy, sVar(content_y), sVar(content_height) }) });
			return IntType(0);
		}
		if (!disabled)
			context_menu_area(self, { xx, yy, wid + capwidth, hei, /*"contextmenuvalue"*/ STR(1087), value, e_context_type_NUMBER, script, def });
		fieldx = xx + capwidth;
		dragmouseon = app_mouse_box(self, fieldx, yy, wid, hei) && sBool(content_mouseon) && (sVar(window_focus) != string(tbx)) && !disabled;
		if (dragmouseon && sBool(mouse_left_pressed))
			sVar(window_focus) = name + /*"press"*/ STR(1095);
		if (sVar(window_focus) == name + /*"press"*/ STR(1095))
		{
			sInt(mouse_cursor) = cr_size_we;
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
				if (app_mouse_box(self, fieldx, yy, wid, hei) && !disabled)
				{
					idVar(tbx, text) = string_decimals(value);
					sVar(window_focus) = string(tbx);
					sVar(window_busy) = /*""*/ STR(0);
				}
			}
			else
				if (sReal(mouse_dx) != IntType(0))
				{
					sVar(dragger_drag_value) = value;
					sVar(window_busy) = name + /*"drag"*/ STR(30);
					sVar(window_focus) = /*""*/ STR(0);
				}
			
		}
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
		{
			sInt(mouse_cursor) = cr_none;
			sVar(dragger_drag_value) += (gmlGlobal::mouse_x - sInt(mouse_click_x)) * mul * sReal(dragger_multiplier);
			window_mouse_set(sInt(mouse_click_x), sInt(mouse_click_y));
			RealType d;
			if (global::_app->setting_unlimited_values > 0)
				d = snap(sVar(dragger_drag_value), snapval) - value;
			else
				d = clamp(snap(sVar(dragger_drag_value), snapval), minval, maxval) - value;
			
			if (d != IntType(0))
			{
				script_execute(self, { script, d, true });
				idVar(tbx, text) = string_decimals(value + d);
			}
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
		}
		if (draw_inputbox(self, { name, fieldx, yy, wid, hei, string(def), tbx, null_, disabled, false, sInt(font_digits), e_inputbox_RIGHT }) && script != null_)
		{
			VarType val = eval(idVar(tbx, text), def);
			script_execute(self, { script, (global::_app->setting_unlimited_values > 0) ? snap(val, snapval) : VarType(clamp(snap(val, snapval), minval, maxval)), false });
		}
		if (value < minval || value > maxval)
			draw_box(fieldx, yy, wid, hei, false, global::c_error, global::a_accent_overlay);
		else
			if ((abs(maxval) + abs(minval)) < IntType(100000))
			{
				RealType perc = percent(value, minval, maxval);
				draw_box(fieldx, yy, wid * perc, hei, false, global::c_accent_hover, global::a_accent_overlay);
			}
		
		if (sVar(window_busy) == name + /*"drag"*/ STR(30))
			ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
		if (dragmouseon)
			sInt(mouse_cursor) = cr_size_we;
		IntType labelcolor;
		RealType labelalpha;
		labelcolor = merge_color((IntType)(global::c_text_secondary), (IntType)(global::c_text_main), global::microani_arr.Value(e_microani_HOVER));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_accent), global::microani_arr.Value(e_microani_ACTIVE));
		labelcolor = merge_color(labelcolor, (IntType)(global::c_text_tertiary), global::microani_arr.Value(e_microani_DISABLED));
		labelalpha = lerp(global::a_text_secondary, global::a_text_main, global::microani_arr.Value(e_microani_HOVER));
		labelalpha = lerp(labelalpha, global::a_accent, global::microani_arr.Value(e_microani_ACTIVE));
		labelalpha = lerp(labelalpha, global::a_text_tertiary, global::microani_arr.Value(e_microani_DISABLED));
		if (showcaption)
		{
			draw_label(self, { caption, xx, yy + hei / 2.0, fa_left, fa_middle, labelcolor, labelalpha, sInt(font_label) });
			if (xx + string_width(caption) + IntType(28) < fieldx)
				draw_help_circle(self, tip, xx + string_width(caption) + IntType(4), yy + (hei / 2.0) - IntType(10), disabled);
		}
		if (sVar(window_busy) != name + /*"drag"*/ STR(30) && sVar(window_busy) != name + /*"press"*/ STR(1095) && sVar(window_focus) != string(tbx))
			idVar(tbx, text) = string_decimals(value);
		return 0.0;
	}
	
}
