/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.23 22:26:53 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void bench_draw_settings(ScopeAny self, VarType bx, VarType by, VarType bw, VarType bh)
	{
		sVar(dx) = bx;
		sVar(dy) = by;
		sVar(dw) = bw;
		sVar(dh) = bh;
		sVar(content_x) = sVar(dx);
		sVar(content_y) = sVar(dy);
		sVar(content_width) = sVar(dw);
		sVar(content_height) = sVar(dh);
		RealType prevalpha;
		prevalpha = draw_get_alpha();
		sVar(bench_settings_ani) += test_reduced_motion(IntType(1), (0.09 * global::delta));
		sVar(bench_settings_ani) = clamp(sVar(bench_settings_ani), IntType(0), IntType(1));
		VarType aniease = ease(/*"easeoutcirc"*/ STR(567), sVar(bench_settings_ani));
		draw_set_alpha(aniease * prevalpha);
		sVar(dx) += -IntType(16) + (IntType(16) * aniease);
		VarType sy = sVar(dy);
		if (type_is_timeline(ObjType(obj_bench_settings, sInt(bench_settings))->type))
		{
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_LIGHT_SOURCE)
			{
				draw_sprite(ID_spr_bench_example, (IntType)((ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT) ? IntType(0) : IntType(1)), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				tab_control_togglebutton(self);
				togglebutton_add(self, { /*"typepointlight"*/ STR(763), null_, e_tl_type_POINT_LIGHT, ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT, ID_action_bench_light_type });
				togglebutton_add(self, { /*"typespotlight"*/ STR(764), null_, e_tl_type_SPOT_LIGHT, ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_SPOT_LIGHT, ID_action_bench_light_type });
				draw_togglebutton(self, /*"benchlighttype"*/ STR(765), sVar(dx), sVar(dy));
				tab_next(self);
				if (ObjType(obj_bench_settings, sInt(bench_settings))->light_type == e_tl_type_POINT_LIGHT)
					draw_tooltip_label(self, /*"benchpointlighttip"*/ STR(766), icons_LIGHT_POINT, e_toast_INFO);
				else
					draw_tooltip_label(self, /*"benchspotlighttip"*/ STR(767), icons_LIGHT_SPOT, e_toast_INFO);
				
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_CAMERA)
			{
				draw_sprite(ID_spr_bench_example, IntType(5), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchcameratip"*/ STR(768), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_BACKGROUND)
			{
				draw_sprite(ID_spr_bench_example, IntType(4), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchbackgroundtip"*/ STR(769), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_AUDIO)
			{
				draw_sprite(ID_spr_bench_example, IntType(2), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchaudiotip"*/ STR(770), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PATH)
			{
				draw_sprite(ID_spr_bench_example, IntType(3), (IntType)(sVar(dx)), (IntType)(sVar(dy)));
				sVar(dy) += IntType(144) + IntType(8);
				draw_tooltip_label(self, /*"benchpathtip"*/ STR(771), icons_INFO, e_toast_INFO);
			}
			if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PATH_POINT)
				draw_tooltip_label(self, /*"benchpathpointtip"*/ STR(772), icons_INFO, e_toast_INFO);
		}
		else
		{
			preview_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->preview, sVar(dx), sVar(dy), sVar(dw), IntType(144));
			sVar(dy) += IntType(144) + IntType(8);
			sBool(menu_bench) = true;
			switch ((IntType)ObjType(obj_bench_settings, sInt(bench_settings))->type)
			{
				case e_temp_type_CHARACTER:
				case e_temp_type_SPECIAL_BLOCK:
				case e_temp_type_BODYPART:
				{
					VarType labeltext, part;
					IntType list, capwid;
					StringType texcap, texmatcap, texnormcap;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_CHARACTER)
					{
						labeltext = text_get({ /*"benchmodel"*/ STR(773) });
						list = ObjType(obj_bench_settings, sInt(bench_settings))->char_list;
						texcap = /*"benchskin"*/ STR(774);
						texmatcap = /*"benchskinmaterial"*/ STR(775);
						texnormcap = /*"benchskinnormal"*/ STR(776);
						capwid = text_caption_width(self, { texcap, texmatcap, texnormcap });
						part = ObjType(obj_bench_settings, sInt(bench_settings))->model_file;
					}
					else
						if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_SPECIAL_BLOCK)
						{
							labeltext = text_get({ /*"benchblock"*/ STR(777) });
							list = ObjType(obj_bench_settings, sInt(bench_settings))->special_block_list;
							texcap = /*"benchspblocktex"*/ STR(778);
							texmatcap = /*"benchspblocktexmaterial"*/ STR(779);
							texnormcap = /*"benchspblocktexnormal"*/ STR(780);
							capwid = text_caption_width(self, { texcap, texmatcap, texnormcap });
							part = ObjType(obj_bench_settings, sInt(bench_settings))->model_file;
						}
						else
							if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_BODYPART)
							{
								labeltext = text_get({ /*"benchmodel"*/ STR(773) });
								list = ObjType(obj_bench_settings, sInt(bench_settings))->bodypart_model_list;
								texcap = /*"benchbodypartskin"*/ STR(781);
								texmatcap = /*"benchbodypartskinmaterial"*/ STR(782);
								texnormcap = /*"benchbodypartskinnormal"*/ STR(783);
								capwid = text_caption_width(self, { /*"benchbodypart"*/ STR(784), texcap, texmatcap, texnormcap });
								part = ObjType(obj_bench_settings, sInt(bench_settings))->model_part;
							}
					
					
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->model_name, false, labeltext);
					tab_next(self);
					VarType model;
					IntType statelen;
					model = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(idVar(sInt(bench_settings), model_name));
					statelen = array_length(VarType::CreateRef(ObjType(obj_bench_settings, sInt(bench_settings))->model_state));
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						capwid = max({ capwid, text_caption_width(self, { minecraft_asset_get_name(/*"modelstate"*/ STR(785), state) }) });
					}
					tab_set_collumns(self, { true, IntType(2) });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) != /*"true"*/ STR(786) && ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) != /*"false"*/ STR(787))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						sVar(menu_model_current) = model;
						sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
						tab_control(self, sReal(ui_small_height));
						if (draw_checkbox(self, /*"modelstate"*/ STR(785) + state, sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(786), null_))
						{
							sInt(menu_model_state) = sInt(menu_model_state_current);
							if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(786))
								action_bench_model_state(self, /*"false"*/ STR(787));
							else
								action_bench_model_state(self, /*"true"*/ STR(786));
							
						}
						tab_next(self);
					}
					tab_set_collumns(self, { false });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"true"*/ STR(786) || ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)) == /*"false"*/ STR(787))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i);
						sVar(menu_model_current) = model;
						sInt(menu_model_state_current) = DsMap(ObjType(obj_model, model)->states_map).Value(state);
						draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1)), minecraft_asset_get_name(/*"modelstatevalue"*/ STR(788), ObjType(obj_bench_settings, sInt(bench_settings))->model_state.Value(i + IntType(1))), ID_action_bench_model_state, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					sVar(menu_model_current) = null_;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_BODYPART && ObjType(obj_bench_settings, sInt(bench_settings))->model_file != null_)
					{
						draw_button_menu(self, { /*"benchbodypart"*/ STR(784), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->model_part_name, minecraft_asset_get_name(/*"modelpart"*/ STR(789), ObjType(obj_bench_settings, sInt(bench_settings))->model_part_name), ID_action_bench_model_part_name, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					VarType text, tex;
					text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, display_name);
					withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, global::_app->id)
						tex = res_get_model_texture(self, model_part_get_texture_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_texture_name_map));
					
					draw_button_menu(self, { texcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, text, ID_action_bench_model_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, display_name);
						withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, global::_app->id)
							tex = res_get_model_texture_material(self, model_part_get_texture_material_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_texture_material_name_map));
						
						draw_button_menu(self, { texmatcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, text, ID_action_bench_model_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, display_name);
						withOne (Object, ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, global::_app->id)
							tex = res_get_model_tex_normal(self, model_part_get_tex_normal_name(part, ObjType(obj_bench_settings, global::_app->bench_settings)->model_tex_normal_name_map));
						
						draw_button_menu(self, { texnormcap, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, text, ID_action_bench_model_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->pattern_type != /*""*/ STR(0))
					{
						tab_control_button_label(self);
						if (draw_button_label(self, /*"benchpatterneditor"*/ STR(790), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
							popup_pattern_editor_show(self, sInt(bench_settings));
						tab_next(self);
						if (sInt(popup) == sInt(popup_pattern_editor))
							ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model_name == /*"armor"*/ STR(791))
					{
						tab_control_button_label(self);
						if (draw_button_label(self, /*"bencharmoreditor"*/ STR(792), sVar(dx), sVar(dy), sVar(dw), null_, e_button_SECONDARY))
							popup_armor_editor_show(self, sInt(bench_settings));
						tab_next(self);
						if (sInt(popup) == sInt(popup_armor_editor))
							ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
					}
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, list)->scroll);
					break;
				}
				
				case e_temp_type_SCENERY:
				{
					IntType capwid;
					VarType text, tex;
					capwid = text_caption_width(self, { /*"benchscenery"*/ STR(793), /*"benchblocktex"*/ STR(794), /*"benchblocktexmaterial"*/ STR(795), /*"benchblocktexnormal"*/ STR(796) });
					text = text_get({ /*"listnone"*/ STR(797) });
					if (ObjType(obj_bench_settings, sInt(bench_settings))->scenery != null_)
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->scenery, display_name);
					draw_button_menu(self, { /*"benchscenery"*/ STR(793), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->scenery, text, ID_action_bench_scenery, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					draw_button_menu(self, { /*"benchblocktex"*/ STR(794), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, display_name), ID_action_bench_block_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						draw_button_menu(self, { /*"benchblocktexmaterial"*/ STR(795), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, display_name), ID_action_bench_block_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						draw_button_menu(self, { /*"benchblocktexnormal"*/ STR(796), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, display_name), ID_action_bench_block_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					break;
				}
				
				case e_temp_type_ITEM:
				{
					IntType capwid;
					VarType res, text, sprite;
					capwid = text_caption_width(self, { /*"typeitem"*/ STR(170) });
					res = ObjType(obj_bench_settings, sInt(bench_settings))->item_tex;
					if (!res_is_ready(res))
						res = global::mc_res;
					draw_label(self, { text_get({ /*"typeitem"*/ STR(170) }) + /*":"*/ STR(798), sVar(dx), sVar(dy) + IntType(12), fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary, sInt(font_label) });
					if (idInt(res, item_sheet_texture) != null_)
						draw_texture_slot(idInt(res, item_sheet_texture), ObjType(obj_bench_settings, sInt(bench_settings))->item_slot, sVar(dx) + capwid, sVar(dy) + IntType(4), IntType(16), IntType(16), idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_));
					else
					{
						RealType scale = min({ 16.0 / texture_width(idVar(res, texture)), 16.0 / texture_height(idVar(res, texture)) });
						draw_texture({ idVar(res, texture), sVar(dx) + capwid, sVar(dy) + IntType(4), scale, scale });
					}
					
					sVar(dy) += IntType(32);
					if (idInt(res, item_sheet_texture) != null_)
					{
						RealType slots_ = ((idVar(res, type) == e_res_type_PACK) ? VarType(ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->item_texture_list))) : (idVar(res, item_sheet_size).Value(X_) * idVar(res, item_sheet_size).Value(Y_)));
						sReal(listh) = IntType(162);
						draw_texture_picker(self, ObjType(obj_bench_settings, sInt(bench_settings))->item_slot, idInt(res, item_sheet_texture), sVar(dx), sVar(dy), sVar(dw), sReal(listh), slots_, idVar(res, item_sheet_size).Value(X_), idVar(res, item_sheet_size).Value(Y_), ObjType(obj_bench_settings, sInt(bench_settings))->item_scroll, ID_action_bench_item_slot);
						sVar(dy) += sReal(listh) + IntType(8);
					}
					VarType sx;
					sx = sVar(dx_start);
					sVar(dx_start) = sVar(dx);
					tab_set_collumns(self, { true, IntType(2) });
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitem3d"*/ STR(799), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_3d, ID_action_bench_item_3d);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitemfacecamera"*/ STR(800), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_face_camera, ID_action_bench_item_face_camera);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitembounce"*/ STR(801), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_bounce, ID_action_bench_item_bounce);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchitemspin"*/ STR(802), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->item_spin, ID_action_bench_item_spin);
					tab_next(self);
					tab_set_collumns(self, { false });
					sVar(dx_start) = sx;
					capwid = text_caption_width(self, { /*"benchitemtex"*/ STR(803), /*"benchitemtexmaterial"*/ STR(804), /*"benchitemtexnormal"*/ STR(805) });
					VarType tex = idInt(res, block_preview_texture);
					if (tex == null_)
						tex = idVar(res, texture);
					draw_button_menu(self, { /*"benchitemtex"*/ STR(803), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, display_name), ID_action_bench_item_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						VarType tex = idInt(res, block_preview_texture);
						if (tex == null_)
							tex = idVar(res, texture);
						draw_button_menu(self, { /*"benchitemtexmaterial"*/ STR(804), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, display_name), ID_action_bench_item_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						tex = idInt(res, block_preview_texture);
						if (tex == null_)
							tex = idVar(res, texture);
						draw_button_menu(self, { /*"benchitemtexnormal"*/ STR(805), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, display_name), ID_action_bench_item_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->item_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					sStr(window_scroll_focus) = string(ObjType(obj_bench_settings, sInt(bench_settings))->item_scroll);
					break;
				}
				
				case e_temp_type_BLOCK:
				{
					draw_set_font(sInt(font_label));
					IntType capwid;
					VarType text, sprite;
					capwid = text_caption_width(self, { /*"benchblocktex"*/ STR(794), /*"benchblocktexmaterial"*/ STR(795), /*"benchblocktexnormal"*/ STR(796) });
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->block_list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->block_name, false, text_get({ /*"benchblock"*/ STR(777) }));
					tab_next(self);
					VarType block;
					IntType statelen;
					block = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(idVar(sInt(bench_settings), block_name));
					statelen = array_length(VarType::CreateRef(ObjType(obj_bench_settings, sInt(bench_settings))->block_state));
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						capwid = max({ capwid, text_caption_width(self, { minecraft_asset_get_name(/*"blockstate"*/ STR(806), state) }) });
					}
					tab_set_collumns(self, { true, IntType(2) });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) != /*"true"*/ STR(786) && ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) != /*"false"*/ STR(787))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						sVar(menu_block_current) = block;
						sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
						tab_control(self, sReal(ui_small_height));
						if (draw_checkbox(self, /*"blockstate"*/ STR(806) + state, sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(786), null_))
						{
							sInt(menu_block_state) = sInt(menu_block_state_current);
							if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(786))
								action_bench_block_state(self, /*"false"*/ STR(787));
							else
								action_bench_block_state(self, /*"true"*/ STR(786));
							
						}
						tab_next(self);
					}
					tab_set_collumns(self, { false });
					for (IntType i = IntType(0); i < statelen; i += IntType(2))
					{
						if (ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"true"*/ STR(786) || ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)) == /*"false"*/ STR(787))
							continue;
						VarType state = ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i);
						sVar(menu_block_current) = block;
						sInt(menu_block_state_current) = DsMap(ObjType(obj_block, block)->states_map).Value(state);
						draw_button_menu(self, { state, e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1)), minecraft_asset_get_name(/*"blockstatevalue"*/ STR(807), ObjType(obj_bench_settings, sInt(bench_settings))->block_state.Value(i + IntType(1))), ID_action_bench_block_state, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += IntType(32);
					}
					sVar(menu_block_current) = null_;
					draw_button_menu(self, { /*"benchblocktex"*/ STR(794), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, display_name), ID_action_bench_block_tex, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						draw_button_menu(self, { /*"benchblocktexmaterial"*/ STR(795), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, display_name), ID_action_bench_block_tex_material, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_material, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						draw_button_menu(self, { /*"benchblocktexnormal"*/ STR(796), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, display_name), ID_action_bench_block_tex_normal, false, idInt(ObjType(obj_bench_settings, sInt(bench_settings))->block_tex_normal, block_preview_texture), null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, ObjType(obj_bench_settings, sInt(bench_settings))->block_list)->scroll);
					break;
				}
				
				case e_temp_type_PARTICLE_SPAWNER:
				{
					tab_control_sortlist(self, IntType(6));
					sortlist_draw(self, ObjType(obj_bench_settings, sInt(bench_settings))->particles_list, sVar(dx), sVar(dy), sVar(dw), sReal(tab_control_h), ObjType(obj_bench_settings, sInt(bench_settings))->particle_preset, false, text_get({ /*"benchparticlespreset"*/ STR(808) }));
					tab_next(self);
					sStr(window_scroll_focus) = string(ObjType(obj_sortlist, ObjType(obj_bench_settings, sInt(bench_settings))->particles_list)->scroll);
					break;
				}
				
				case e_temp_type_TEXT:
				{
					IntType capwid;
					capwid = text_caption_width(self, { /*"benchtextfont"*/ STR(809) });
					if (sReal(setting_advanced_mode) > 0)
					{
						draw_button_menu(self, { /*"benchtextfont"*/ STR(809), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->text_font, idVar(ObjType(obj_bench_settings, sInt(bench_settings))->text_font, display_name), ID_action_bench_text_font, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					VarType sx;
					sx = sVar(dx_start);
					sVar(dx_start) = sVar(dx);
					tab_set_collumns(self, { true, IntType(2) });
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchtext3d"*/ STR(810), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->text_3d, ID_action_bench_text_3d);
					tab_next(self);
					tab_control_checkbox(self);
					draw_checkbox(self, /*"benchtextfacecamera"*/ STR(811), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->text_face_camera, ID_action_bench_text_face_camera);
					tab_next(self);
					tab_set_collumns(self, { false });
					sVar(dx_start) = sx;
					break;
				}
				
				case e_tl_type_SHAPE:
				{
					IntType capwid;
					VarType text;
					capwid = text_caption_width(self, { /*"benchshapetype"*/ STR(812), /*"benchshapetex"*/ STR(813), /*"benchshapetexmaterial"*/ STR(814), /*"benchshapetexnormal"*/ STR(815) });
					text = text_get({ /*"type"*/ STR(816) + DsList(global::tl_type_name_list).Value(e_tl_type_CUBE + ObjType(obj_bench_settings, sInt(bench_settings))->shape_type) });
					draw_button_menu(self, { /*"benchshapetype"*/ STR(812), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), IntType(24), ObjType(obj_bench_settings, sInt(bench_settings))->shape_type, text, ID_action_bench_shape_type, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += IntType(32);
					VarType tex;
					text = text_get({ /*"listnone"*/ STR(797) });
					tex = null_;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex > 0)
					{
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, display_name);
						if (idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, type) != e_tl_type_CAMERA)
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, texture);
					}
					draw_button_menu(self, { /*"benchshapetex"*/ STR(813), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex, text, ID_action_bench_shape_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						text = text_get({ /*"listnone"*/ STR(797) });
						tex = null_;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material > 0)
						{
							text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, display_name);
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, texture);
						}
						draw_button_menu(self, { /*"benchshapetexmaterial"*/ STR(814), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_material, text, ID_action_bench_shape_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						text = text_get({ /*"listnone"*/ STR(797) });
						tex = null_;
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal > 0)
						{
							text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, display_name);
							tex = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, texture);
						}
						draw_button_menu(self, { /*"benchshapetexnormal"*/ STR(815), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_normal, text, ID_action_bench_shape_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CUBE || ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CYLINDER || ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_CONE)
					{
						if (sReal(setting_advanced_mode) > 0)
						{
							tab_control_checkbox(self);
							draw_checkbox(self, /*"benchshapetexmap"*/ STR(817), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->shape_tex_mapped, ID_action_bench_shape_tex_map, /*"benchshapetexmaptip"*/ STR(818));
							tab_next(self);
						}
					}
					else
						if (ObjType(obj_bench_settings, sInt(bench_settings))->shape_type == e_shape_type_SURFACE)
						{
							tab_control_checkbox(self);
							draw_checkbox(self, /*"benchshapefacecamera"*/ STR(819), sVar(dx), sVar(dy), ObjType(obj_bench_settings, sInt(bench_settings))->shape_face_camera, ID_action_bench_shape_face_camera);
							tab_next(self);
						}
					
					break;
				}
				
				case e_temp_type_MODEL:
				{
					IntType capwid = text_caption_width(self, { /*"benchmodel"*/ STR(773), /*"benchmodeltex"*/ STR(820), /*"benchmodeltexmaterial"*/ STR(821), /*"benchmodeltexnormal"*/ STR(822) });
					VarType text;
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model != null_)
						text = idVar(ObjType(obj_bench_settings, sInt(bench_settings))->model, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(797) });
					
					draw_button_menu(self, { /*"benchmodel"*/ STR(773), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model, text, ID_action_bench_model, false, null_, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					VarType texobj, tex;
					withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
					{
						if (self->model_file != null_ && !instance_exists(self->model_file))
							self->model_file = null_;
						texobj = temp_get_model_texobj(ScopeAny(self), null_);
						tex = temp_get_model_tex_preview(ScopeAny(self), texobj, self->model_file);
					}
					
					if (texobj != null_)
						text = idVar(texobj, display_name);
					else
						text = text_get({ /*"listnone"*/ STR(797) });
					
					if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex == null_)
						text = text_get({ /*"listdefault"*/ STR(823), text });
					draw_button_menu(self, { /*"benchmodeltex"*/ STR(820), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex, text, ID_action_bench_model_tex, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
					sVar(dy) += (sReal(ui_large_height) + IntType(8));
					if (sVar(project_render_material_maps) > 0)
					{
						withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
						{
							texobj = temp_get_model_tex_material_obj(ScopeAny(self), null_);
							tex = temp_get_model_tex_material_preview(ScopeAny(self), texobj, self->model_file);
						}
						
						if (texobj != null_)
							text = idVar(texobj, display_name);
						else
							text = text_get({ /*"listnone"*/ STR(797) });
						
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material == null_)
							text = text_get({ /*"listdefault"*/ STR(823), text });
						draw_button_menu(self, { /*"benchmodeltexmaterial"*/ STR(821), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_material, text, ID_action_bench_model_tex_material, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
						withOne (obj_bench_settings, sInt(bench_settings), global::_app->id)
						{
							texobj = temp_get_model_tex_normal_obj(ScopeAny(self), null_);
							tex = temp_get_model_tex_normal_preview(ScopeAny(self), texobj, self->model_file);
						}
						
						if (texobj != null_)
							text = idVar(texobj, display_name);
						else
							text = text_get({ /*"listnone"*/ STR(797) });
						
						if (ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal == null_)
							text = text_get({ /*"listdefault"*/ STR(823), text });
						draw_button_menu(self, { /*"benchmodeltexnormal"*/ STR(822), e_menu_LIST, sVar(dx), sVar(dy), sVar(dw), sReal(ui_large_height), ObjType(obj_bench_settings, sInt(bench_settings))->model_tex_normal, text, ID_action_bench_model_tex_normal, false, tex, null_, /*""*/ STR(0), null_, null_, capwid });
						sVar(dy) += (sReal(ui_large_height) + IntType(8));
					}
					break;
				}
				
			}
			
			sBool(menu_bench) = false;
		}
		
		draw_set_alpha(prevalpha);
		sVar(dx) = bx;
		tab_control_button_label(self);
		tab_next(self);
		sVar(dy) += IntType(4);
		RealType edit = (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_temp_type_PARTICLE_SPAWNER && sReal(setting_advanced_mode) > 0);
		VarType wid = ((edit > 0) ? VarType((RealType)sVar(dw) / 2.0 - IntType(4)) : sVar(dw));
		if (draw_button_label(self, /*"benchcreate"*/ STR(824), (edit > 0) ? (sVar(dx) + wid + 8.0) : sVar(dx), sy + sVar(dh) - IntType(56), wid, icons_ASSET_ADD))
		{
			action_bench_create(self);
			sStr(bench_show_ani_type) = /*"hide"*/ STR(760);
		}
		if (edit > 0)
		{
			if (draw_button_label(self, /*"benchcreateedit"*/ STR(825), sVar(dx), sy + sVar(dh) - IntType(56), wid, icons_PENCIL, e_button_SECONDARY))
			{
				action_bench_create(self, true);
				sStr(bench_show_ani_type) = /*"hide"*/ STR(760);
			}
		}
	}
	
	void bench_update_particles_list(ScopeAny self)
	{
		ArrType files = file_find(particles_directory, /*".miparticles"*/ STR(726));
		sortlist_clear(ObjType(obj_bench_settings, sInt(bench_settings))->particles_list);
		if (array_length(VarType::CreateRef(files)) > IntType(0))
		{
			for (IntType f = IntType(0); f < array_length(VarType::CreateRef(files)); f++)
				sortlist_add(ObjType(obj_bench_settings, sInt(bench_settings))->particles_list, files.Value(f));
			action_bench_particles(self, files.Value(IntType(0)));
		}
		else
			action_bench_particles(self, /*""*/ STR(0));
		
	}
	
	ArrType bezier_curve_cubic(ArrType p1, ArrType p2, ArrType p3, ArrType p4, RealType t)
	{
		ArrType t1, t2, t3, t4, t5;
		t1 = point_lerp(p1, p2, t);
		t2 = point_lerp(p2, p3, t);
		t3 = point_lerp(p3, p4, t);
		t4 = point_lerp(t1, t2, t);
		t5 = point_lerp(t2, t3, t);
		return point_lerp(t4, t5, t);
	}
	
	ArrType bezier_curve_quad(VarType p1, VarType p2, VarType p3, RealType t)
	{
		ArrType t1, t2;
		t1 = point_lerp(p1, p2, t);
		t2 = point_lerp(p2, p3, t);
		return point_lerp(t1, t2, t);
	}
	
	void block_animate(ScopeAny self, IntType root)
	{
		withOne (obj_timeline, (new obj_timeline)->id, self->id)
		{
			self->temp = self->id;
			self->inherit_rot_point = true;
			self->part_of = root;
			self->part_root = root;
			ds_list_add({ ObjType(obj_timeline, root)->part_list, self->id });
			tl_set_parent(ScopeAny(self), { root });
			if (idVar(self.otherId, model_name) != /*""*/ STR(0))
			{
				self->type = e_tl_type_SPECIAL_BLOCK;
				self->model_name = idVar(self.otherId, model_name);
				self->model_state = array_copy_1d(idVar(self.otherId, model_state));
				tl_update_scenery_part(ScopeAny(self));
				self->part_list = ds_list_create();
				if (self->model_file != null_)
				{
					for (IntType p = IntType(0); p < ds_list_size(idInt(self->model_file, file_part_list)); p++)
					{
						IntType partl = tl_new_part(self, DsList(idInt(self->model_file, file_part_list)).Value(p));
						ObjType(obj_timeline, partl)->part_root = root;
						ds_list_add({ self->part_list, partl });
					}
					tl_update_part_list(ScopeAny(self), self->model_file, self->id);
				}
			}
			else
			{
				self->type = e_tl_type_BLOCK;
				self->block_name = idVar(idVar(self.otherId, block), name);
				self->block_state = array_copy_1d(idVar(idVar(self.otherId, block), default_state));
				if (is_string(idVar(self.otherId, variant)))
					state_vars_add(VarType::CreateRef(self->block_state), ArrType::From({ /*"variant"*/ STR(826), idVar(self.otherId, variant) }));
				tl_update_scenery_part(ScopeAny(self));
				self->texture_filtering = true;
			}
			
			self->rot_point_custom = true;
			self->rot_point = array_copy_1d(idVar(self.otherId, rot_point));
			VecType pos = point3D_mul_matrix(idVar(self.otherId, position), matrix_create(point3D(IntType(0), idVec(idVar(ObjType(obj_timeline, root)->temp, scenery), scenery_size).Real(Y_) * block_size_, IntType(0)), vec3(IntType(0), IntType(0), IntType(90)), vec3(IntType(1))));
			self->value_default[e_value_POS_X] = snap(pos.Real(X_), 0.01);
			self->value_default[e_value_POS_Y] = snap(pos.Real(Y_), 0.01);
			self->value_default[e_value_POS_Z] = snap(pos.Real(Z_), 0.01);
			self->value_default[e_value_ROT_X] = idVar(self.otherId, rotation).Value(X_);
			self->value_default[e_value_ROT_Y] = idVar(self.otherId, rotation).Value(Y_);
			self->value_default[e_value_ROT_Z] = idVar(self.otherId, rotation).Value(Z_) + IntType(90);
			if (idVar(self.otherId, texture) != null_)
			{
				self->value_default[e_value_TEXTURE_OBJ] = idVar(self.otherId, texture);
				idInt(self->value_default.Value(e_value_TEXTURE_OBJ), count)++;
			}
			tl_update(ScopeAny(self));
			tl_update_values(ScopeAny(self));
			if (idBool(self.otherId, has_text))
			{
				VarType text, textpos, textrot, textscale, textcolor, textglowcolor, textemissive;
				if (self->part_list == null_)
					self->part_list = ds_list_create();
				text = idVar(self.otherId, text_front);
				textpos = idVar(self.otherId, text_front_position);
				textrot = idVar(self.otherId, text_front_rotation);
				textscale = idVar(self.otherId, text_front_scale);
				textcolor = idVar(self.otherId, text_front_color);
				textglowcolor = idVar(self.otherId, text_front_glow_color);
				textemissive = idVar(self.otherId, text_front_emissive);
				withOne (obj_timeline, (new obj_timeline)->id, self->id)
				{
					self->type = e_tl_type_TEXT;
					self->temp = self->id;
					self->inherit_rot_point = true;
					self->part_of = self.otherId;
					ds_list_add({ ObjType(obj_timeline, self.otherId)->part_list, self->id });
					tl_set_parent(ScopeAny(self), { self.otherId });
					ObjType(obj_timeline, self->id)->text = text;
					tl_update_scenery_part(ScopeAny(self));
					self->value_default[e_value_POS_X] = textpos.Value(X_);
					self->value_default[e_value_POS_Y] = textpos.Value(Y_);
					self->value_default[e_value_POS_Z] = textpos.Value(Z_);
					self->value_default[e_value_ROT_X] = textrot.Value(X_);
					self->value_default[e_value_ROT_Y] = textrot.Value(Y_);
					self->value_default[e_value_ROT_Z] = textrot.Value(Z_);
					self->value_default[e_value_SCA_X] = textscale;
					self->value_default[e_value_SCA_Y] = textscale;
					self->value_default[e_value_SCA_Z] = textscale;
					self->value_default[e_value_RGB_MUL] = textcolor;
					self->value_default[e_value_EMISSIVE] = textemissive;
					if (textemissive > IntType(0))
					{
						self->value_default[e_value_TEXT_OUTLINE] = true;
						self->value_default[e_value_TEXT_OUTLINE_COLOR] = textglowcolor;
					}
					tl_update(ScopeAny(self));
					tl_update_values(ScopeAny(self));
				}
				
				text = idVar(self.otherId, text_back);
				textpos = idVar(self.otherId, text_back_position);
				textrot = idVar(self.otherId, text_back_rotation);
				textscale = idVar(self.otherId, text_back_scale);
				textcolor = idVar(self.otherId, text_back_color);
				textglowcolor = idVar(self.otherId, text_back_glow_color);
				textemissive = idVar(self.otherId, text_back_emissive);
				withOne (obj_timeline, (new obj_timeline)->id, self->id)
				{
					self->type = e_tl_type_TEXT;
					self->temp = self->id;
					self->inherit_rot_point = true;
					self->part_of = self.otherId;
					ds_list_add({ ObjType(obj_timeline, self.otherId)->part_list, self->id });
					tl_set_parent(ScopeAny(self), { self.otherId });
					ObjType(obj_timeline, self->id)->text = text;
					tl_update_scenery_part(ScopeAny(self));
					self->value_default[e_value_POS_X] = textpos.Value(X_);
					self->value_default[e_value_POS_Y] = textpos.Value(Y_);
					self->value_default[e_value_POS_Z] = textpos.Value(Z_);
					self->value_default[e_value_ROT_X] = textrot.Value(X_);
					self->value_default[e_value_ROT_Y] = textrot.Value(Y_);
					self->value_default[e_value_ROT_Z] = textrot.Value(Z_);
					self->value_default[e_value_SCA_X] = textscale;
					self->value_default[e_value_SCA_Y] = textscale;
					self->value_default[e_value_SCA_Z] = textscale;
					self->value_default[e_value_RGB_MUL] = textcolor;
					self->value_default[e_value_EMISSIVE] = textemissive;
					if (textemissive > IntType(0))
					{
						self->value_default[e_value_TEXT_OUTLINE] = true;
						self->value_default[e_value_TEXT_OUTLINE_COLOR] = textglowcolor;
					}
					tl_update(ScopeAny(self));
					tl_update_values(ScopeAny(self));
				}
				
			}
			if (idVar(self.otherId, pattern_type) != /*""*/ STR(0))
			{
				self->pattern_base_color = idVar(self.otherId, banner_color);
				self->pattern_pattern_list = array_copy_1d(idVar(self.otherId, banner_patterns));
				self->pattern_color_list = array_copy_1d(idVar(self.otherId, banner_pattern_colors));
				self->pattern_type = idVar(self.otherId, pattern_type);
				if (self->pattern_type == /*"banner"*/ STR(827))
				{
					VarType stand = DsList(self->tree_list).Value(IntType(0));
					ObjType(obj_timeline, stand)->pattern_skin = self->pattern_skin;
					ObjType(obj_timeline, stand)->pattern_type = /*"banner"*/ STR(827);
					VarType banner = DsList(ObjType(obj_timeline, stand)->tree_list).Value(IntType(0));
					ObjType(obj_timeline, banner)->pattern_skin = self->pattern_skin;
					ObjType(obj_timeline, banner)->pattern_type = /*"banner"*/ STR(827);
				}
				array_add(VarType::CreateRef(global::pattern_update), self->id);
			}
		}
		
	}
	
	RealType block_generate_liquid(ScopeAny self, RealType waterlogged)
	{
		BoolType matchxp, matchxn, matchyp, matchyn, matchzp, matchzn;
		BoolType solidxp, solidxn, solidyp, solidyn, solidzp, solidzn;
		matchxp = (!sBool(build_edge_xp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)) == sInt(block_current));
		matchxn = (!sBool(build_edge_xn) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)) == sInt(block_current));
		matchyp = (!sBool(build_edge_yp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)) == sInt(block_current));
		matchyn = (!sBool(build_edge_yn) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)) == sInt(block_current));
		matchzp = (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1)) == sInt(block_current));
		matchzn = (!sBool(build_edge_zn) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1)) == sInt(block_current));
		solidxp = (sInt(block_face_min_depth_xp) == e_block_depth_DEPTH0 && sBool(block_face_full_xp));
		solidxn = (sInt(block_face_min_depth_xn) == e_block_depth_DEPTH0 && sBool(block_face_full_xn));
		solidyp = (sInt(block_face_min_depth_yp) == e_block_depth_DEPTH0 && sBool(block_face_full_yp));
		solidyn = (sInt(block_face_min_depth_yn) == e_block_depth_DEPTH0 && sBool(block_face_full_yn));
		solidzp = (sInt(block_face_min_depth_zp) == e_block_depth_DEPTH0 && sBool(block_face_full_zp));
		solidzn = (sInt(block_face_min_depth_zn) == e_block_depth_DEPTH0 && sBool(block_face_full_zn));
		matchxp = (matchxp || (!sBool(build_edge_xp) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z))));
		matchxn = (matchxn || (!sBool(build_edge_xn) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z))));
		matchyp = (matchyp || (!sBool(build_edge_yp) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z))));
		matchyn = (matchyn || (!sBool(build_edge_yn) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z))));
		matchzp = (matchzp || (!sBool(build_edge_zp) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) + IntType(1))));
		matchzn = (matchzn || (!sBool(build_edge_zn) && builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y), sInt(build_pos_z) - IntType(1))));
		if (global::_app->project_render_liquid_animation > 0)
		{
			IntType model;
			if (matchzp)
			{
				if (solidxp && !sBool(build_edge_xp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1)) != sInt(block_current))
				{
					solidxp = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
					if (model != null_)
						solidxp = (idInt(model, face_min_depth_xn) == e_block_depth_DEPTH0 && idBool(model, face_full_xn));
				}
				if (solidxn && !sBool(build_edge_xn) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1)) != sInt(block_current))
				{
					solidxn = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1));
					if (model != null_)
						solidxn = (idInt(model, face_min_depth_xp) == e_block_depth_DEPTH0 && idBool(model, face_full_xp));
				}
				if (solidyp && !sBool(build_edge_yp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1)) != sInt(block_current))
				{
					solidyp = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1));
					if (model != null_)
						solidyp = (idInt(model, face_min_depth_yn) == e_block_depth_DEPTH0 && idBool(model, face_full_yn));
				}
				if (solidyn && !sBool(build_edge_yn) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1)) != sInt(block_current))
				{
					solidyn = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1));
					if (model != null_)
						solidyn = (idInt(model, face_min_depth_yp) == e_block_depth_DEPTH0 && idBool(model, face_full_yp));
				}
			}
			if (matchzn)
			{
				if (solidxp && !sBool(build_edge_xp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1)) != sInt(block_current))
				{
					solidxp = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
					if (model != null_)
						solidxp = (idInt(model, face_min_depth_xn) == e_block_depth_DEPTH0 && idBool(model, face_full_xn));
				}
				if (solidxn && !sBool(build_edge_xn) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1)) != sInt(block_current))
				{
					solidxn = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) - IntType(1));
					if (model != null_)
						solidxn = (idInt(model, face_min_depth_xp) == e_block_depth_DEPTH0 && idBool(model, face_full_xp));
				}
				if (solidyp && !sBool(build_edge_yp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) - IntType(1)) != sInt(block_current))
				{
					solidyp = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) - IntType(1));
					if (model != null_)
						solidyp = (idInt(model, face_min_depth_yn) == e_block_depth_DEPTH0 && idBool(model, face_full_yn));
				}
				if (solidyn && !sBool(build_edge_yn) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) - IntType(1)) != sInt(block_current))
				{
					solidyn = false;
					model = builder_get_render_model(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) - IntType(1));
					if (model != null_)
						solidyn = (idInt(model, face_min_depth_yp) == e_block_depth_DEPTH0 && idBool(model, face_full_yp));
				}
			}
		}
		if ((matchxp || solidxp) && (matchxn || solidxn) && (matchyp || solidyp) && (matchyn || solidyn) && matchzp && (matchzn || solidzn))
			return IntType(0);
		IntType slot, dep, vbuf;
		RealType sheetwidth, sheetheight;
		RealType slotstillposx, slotstillposy, slotstillsizex, slotstillsizey;
		RealType slotflowposx, slotflowposy, slotflowsizex, slotflowsizey;
		slot = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_liquid_slot_map).Value(idVar(sInt(block_current), name));
		dep = DsList(ObjType(obj_resource, global::mc_res)->block_sheet_ani_depth_list).Value(slot);
		if (idVar(sInt(block_current), name) == /*"water"*/ STR(828))
			vbuf = e_block_vbuffer_WATER;
		else
			vbuf = e_block_vbuffer_ANIMATED;
		
		sheetwidth = block_sheet_ani_width;
		sheetheight = block_sheet_ani_height;
		slotstillposx = (mod(slot, sheetwidth)) * block_size_;
		slotstillposy = ((IntType)(slot / sheetwidth)) * block_size_;
		slotstillsizex = 1.0 / (sheetwidth * block_size_);
		slotstillsizey = 1.0 / (sheetheight * block_size_);
		slot = DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_liquid_slot_map).Value(/*"flowing_"*/ STR(829) + idVar(sInt(block_current), name));
		slotflowposx = (mod(slot, sheetwidth)) * block_size_;
		slotflowposy = ((IntType)(slot / sheetwidth)) * block_size_;
		slotflowsizex = 1.0 / (sheetwidth * block_size_);
		slotflowsizey = 1.0 / (sheetheight * block_size_);
		BoolType topflow;
		RealType topangle;
		topflow = true;
		topangle = IntType(0);
		RealType level = ((waterlogged > 0) ? IntType(0) : sReal(block_state_id_current));
		RealType corner0z, corner1z, corner2z, corner3z, minz, averagez;
		if (global::_app->project_render_liquid_animation > 0)
		{
			sInt(block_vertex_wave) = e_vertex_wave_Z_ONLY;
			if (matchzn)
				sInt(block_vertex_wave_zmin) = null_;
			else
				sInt(block_vertex_wave_zmin) = sInt(block_pos_z);
			
		}
		sVar(block_vertex_rgb) = c_white;
		sReal(block_vertex_alpha) = IntType(1);
		if ((IntType)(level / IntType(8)) || matchzp)
		{
			corner0z = block_size_;
			corner1z = block_size_;
			corner2z = block_size_;
			corner3z = block_size_;
			minz = block_size_;
			averagez = block_size_;
			topflow = false;
		}
		else
		{
			RealType sidelevelxp, sidelevelxn, sidelevelyp, sidelevelyn;
			sidelevelxp = level;
			sidelevelxn = level;
			sidelevelyp = level;
			sidelevelyn = level;
			RealType corner0level, corner1level, corner2level, corner3level;
			corner0level = level;
			corner1level = level;
			corner2level = level;
			corner3level = level;
			if (!(waterlogged > 0))
			{
				if (!sBool(build_edge_xp) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						sidelevelxp = IntType(8);
					else
						if (matchxp)
							sidelevelxp = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_xn) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						sidelevelxn = IntType(8);
					else
						if (matchxn)
							sidelevelxn = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_yp) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						sidelevelyp = IntType(8);
					else
						if (matchyp)
							sidelevelyp = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_yn) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						sidelevelyn = IntType(8);
					else
						if (matchyn)
							sidelevelyn = builder_get_state_id(self, sInt(build_pos_x), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_xn) && !sBool(build_edge_yn) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						corner0level = IntType(8);
					else
						if (builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)) == sInt(block_current))
							corner0level = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_xp) && !sBool(build_edge_yn) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						corner1level = IntType(8);
					else
						if (builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z)) == sInt(block_current))
							corner1level = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) - IntType(1), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_xp) && !sBool(build_edge_yp) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) + IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						corner2level = IntType(8);
					else
						if (builder_get_block(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)) == sInt(block_current))
							corner2level = builder_get_state_id(self, sInt(build_pos_x) + IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
					
				}
				if (!sBool(build_edge_xn) && !sBool(build_edge_yp) && !builder_get_waterlogged(Scope<obj_builder_thread>(self), sInt(build_pos_x) - IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)))
				{
					if (!sBool(build_edge_zp) && builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z) + IntType(1)) == sInt(block_current))
						corner3level = IntType(8);
					else
						if (builder_get_block(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z)) == sInt(block_current))
							corner3level = builder_get_state_id(self, sInt(build_pos_x) - IntType(1), sInt(build_pos_y) + IntType(1), sInt(build_pos_z));
					
				}
			}
			IntType flowxp, flowxn, flowyp, flowyn;
			flowxp = IntType(0);
			flowxn = IntType(0);
			flowyp = IntType(0);
			flowyn = IntType(0);
			if (mod(sidelevelxp, IntType(8)) < level)
				flowxn++;
			else
				if (mod(sidelevelxp, IntType(8)) > level)
					flowxp++;
			
			if (mod(sidelevelxn, IntType(8)) < level)
				flowxp++;
			else
				if (mod(sidelevelxn, IntType(8)) > level)
					flowxn++;
			
			if (mod(sidelevelyp, IntType(8)) < level)
				flowyn++;
			else
				if (mod(sidelevelyp, IntType(8)) > level)
					flowyp++;
			
			if (mod(sidelevelyn, IntType(8)) < level)
				flowyp++;
			else
				if (mod(sidelevelyn, IntType(8)) > level)
					flowyn++;
			
			RealType myz, sidezxp, sidezxn, sidezyp, sidezyn;
			myz = IntType(14) - (level / 7.0) * 13.5;
			sidezxp = (((IntType)(sidelevelxp / IntType(8))) ? block_size_ : (IntType(14) - ((sidelevelxp / 7.0) * 13.5)));
			sidezxn = (((IntType)(sidelevelxn / IntType(8))) ? block_size_ : (IntType(14) - ((sidelevelxn / 7.0) * 13.5)));
			sidezyp = (((IntType)(sidelevelyp / IntType(8))) ? block_size_ : (IntType(14) - ((sidelevelyp / 7.0) * 13.5)));
			sidezyn = (((IntType)(sidelevelyn / IntType(8))) ? block_size_ : (IntType(14) - ((sidelevelyn / 7.0) * 13.5)));
			corner0z = (((IntType)(corner0level / IntType(8))) ? block_size_ : (IntType(14) - ((corner0level / 7.0) * 13.5)));
			corner1z = (((IntType)(corner1level / IntType(8))) ? block_size_ : (IntType(14) - ((corner1level / 7.0) * 13.5)));
			corner2z = (((IntType)(corner2level / IntType(8))) ? block_size_ : (IntType(14) - ((corner2level / 7.0) * 13.5)));
			corner3z = (((IntType)(corner3level / IntType(8))) ? block_size_ : (IntType(14) - ((corner3level / 7.0) * 13.5)));
			corner0z = max({ corner0z, sidezxn, sidezyn, myz });
			corner1z = max({ corner1z, sidezxp, sidezyn, myz });
			corner2z = max({ corner2z, sidezxp, sidezyp, myz });
			corner3z = max({ corner3z, sidezxn, sidezyp, myz });
			averagez = (corner0z + corner1z + corner2z + corner3z) / 4.0;
			minz = min({ corner0z, corner1z, corner2z, corner3z });
			if ((!(flowxn > 0) && !(flowxp > 0) && !(flowyn > 0) && !(flowyp > 0)) || (flowxn > 0 && flowxp > 0 && flowyn > 0 && flowyp > 0) || (flowxn > 0 && flowxp > 0 && !(flowyn > 0) && !(flowyp > 0)) || (!(flowxn > 0) && !(flowxp > 0) && flowyn > 0 && flowyp > 0))
				topflow = false;
			else
				if (flowxn > 0 && flowxp > 0 && flowyp > 0)
					topangle = IntType(0);
				else
					if (flowxn > 0 && flowxp > 0 && flowyn > 0)
						topangle = IntType(180);
					else
						if (flowxp > 0 && flowyn > 0 && flowyp > 0)
							topangle = IntType(90);
						else
							if (flowxn > 0 && flowyn > 0 && flowyp > 0)
								topangle = IntType(270);
							else
								if (flowxn > 0 && flowyn > 0)
									topangle = IntType(180) + IntType(45) + IntType(10) * (flowxn - IntType(1)) - IntType(10) * (flowyn - IntType(1));
								else
									if (flowxp > 0 && flowyn > 0)
										topangle = IntType(180) - IntType(45) + IntType(10) * (flowyn - IntType(1)) - IntType(10) * (flowxp - IntType(1));
									else
										if (flowxn > 0 && flowyp > 0)
											topangle = IntType(270) + IntType(45) + IntType(10) * (flowyp - IntType(1)) - IntType(10) * (flowxn - IntType(1));
										else
											if (flowxp > 0 && flowyp > 0)
												topangle = IntType(45) + IntType(10) * (flowxp - IntType(1)) - IntType(10) * (flowyp - IntType(1));
											else
												if (flowyp > 0)
													topangle = IntType(0);
												else
													if (flowxp > 0)
														topangle = IntType(90);
													else
														if (flowyn > 0)
															topangle = IntType(180);
														else
															if (flowxn > 0)
																topangle = IntType(270);
													
												
											
										
									
								
							
						
					
				
			
			
		}
		
		RealType sidetex0x, sidetex0y, sidetex1x, sidetex1y, sidetex2x, sidetex2y, sidetex3x, sidetex3y;
		RealType cornerlefttex0x, cornerlefttex0y, cornerlefttex1x, cornerlefttex1y, cornerlefttex2x, cornerlefttex2y, cornerlefttex3x, cornerlefttex3y;
		RealType cornerrighttex0x, cornerrighttex0y, cornerrighttex1x, cornerrighttex1y, cornerrighttex2x, cornerrighttex2y, cornerrighttex3x, cornerrighttex3y;
		RealType toptex0x, toptex0y, toptex1x, toptex1y, toptex2x, toptex2y, toptex3x, toptex3y;
		RealType topmidtexx, topmidtexy;
		sidetex0x = IntType(0);
		sidetex0y = block_size_ - minz;
		sidetex1x = block_size_;
		sidetex1y = block_size_ - minz;
		sidetex2x = block_size_;
		sidetex2y = block_size_;
		sidetex3x = IntType(0);
		sidetex3y = block_size_;
		cornerlefttex0x = IntType(0);
		cornerlefttex0y = block_size_ - corner0z;
		cornerlefttex1x = IntType(0);
		cornerlefttex1y = block_size_ - corner1z;
		cornerlefttex2x = IntType(0);
		cornerlefttex2y = block_size_ - corner2z;
		cornerlefttex3x = IntType(0);
		cornerlefttex3y = block_size_ - corner3z;
		cornerrighttex0x = block_size_;
		cornerrighttex0y = block_size_ - corner0z;
		cornerrighttex1x = block_size_;
		cornerrighttex1y = block_size_ - corner1z;
		cornerrighttex2x = block_size_;
		cornerrighttex2y = block_size_ - corner2z;
		cornerrighttex3x = block_size_;
		cornerrighttex3y = block_size_ - corner3z;
		if (topangle != IntType(0))
		{
			RealType p = (mod_fix(topangle, IntType(90)) / 90.0) * block_size_;
			toptex0x = p;
			toptex0y = IntType(0);
			toptex1x = block_size_;
			toptex1y = p;
			toptex2x = block_size_ - p;
			toptex2y = block_size_;
			toptex3x = IntType(0);
			toptex3y = block_size_ - p;
			for (IntType _it = 0, _it_max = (IntType)(topangle / IntType(90)); _it < _it_max; _it++)
			{
				RealType tmpx, tmpy;
				tmpx = toptex0x;
				tmpy = toptex0y;
				toptex0x = toptex1x;
				toptex0y = toptex1y;
				toptex1x = toptex2x;
				toptex1y = toptex2y;
				toptex2x = toptex3x;
				toptex2y = toptex3y;
				toptex3x = tmpx;
				toptex3y = tmpy;
			}
		}
		else
		{
			toptex0x = IntType(0);
			toptex0y = IntType(0);
			toptex1x = block_size_;
			toptex1y = IntType(0);
			toptex2x = block_size_;
			toptex2y = block_size_;
			toptex3x = IntType(0);
			toptex3y = block_size_;
		}
		
		topmidtexx = block_size_ / 2.0;
		topmidtexy = block_size_ / 2.0;
		sidetex0x = (sidetex0x + slotflowposx) * slotflowsizex;
		sidetex0y = (sidetex0y + slotflowposy) * slotflowsizey;
		sidetex1x = (sidetex1x + slotflowposx) * slotflowsizex;
		sidetex1y = (sidetex1y + slotflowposy) * slotflowsizey;
		sidetex2x = (sidetex2x + slotflowposx) * slotflowsizex;
		sidetex2y = (sidetex2y + slotflowposy) * slotflowsizey;
		sidetex3x = (sidetex3x + slotflowposx) * slotflowsizex;
		sidetex3y = (sidetex3y + slotflowposy) * slotflowsizey;
		cornerlefttex0x = (cornerlefttex0x + slotflowposx) * slotflowsizex;
		cornerlefttex0y = (cornerlefttex0y + slotflowposy) * slotflowsizey;
		cornerlefttex1x = (cornerlefttex1x + slotflowposx) * slotflowsizex;
		cornerlefttex1y = (cornerlefttex1y + slotflowposy) * slotflowsizey;
		cornerlefttex2x = (cornerlefttex2x + slotflowposx) * slotflowsizex;
		cornerlefttex2y = (cornerlefttex2y + slotflowposy) * slotflowsizey;
		cornerlefttex3x = (cornerlefttex3x + slotflowposx) * slotflowsizex;
		cornerlefttex3y = (cornerlefttex3y + slotflowposy) * slotflowsizey;
		cornerrighttex0x = (cornerrighttex0x + slotflowposx) * slotflowsizex;
		cornerrighttex0y = (cornerrighttex0y + slotflowposy) * slotflowsizey;
		cornerrighttex1x = (cornerrighttex1x + slotflowposx) * slotflowsizex;
		cornerrighttex1y = (cornerrighttex1y + slotflowposy) * slotflowsizey;
		cornerrighttex2x = (cornerrighttex2x + slotflowposx) * slotflowsizex;
		cornerrighttex2y = (cornerrighttex2y + slotflowposy) * slotflowsizey;
		cornerrighttex3x = (cornerrighttex3x + slotflowposx) * slotflowsizex;
		cornerrighttex3y = (cornerrighttex3y + slotflowposy) * slotflowsizey;
		if (topflow)
		{
			toptex0x = (toptex0x + slotflowposx) * slotflowsizex;
			toptex0y = (toptex0y + slotflowposy) * slotflowsizey;
			toptex1x = (toptex1x + slotflowposx) * slotflowsizex;
			toptex1y = (toptex1y + slotflowposy) * slotflowsizey;
			toptex2x = (toptex2x + slotflowposx) * slotflowsizex;
			toptex2y = (toptex2y + slotflowposy) * slotflowsizey;
			toptex3x = (toptex3x + slotflowposx) * slotflowsizex;
			toptex3y = (toptex3y + slotflowposy) * slotflowsizey;
			topmidtexx = (topmidtexx + slotflowposx) * slotflowsizex;
			topmidtexy = (topmidtexy + slotflowposy) * slotflowsizey;
		}
		else
		{
			toptex0x = (toptex0x + slotstillposx) * slotstillsizex;
			toptex0y = (toptex0y + slotstillposy) * slotstillsizey;
			toptex1x = (toptex1x + slotstillposx) * slotstillsizex;
			toptex1y = (toptex1y + slotstillposy) * slotstillsizey;
			toptex2x = (toptex2x + slotstillposx) * slotstillsizex;
			toptex2y = (toptex2y + slotstillposy) * slotstillsizey;
			toptex3x = (toptex3x + slotstillposx) * slotstillsizex;
			toptex3y = (toptex3y + slotstillposy) * slotstillsizey;
			topmidtexx = (topmidtexx + slotstillposx) * slotstillsizex;
			topmidtexy = (topmidtexy + slotstillposy) * slotstillsizey;
		}
		
		RealType x1, x2, y1, y2, z1, z2;
		RealType midx, midy, midz;
		x1 = sInt(block_pos_x);
		y1 = sInt(block_pos_y);
		z1 = floor(sInt(block_pos_z));
		x2 = x1 + block_size_;
		y2 = y1 + block_size_;
		z2 = z1 + minz;
		midx = x1 + block_size_ / 2.0;
		midy = y1 + block_size_ / 2.0;
		midz = z1 + averagez;
		if (waterlogged > 0)
		{
			RealType indent = 0.05;
			if (!matchxp)
				x2 -= indent;
			if (!matchxn)
				x1 += indent;
			if (!matchyp)
				y2 -= indent;
			if (!matchyn)
				y1 += indent;
		}
		corner0z += z1;
		corner1z += z1;
		corner2z += z1;
		corner3z += z1;
		sVar(block_vbuffer_current) = ObjType(obj_builder, global::mc_builder)->vbuffer[dep][vbuf];
		sVar(block_vertex_emissive) = idVar(sInt(block_current), emissive);
		if (!matchxp && !solidxp)
		{
			builder_add_face(Scope<obj_builder_thread>(self), x2, y2, z2, x2, y1, z2, x2, y1, z1, x2, y2, z1, sidetex0x, sidetex0y, sidetex1x, sidetex1y, sidetex2x, sidetex2y, sidetex3x, sidetex3y, null_);
			if (corner1z > corner2z)
				builder_add_triangle(Scope<obj_builder_thread>(self), x2, y1, z2, x2, y2, z2, x2, y1, corner1z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerrighttex1x, cornerrighttex1y, null_);
			else
				builder_add_triangle(Scope<obj_builder_thread>(self), x2, y1, z2, x2, y2, z2, x2, y2, corner2z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerlefttex2x, cornerlefttex2y, null_);
			
		}
		if (!matchxn && !solidxn)
		{
			builder_add_face(Scope<obj_builder_thread>(self), x1, y1, z2, x1, y2, z2, x1, y2, z1, x1, y1, z1, sidetex0x, sidetex0y, sidetex1x, sidetex1y, sidetex2x, sidetex2y, sidetex3x, sidetex3y, null_);
			if (corner3z > corner0z)
				builder_add_triangle(Scope<obj_builder_thread>(self), x1, y2, z2, x1, y1, z2, x1, y2, corner3z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerrighttex3x, cornerrighttex3y, null_);
			else
				builder_add_triangle(Scope<obj_builder_thread>(self), x1, y2, z2, x1, y1, z2, x1, y1, corner0z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerlefttex0x, cornerlefttex0y, null_);
			
		}
		if (!matchyp && !solidyp)
		{
			builder_add_face(Scope<obj_builder_thread>(self), x1, y2, z2, x2, y2, z2, x2, y2, z1, x1, y2, z1, sidetex0x, sidetex0y, sidetex1x, sidetex1y, sidetex2x, sidetex2y, sidetex3x, sidetex3y, null_);
			if (corner2z > corner3z)
				builder_add_triangle(Scope<obj_builder_thread>(self), x2, y2, z2, x1, y2, z2, x2, y2, corner2z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerrighttex2x, cornerrighttex2y, null_);
			else
				builder_add_triangle(Scope<obj_builder_thread>(self), x2, y2, z2, x1, y2, z2, x1, y2, corner3z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerlefttex3x, cornerlefttex3y, null_);
			
		}
		if (!matchyn && !solidyn)
		{
			builder_add_face(Scope<obj_builder_thread>(self), x2, y1, z2, x1, y1, z2, x1, y1, z1, x2, y1, z1, sidetex0x, sidetex0y, sidetex1x, sidetex1y, sidetex2x, sidetex2y, sidetex3x, sidetex3y, null_);
			if (corner0z > corner1z)
				builder_add_triangle(Scope<obj_builder_thread>(self), x1, y1, z2, x2, y1, z2, x1, y1, corner0z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerrighttex0x, cornerrighttex0y, null_);
			else
				builder_add_triangle(Scope<obj_builder_thread>(self), x1, y1, z2, x2, y1, z2, x2, y1, corner1z, sidetex1x, sidetex1y, sidetex0x, sidetex0y, cornerlefttex1x, cornerlefttex1y, null_);
			
		}
		if (!matchzp)
		{
			builder_add_triangle(Scope<obj_builder_thread>(self), midx, midy, midz, x1, y1, corner0z, x2, y1, corner1z, topmidtexx, topmidtexy, toptex0x, toptex0y, toptex1x, toptex1y, null_);
			builder_add_triangle(Scope<obj_builder_thread>(self), midx, midy, midz, x2, y1, corner1z, x2, y2, corner2z, topmidtexx, topmidtexy, toptex1x, toptex1y, toptex2x, toptex2y, null_);
			builder_add_triangle(Scope<obj_builder_thread>(self), midx, midy, midz, x2, y2, corner2z, x1, y2, corner3z, topmidtexx, topmidtexy, toptex2x, toptex2y, toptex3x, toptex3y, null_);
			builder_add_triangle(Scope<obj_builder_thread>(self), midx, midy, midz, x1, y2, corner3z, x1, y1, corner0z, topmidtexx, topmidtexy, toptex3x, toptex3y, toptex0x, toptex0y, null_);
		}
		if (!matchzn && !solidzn)
			builder_add_face(Scope<obj_builder_thread>(self), x1, y2, z1, x2, y2, z1, x2, y1, z1, x1, y1, z1, toptex3x, toptex3y, toptex2x, toptex2y, toptex1x, toptex1y, toptex0x, toptex0y, null_);
		sVar(block_vertex_rgb) = c_white;
		sReal(block_vertex_alpha) = IntType(1);
		return 0.0;
	}
	
}
