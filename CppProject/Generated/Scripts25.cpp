/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.16 19:54:52 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void camera_control_pan(ScopeAny self, VarType cam)
	{
		RealType mx, my, move;
		MatrixType mat;
		VecType vert;
		mx = -((gmlGlobal::mouse_x - sVar(mouse_previous_x)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		my = ((gmlGlobal::mouse_y - sVar(mouse_previous_y)) / 8.0) * (.075 * ((RealType)sVar(cam_work_zoom) / 50.0));
		move = IntType(4) * sReal(setting_move_speed);
		app_mouse_wrap(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height));
		if (!(cam > 0))
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(sVar(cam_work_angle_look_z), IntType(0), sVar(cam_work_angle_look_xy) + IntType(90)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			sVec(cam_work_from).Real(X_) += vert.Real(X_);
			sVec(cam_work_from).Real(Y_) += vert.Real(Y_);
			sVec(cam_work_from).Real(Z_) += vert.Real(Z_);
			camera_work_set_angle();
		}
		else
		{
			mat = matrix_create(vec3(IntType(0), IntType(0), IntType(0)), vec3(-idVar(cam, value).Value(e_value_ROT_X), IntType(0), idVar(cam, value).Value(e_value_ROT_Z) + IntType(180)), vec3(IntType(1)));
			vert = vec3_mul_matrix(vec3(mx * move, IntType(0), my * move), mat);
			tl_value_set_start(self, ID_camera_control_pan, true);
			tl_value_set(self, { e_value_POS_X, vert.Real(X_), true });
			tl_value_set(self, { e_value_POS_Y, vert.Real(Y_), true });
			tl_value_set(self, { e_value_POS_Z, vert.Real(Z_), true });
			tl_value_set_done();
		}
		
	}
	
	void camera_control_rotate(ScopeAny self, VarType cam, IntType lockx, IntType locky)
	{
		RealType mx, my;
		mx = -((display_mouse_get_x() - lockx) / 4.0);
		my = ((display_mouse_get_y() - locky) / 4.0);
		display_mouse_set(lockx, locky);
		if (!(cam > 0))
		{
			sVar(cam_work_angle_xy) += mx;
			sVar(cam_work_angle_z) += my;
			sVar(cam_work_angle_z) = clamp(sVar(cam_work_angle_z), -89.9, 89.9);
			sVar(cam_work_angle_look_xy) += mx;
			sVar(cam_work_angle_look_z) -= my;
			sVar(cam_work_angle_look_z) = clamp(sVar(cam_work_angle_look_z), -89.9, 89.9);
			camera_work_set_from(self);
			if (ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->pressed)
				camera_work_reset(self);
		}
		else
		{
			tl_value_set_start(self, ID_camera_control_rotate, true);
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_XY, mx, true });
			tl_value_set(self, { e_value_CAM_ROTATE_ANGLE_Z, my, true });
			if (idBool(ObjType(obj_tab, sInt(frame_editor))->camera, look_at_rotate))
			{
				tl_value_set(self, { e_value_ROT_Z, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_XY), false });
				tl_value_set(self, { e_value_ROT_X, idVar(cam, value).Value(e_value_CAM_ROTATE_ANGLE_Z), false });
			}
			tl_value_set_done();
		}
		
	}
	
	void camera_startup(ScopeAny self)
	{
		global::cam_from = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_to = point3D(IntType(0), IntType(0), IntType(0));
		global::cam_window = camera_create();
		global::cam_render = camera_create();
		global::cam_frustum = (new frustum())->id;
		camera_set_view_mat(global::cam_window, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_window, MAT_IDENTITY);
		camera_set_view_mat(global::cam_render, MAT_IDENTITY);
		camera_set_proj_mat(global::cam_render, MAT_IDENTITY);
		view_set_camera(IntType(0), global::cam_window);
		camera_work_reset(self);
	}
	
	void camera_work_reset(ScopeAny self)
	{
		sVar(cam_work_focus) = point3D(IntType(0), IntType(0), IntType(16));
		sVec(cam_work_focus_last) = point3D(IntType(0), IntType(0), IntType(6));
		sInt(cam_work_focus_tl) = null_;
		sBool(cam_work_jump) = false;
		sVar(cam_work_angle_xy) = IntType(315);
		sVar(cam_work_angle_goal_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_z) = IntType(5);
		sVar(cam_work_angle_goal_z) = sVar(cam_work_angle_z);
		sVar(cam_work_roll) = IntType(0);
		sVar(cam_work_zoom) = IntType(100);
		sVar(cam_work_zoom_goal) = sVar(cam_work_zoom);
		sVar(cam_work_angle_look_xy) = sVar(cam_work_angle_xy);
		sVar(cam_work_angle_look_z) = -sVar(cam_work_angle_z);
		sReal(cam_work_angle_look_off_xy) = IntType(0);
		sReal(cam_work_angle_look_off_z) = IntType(0);
		camera_work_set_from(self);
	}
	
	void camera_work_set_angle()
	{
		global::_app->cam_work_angle_xy = point_direction(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_));
		global::_app->cam_work_angle_z = point_zdirection(global::_app->cam_work_focus.Value(X_), global::_app->cam_work_focus.Value(Y_), global::_app->cam_work_focus.Value(Z_), global::_app->cam_work_from.Real(X_), global::_app->cam_work_from.Real(Y_), global::_app->cam_work_from.Real(Z_));
		global::_app->cam_work_angle_z = clamp(global::_app->cam_work_angle_z, -89.9, 89.9);
		global::_app->cam_work_zoom = point3D_distance(global::_app->cam_work_focus, global::_app->cam_work_from);
		global::_app->cam_work_zoom_goal = global::_app->cam_work_zoom;
	}
	
	void camera_work_set_focus()
	{
		global::_app->cam_work_focus[X_] = global::_app->cam_work_from.Real(X_) + lengthdir_x(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Y_] = global::_app->cam_work_from.Real(Y_) + lengthdir_y(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_xy + 180.0) * lengthdir_x(1.0, global::_app->cam_work_angle_look_z);
		global::_app->cam_work_focus[Z_] = global::_app->cam_work_from.Real(Z_) + lengthdir_z(global::_app->cam_work_zoom, global::_app->cam_work_angle_look_z);
		if (vec3_equals(global::_app->cam_work_from, global::_app->cam_work_focus))
			global::_app->cam_work_focus = vec3_add(global::_app->cam_work_focus, 0.0001);
	}
	
	void camera_work_set_from(ScopeAny self)
	{
		sVec(cam_work_from).Real(X_) = sVar(cam_work_focus).Value(X_) + lengthdir_x(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Y_) = sVar(cam_work_focus).Value(Y_) + lengthdir_y(sVar(cam_work_zoom), sVar(cam_work_angle_xy)) * lengthdir_x(1.0, sVar(cam_work_angle_z));
		sVec(cam_work_from).Real(Z_) = sVar(cam_work_focus).Value(Z_) + lengthdir_z(sVar(cam_work_zoom), sVar(cam_work_angle_z));
	}
	
	void collapse_event_create(ScopeAny self)
	{
		sVar(name) = /*""*/ STR(0);
		sVar(collapse_id) = null_;
		sVar(open) = false;
	}
	
	void collapse_register(StringType name)
	{
		DsMap(global::collapse_map)[name] = false;
	}
	
	void colorpicker_blue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->blue * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_brightness(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_draw(ScopeAny self)
	{
		VarType bx, by;
		RealType bw, bh;
		bx = sVar(dx) - IntType(12);
		by = sVar(dy) - IntType(12);
		bw = IntType(192);
		bh = IntType(192);
		if (app_mouse_box(self, bx, by, bw, bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickersatbripick"*/ STR(1038);
		}
		if (sVar(window_busy) == /*"colorpickersatbripick"*/ STR(1038))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				sVar(window_focus) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor((clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1))) * IntType(255));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor((clamp(IntType(1) - (gmlGlobal::mouse_y - by) / bh, IntType(0), IntType(1))) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_sprite_general(ID_spr_colorpicker, IntType(0), IntType(0), IntType(0), IntType(192), IntType(192), (IntType)(bx), (IntType)(by), 1.0, 1.0, 0.0, c_white, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), IntType(255), IntType(255)), c_white, draw_get_alpha());
		draw_image({ ID_spr_colorpicker_cursor, IntType(0), bx + (bw * ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->saturation / 255.0)), by + (bh * (IntType(1) - ((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->brightness / 255.0))), IntType(1), IntType(1), c_white, IntType(1) });
		sVar(dy) = by + IntType(192) + IntType(8);
		sVar(dx) -= 4.0;
		sVar(dw) = IntType(176);
		bx = sVar(dx) + IntType(8);
		by = sVar(dy);
		bw = IntType(176) - IntType(16);
		bh = IntType(16);
		if (app_mouse_box(self, bx - IntType(8), by, bw + IntType(16), bh))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
				sVar(window_busy) = /*"colorpickerhuepick"*/ STR(1039);
		}
		if (sVar(window_busy) == /*"colorpickerhuepick"*/ STR(1039))
		{
			if (!sBool(mouse_left))
			{
				sVar(window_busy) = /*""*/ STR(0);
				app_mouse_clear(self);
			}
			sInt(mouse_cursor) = cr_handpoint;
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(clamp((gmlGlobal::mouse_x - bx) / bw, IntType(0), IntType(1)) * IntType(255));
			colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
		}
		draw_image({ ID_spr_colorpicker_hue, IntType(0), sVar(dx), by, IntType(1), IntType(1), c_white, IntType(1) });
		draw_outline(sVar(dx), by, IntType(176), IntType(16), IntType(1), global::c_border, global::a_border, true);
		draw_image({ ID_spr_colorpicker_cursor, IntType(1), bx + (((RealType)ObjType(obj_colorpicker, sInt(colorpicker))->hue / 255.0) * bw), by + IntType(8), IntType(1), IntType(1) });
		sVar(dy) += IntType(16) + IntType(8);
		tab_control(self, sReal(ui_large_height));
		togglebutton_add(self, { /*"colorpickerrgb"*/ STR(1040), null_, /*"rgb"*/ STR(1041), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1041), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhsv"*/ STR(1042), null_, /*"hsv"*/ STR(1043), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1043), ID_colorpicker_set_mode });
		togglebutton_add(self, { /*"colorpickerhex"*/ STR(1044), null_, /*"hex"*/ STR(1045), ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1045), ID_colorpicker_set_mode });
		draw_togglebutton(self, /*"colorpickermode"*/ STR(1046), sVar(dx), sVar(dy), true, false);
		tab_next(self);
		if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"rgb"*/ STR(1041))
		{
			textfield_group_add(self, { /*"colorpickerr"*/ STR(1047), color_get_red((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_red((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_red, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red });
			textfield_group_add(self, { /*"colorpickerg"*/ STR(1048), color_get_green((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_green((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_green, Y_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green });
			textfield_group_add(self, { /*"colorpickerb"*/ STR(1049), color_get_blue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)), color_get_blue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def)), ID_colorpicker_blue, Z_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue });
			if (draw_textfield_group(self, /*"colorpickerrgb"*/ STR(1040), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(3), true, false))
			{
				ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text, IntType(0)) });
				ObjType(obj_colorpicker, sInt(colorpicker))->blue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text, IntType(0)) });
				colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
			}
		}
		else
			if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hsv"*/ STR(1043))
			{
				textfield_group_add(self, { /*"colorpickerh"*/ STR(1050), floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_hue, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue });
				textfield_group_add(self, { /*"colorpickers"*/ STR(1051), floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_saturation, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation });
				textfield_group_add(self, { /*"colorpickerv"*/ STR(1052), floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color))), floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->def))), ID_colorpicker_brightness, X_, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness });
				VarType update = draw_textfield_group(self, /*"colorpickerhsv"*/ STR(1042), sVar(dx), sVar(dy), IntType(176), IntType(1), IntType(0), IntType(255), IntType(1), false, false, IntType(0), true, false);
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
				if (update == ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
				{
					ObjType(obj_colorpicker, sInt(colorpicker))->brightness = min({ IntType(255), string_get_real(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text, IntType(0)) });
					colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
				}
			}
			else
				if (ObjType(obj_colorpicker, sInt(colorpicker))->mode == /*"hex"*/ STR(1045))
				{
					if (draw_inputbox(self, { /*"colorpickerhex"*/ STR(1044), sVar(dx), sVar(dy), IntType(176), IntType(24), color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->def), ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, null_ }))
						colorpicker_update(self, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal, ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) ? ObjType(obj_colorpicker, sInt(colorpicker))->def : hex_to_color(ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text), true);
					if (ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text == /*""*/ STR(0) && sVar(window_focus) == /*""*/ STR(0))
						ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = /*"000000"*/ STR(638);
				}
		
		
		sVar(dy) += sReal(ui_small_height) + IntType(4);
		sVar(settings_menu_w) = IntType(192);
	}
	
	void colorpicker_green(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->green = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->green * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_hue(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->hue = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_red(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->red = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->red * add + value });
		colorpicker_update(self, null_, make_color_rgb((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->red), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->green), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->blue)), true);
	}
	
	void colorpicker_saturation(ScopeAny self, VarType value, VarType add)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->saturation = min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation * add + value });
		colorpicker_update(self, null_, make_color_hsv((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->hue), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->saturation), (IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->brightness)), false);
	}
	
	void colorpicker_set_mode(ScopeAny self, VarType mode)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->mode = mode.Str();
	}
	
	void colorpicker_show(ScopeAny self, VarType name, VarType color, VarType def, IntType script, VarType xx, VarType yy, VarType width, RealType height)
	{
		if (sStr(settings_menu_name) == /*"colorpicker"*/ STR(716) && ObjType(obj_colorpicker, sInt(colorpicker))->value_script == script)
			popup_close(self);
		else
		{
			sVar(settings_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"settingsmenu"*/ STR(1053);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
			sInt(settings_menu_window) = window_get_current();
			sStr(settings_menu_name) = /*"colorpicker"*/ STR(716);
			sVar(settings_menu_ani) = IntType(0);
			sStr(settings_menu_ani_type) = /*"show"*/ STR(758);
			sBool(settings_menu_primary) = false;
			sVar(settings_menu_x) = xx;
			sVar(settings_menu_y) = yy;
			if (sVar(settings_menu_x) < IntType(0))
				sVar(settings_menu_x) = xx + width + IntType(8);
			if (sVar(settings_menu_x) + IntType(192) > sReal(window_width))
				sVar(settings_menu_x) = sReal(window_width) - IntType(192);
			sVar(settings_menu_h_max) = null_;
			sReal(settings_menu_button_h) = height;
			sBool(settings_menu_above) = false;
			sInt(settings_menu_steps) = IntType(0);
			sInt(settings_menu_script) = ID_colorpicker_draw;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_name = name;
			ObjType(obj_colorpicker, sInt(colorpicker))->value_script = script;
			ObjType(obj_colorpicker, sInt(colorpicker))->mode = /*"rgb"*/ STR(1041);
			ObjType(obj_colorpicker, sInt(colorpicker))->def = def;
			ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = color_get_hue((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = color_get_saturation((IntType)(color));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = color_get_value((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(color);
		}
		
	}
	
	void colorpicker_startup()
	{
		global::_app->colorpicker = (new obj_colorpicker)->id;
		withOne (obj_colorpicker, global::_app->colorpicker, global::_app->id)
		{
			self->value_name = /*""*/ STR(0);
			self->value_script = null_;
			self->color = null_;
			self->def = null_;
			self->hue = IntType(0);
			self->saturation = IntType(0);
			self->value = IntType(0);
			self->tbx_red = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_green = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_blue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_hue = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_saturation = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_brightness = new_textbox(IntType(1), IntType(3), /*"0123456789"*/ STR(1054));
			self->tbx_hexadecimal = new_textbox_hex();
			self->mode = /*"rgb"*/ STR(1041);
		}
		
	}
	
	void colorpicker_update(ScopeAny self, IntType control, VarType color, BoolType gethsb)
	{
		ObjType(obj_colorpicker, sInt(colorpicker))->color = color;
		if (gethsb)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(color_get_hue((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(color_get_saturation((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(color_get_value((IntType)(ObjType(obj_colorpicker, sInt(colorpicker))->color)));
		}
		else
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->hue = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->hue }));
			ObjType(obj_colorpicker, sInt(colorpicker))->saturation = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->saturation }));
			ObjType(obj_colorpicker, sInt(colorpicker))->brightness = floor(min({ IntType(255), ObjType(obj_colorpicker, sInt(colorpicker))->brightness }));
		}
		
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->red = color_get_red((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_red)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->red);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->green = color_get_green((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_green)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->green);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)
		{
			ObjType(obj_colorpicker, sInt(colorpicker))->blue = color_get_blue((IntType)(color));
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_blue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->blue);
		}
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hue)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->hue);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_saturation)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->saturation);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_brightness)->text = string(ObjType(obj_colorpicker, sInt(colorpicker))->brightness);
		if (control != ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)
			ObjType(obj_textbox, ObjType(obj_colorpicker, sInt(colorpicker))->tbx_hexadecimal)->text = color_to_hex(ObjType(obj_colorpicker, sInt(colorpicker))->color);
		script_execute(self, { ObjType(obj_colorpicker, sInt(colorpicker))->value_script, ObjType(obj_colorpicker, sInt(colorpicker))->color });
	}
	
	IntType color_add(VarType color1, VarType color2)
	{
		return make_color_rgb(min({ IntType(255), color_get_red((IntType)(color1)) + color_get_red((IntType)(color2)) }), min({ IntType(255), color_get_green((IntType)(color1)) + color_get_green((IntType)(color2)) }), min({ IntType(255), color_get_blue((IntType)(color1)) + color_get_blue((IntType)(color2)) }));
	}
	
	IntType color_multiply(VarType color1, VarType color2)
	{
		return make_color_rgb((IntType)(((RealType)color_get_red((IntType)(color1)) / 255.0) * ((RealType)color_get_red((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_green((IntType)(color1)) / 255.0) * ((RealType)color_get_green((IntType)(color2)) / 255.0) * IntType(255)), (IntType)(((RealType)color_get_blue((IntType)(color1)) / 255.0) * ((RealType)color_get_blue((IntType)(color2)) / 255.0) * IntType(255)));
	}
	
	StringType color_to_hex(VarType color)
	{
		IntType r, g, b;
		StringType hex;
		r = color_get_red((IntType)(color));
		g = color_get_green((IntType)(color));
		b = color_get_blue((IntType)(color));
		hex = /*"0123456789ABCDEF"*/ STR(1055);
		return string_char_at(hex, (IntType)(((IntType)(r / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(r, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(g / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(g, IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)(((IntType)(b / IntType(16))) + IntType(1))) + string_char_at(hex, (IntType)((mod(b, IntType(16))) + IntType(1)));
	}
	
	IntType context_menu_add_level(ScopeAny self, VarType name, VarType xx, VarType yy, IntType item)
	{
		IntType script, level;
		if (item != null_)
			script = ObjType(obj_list_item, item)->context_menu_script;
		else
			script = null_;
		
		level = (new obj_context_menu_level)->id;
		ObjType(obj_context_menu_level, level)->name = name;
		ObjType(obj_context_menu_level, level)->level_x = xx;
		ObjType(obj_context_menu_level, level)->level_y = yy;
		ObjType(obj_context_menu_level, level)->level = sInt(context_menu_level_amount);
		ObjType(obj_context_menu_level, level)->ani = IntType(0);
		ObjType(obj_context_menu_level, level)->flip = false;
		sInt(context_menu_window) = window_get_current();
		if (script == null_)
		{
			ObjType(obj_context_menu_level, level)->level_list = list_init_context_menu(self, name);
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->width + IntType(8);
			ObjType(obj_context_menu_level, level)->level_height = (ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item) * IntType(24)) + IntType(8);
			ObjType(obj_context_menu_level, level)->script = null_;
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				if (ObjType(obj_list_item, DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i))->divider)
					ObjType(obj_context_menu_level, level)->level_height += IntType(8);
			}
		}
		else
		{
			ObjType(obj_context_menu_level, level)->level_list = null_;
			ObjType(obj_context_menu_level, level)->level_width = ObjType(obj_list_item, item)->context_menu_width;
			ObjType(obj_context_menu_level, level)->level_height = ObjType(obj_list_item, item)->context_menu_height;
			ObjType(obj_context_menu_level, level)->level_script = script;
			ObjType(obj_context_menu_level, level)->level_y -= ObjType(obj_context_menu_level, level)->level_height / 2.0;
		}
		
		if (sInt(context_menu_level_amount) > IntType(0))
		{
			if ((ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width + ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width) < sReal(window_width))
				ObjType(obj_context_menu_level, level)->level_x += (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->level_width);
			else
				ObjType(obj_context_menu_level, level)->level_x -= (ObjType(obj_context_menu_level, level)->level_width + 1.0);
			
			ObjType(obj_context_menu_level, level)->level_y -= 4.0;
		}
		if (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width > sReal(window_width))
			ObjType(obj_context_menu_level, level)->level_x += sReal(window_width) - (ObjType(obj_context_menu_level, level)->level_x + ObjType(obj_context_menu_level, level)->level_width);
		if (ObjType(obj_context_menu_level, level)->level_y + ObjType(obj_context_menu_level, level)->level_height > sReal(window_height))
		{
			ObjType(obj_context_menu_level, level)->level_y -= ObjType(obj_context_menu_level, level)->level_height;
			ObjType(obj_context_menu_level, level)->flip = true;
		}
		ds_list_add({ sInt(context_menu_level), level });
		sInt(context_menu_level_amount)++;
		return level;
	}
	
	RealType context_menu_area(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType xx, yy, wid, hei, name;
		IntType font;
		xx = argument[IntType(0)];
		yy = argument[IntType(1)];
		wid = argument[IntType(2)];
		hei = argument[IntType(3)];
		name = argument[IntType(4)];
		if (app_mouse_box(self, xx, yy, wid, hei) && sBool(mouse_right_released))
		{
			if (keyboard_check(vk_shift) && argument_count > IntType(5))
			{
				if (argument[IntType(6)] == e_context_type_TIME || argument[IntType(6)] == e_context_type_NUMBER)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)], false });
				if (argument[IntType(6)] == e_context_type_COLOR)
					script_execute(self, { argument[IntType(7)], argument[IntType(8)] });
				return IntType(0);
			}
			context_menu_close(self);
			app_mouse_clear(self);
			sVar(context_menu_name) = name;
			sVar(context_menu_copy_axis_edit) = global::axis_edit;
			sVar(context_menu_busy_prev) = sVar(window_busy);
			sVar(window_busy) = /*"contextmenu"*/ STR(1056);
			sInt(context_menu_group) = sInt(context_menu_group_temp);
			font = draw_get_font();
			if (argument_count > IntType(5))
			{
				sVar(context_menu_value) = argument[IntType(5)];
				sVar(context_menu_value_type) = argument[IntType(6)];
				sVar(context_menu_value_script) = argument[IntType(7)];
				sVar(context_menu_value_default) = argument[IntType(8)];
			}
			context_menu_add_level(self, name, gmlGlobal::mouse_x + IntType(1), gmlGlobal::mouse_y);
			if (font != draw_get_font())
				draw_set_font(font);
			return true;
		}
		return 0.0;
	}
	
	RealType context_menu_close(ScopeAny self)
	{
		if (sVar(context_menu_name) == /*""*/ STR(0))
			return IntType(0);
		sBool(toolbar_menu_active) = false;
		sVar(context_menu_name) = /*""*/ STR(0);
		sVar(context_menu_value) = null_;
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_level_amount) = IntType(0);
		sInt(context_menu_mouseon_level) = IntType(0);
		ds_list_clear(sInt(context_menu_level));
		withAll (obj_context_menu_level, self->id)
		{
			list_destroy(ScopeAny(self), self->level_list);
			instance_destroy(ScopeAny(self));
		}
		
		sBool(mouse_left) = false;
		sBool(mouse_left_pressed) = false;
		sBool(mouse_left_double_pressed) = false;
		sInt(mouse_click_count) = IntType(0);
		sVar(context_menu_min_x) = IntType(0);
		sVar(context_menu_min_y) = IntType(0);
		sVar(context_menu_max_x) = IntType(0);
		sVar(context_menu_max_y) = IntType(0);
		return 0.0;
	}
	
	RealType context_menu_draw(ScopeAny self)
	{
		if (sInt(context_menu_level_amount) == IntType(0) || sInt(context_menu_window) != window_get_current())
			return IntType(0);
		if (ObjType(obj_context_menu_level, DsList(sInt(context_menu_level)).Value(IntType(0)))->ani == IntType(0) && sStr(context_menu_ani) == /*"hide"*/ STR(757))
		{
			sStr(context_menu_ani) = /*""*/ STR(0);
			context_menu_close(self);
			return IntType(0);
		}
		if (sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*""*/ STR(0);
		sBool(context_menu_mouseon) = false;
		sInt(context_menu_mouseon_item) = null_;
		global::axis_edit = sVar(context_menu_copy_axis_edit);
		sVar(context_menu_min_x) = no_limit;
		sVar(context_menu_min_y) = no_limit;
		sVar(context_menu_max_x) = -no_limit;
		sVar(context_menu_max_y) = -no_limit;
		if (sBool(context_menu_mouseon_reset))
		{
			sInt(context_menu_mouseon_level) = IntType(0);
			sBool(context_menu_mouseon_reset) = false;
		}
		for (IntType i = IntType(0); i < sInt(context_menu_level_amount); i++)
			context_menu_draw_level(self, i);
		withAll (obj_list_item, global::_app->id)
		{
			if (self->disabled > 0 || (self->context_menu_name == /*""*/ STR(0) && self->context_menu_script == null_) || (global::_app->context_menu_mouseon_level > IntType(0) && (ObjType(obj_context_menu_level, DsList(global::_app->context_menu_level).Value(IntType(1)))->name == self->context_menu_name)))
				continue;
			if (self->id == global::_app->context_menu_mouseon_item)
				self->hovertime += test_reduced_motion(IntType(15), (60.0 / gmlGlobal::room_speed));
			else
				self->hovertime -= test_reduced_motion(IntType(15), (60.0 / gmlGlobal::room_speed));
			
			self->hovertime = clamp(self->hovertime, IntType(0), IntType(15));
			if (!self->context_menu_active && self->hovertime == IntType(15))
			{
				self->context_menu_active = true;
				withOne (app, global::_app->id, self->id)
					context_menu_add_level(ScopeAny(self), ObjType(obj_list_item, self.otherId)->context_menu_name, ObjType(obj_list_item, self.otherId)->draw_x, ObjType(obj_list_item, self.otherId)->draw_y, self.otherId);
				
			}
			if (self->context_menu_active && self->hovertime == IntType(0))
			{
				self->context_menu_active = false;
				global::_app->context_menu_mouseon_level = IntType(0);
				withAll (obj_context_menu_level, self->id)
				{
					if (self->level > IntType(0) && self->name == ObjType(obj_list_item, self.otherId)->context_menu_name)
					{
						ds_list_delete_value(global::_app->context_menu_level, self->id);
						global::_app->context_menu_level_amount--;
						list_destroy(ScopeAny(self), self->level_list);
						instance_destroy(ScopeAny(self));
					}
				}
				
			}
		}
		
		if (((sBool(mouse_left_pressed) || sBool(mouse_right_pressed)) && !sBool(context_menu_mouseon)) || (sBool(mouse_left_released) && (!sBool(context_menu_mouseon) || (sInt(context_menu_mouseon_item) != null_ && !(idVar(sInt(context_menu_mouseon_item), disabled) > 0) && idVar(sInt(context_menu_mouseon_item), context_menu_name) == /*""*/ STR(0)))))
			sStr(context_menu_ani) = /*"hide"*/ STR(757);
		if ((gmlGlobal::mouse_x < sVar(context_menu_min_x) - IntType(64)) || (gmlGlobal::mouse_y < sVar(context_menu_min_y) - IntType(64)) || (gmlGlobal::mouse_x > sVar(context_menu_max_x) + IntType(64)) || (gmlGlobal::mouse_y > sVar(context_menu_max_y) + IntType(64)))
			sStr(context_menu_ani) = /*"hide"*/ STR(757);
		if (sVar(window_busy) == /*""*/ STR(0) && sVar(context_menu_name) != /*""*/ STR(0))
			sVar(window_busy) = /*"contextmenu"*/ STR(1056);
		return 0.0;
	}
	
	RealType context_menu_draw_level(ScopeAny self, IntType argument0)
	{
		IntType levelindex, level;
		VarType alphaease, aniease;
		levelindex = argument0;
		level = DsList(sInt(context_menu_level)).Value(levelindex);
		if (sStr(context_menu_ani) == /*""*/ STR(0) || sStr(context_menu_ani) == /*"open"*/ STR(930))
		{
			ObjType(obj_context_menu_level, level)->ani += test_reduced_motion(IntType(1), (0.07 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani >= IntType(1))
				ObjType(obj_context_menu_level, level)->ani = IntType(1);
		}
		else
		{
			ObjType(obj_context_menu_level, level)->ani -= test_reduced_motion(IntType(1), (0.125 * global::delta));
			if (ObjType(obj_context_menu_level, level)->ani <= IntType(0))
				ObjType(obj_context_menu_level, level)->ani = IntType(0);
		}
		
		aniease = ease(/*"easeoutexpo"*/ STR(561), ObjType(obj_context_menu_level, level)->ani);
		alphaease = aniease;
		aniease = IntType(1);
		sVar(dw) = ObjType(obj_context_menu_level, level)->level_width;
		sVar(dh) = ObjType(obj_context_menu_level, level)->level_height * aniease;
		sVar(dx) = ObjType(obj_context_menu_level, level)->level_x;
		sVar(dy) = (ObjType(obj_context_menu_level, level)->flip > 0) ? (ObjType(obj_context_menu_level, level)->level_y + (ObjType(obj_context_menu_level, level)->level_height - sVar(dh))) : ObjType(obj_context_menu_level, level)->level_y;
		sVar(dy) = max({ IntType(0), sVar(dy) });
		sVar(content_x) = sVar(dx);
		sVar(content_y) = sVar(dy);
		sVar(content_width) = sVar(dw);
		sVar(content_height) = sVar(dh);
		sBool(content_mouseon) = app_mouse_box(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh)) && (levelindex >= sInt(context_menu_mouseon_level));
		sVar(context_menu_min_x) = min({ sVar(dx), sVar(context_menu_min_x) });
		sVar(context_menu_min_y) = min({ sVar(dy), sVar(context_menu_min_y) });
		sVar(context_menu_max_x) = max({ sVar(dx) + sVar(dw), sVar(context_menu_max_x) });
		sVar(context_menu_max_y) = max({ sVar(dy) + sVar(dh), sVar(context_menu_max_y) });
		if (sBool(content_mouseon))
			sBool(context_menu_mouseon) = true;
		if (sBool(content_mouseon) && levelindex > sInt(context_menu_mouseon_level))
			sInt(context_menu_mouseon_level) = levelindex;
		if (!sBool(content_mouseon) && (levelindex >= sInt(context_menu_mouseon_level)))
			sBool(context_menu_mouseon_reset) = true;
		draw_set_alpha(alphaease);
		draw_dropshadow(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh), c_black, IntType(1));
		draw_box(sVar(dx), sVar(dy), sVar(dw), sVar(dh), false, global::c_level_top, IntType(1));
		draw_outline(sVar(dx), sVar(dy), sVar(dw), sVar(dh), IntType(1), global::c_border, global::a_border, true);
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_begin(sVar(dx), sVar(dy), sVar(dw), sVar(dh));
		sVar(dy) = ((ObjType(obj_context_menu_level, level)->flip > 0) ? sVar(dy) : (ObjType(obj_context_menu_level, level)->level_y - ((IntType(1) - aniease) * ObjType(obj_context_menu_level, level)->level_height)));
		sVar(dy) = max({ IntType(0), sVar(dy) });
		if (ObjType(obj_context_menu_level, level)->level_list != null_)
		{
			sVar(dy) += IntType(4);
			for (IntType i = IntType(0); i < ds_list_size(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item); i++)
			{
				IntType item = DsList(ObjType(obj_list, ObjType(obj_context_menu_level, level)->level_list)->item).Value(i);
				if (ObjType(obj_list_item, item)->divider)
					sVar(dy) += IntType(8);
				list_item_draw(self, { item, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24), false });
				if (ObjType(obj_list_item, item)->context_menu_active)
					ObjType(value_animation, ObjType(micro_animation, global::current_microani)->active)->value = true;
				if (app_mouse_box(self, sVar(dx), sVar(dy) + IntType(24) * i, sVar(dw), IntType(24)))
					sInt(context_menu_mouseon_item) = item;
			}
		}
		else
		{
			if (script_execute(self, { ObjType(obj_context_menu_level, level)->level_script, sVar(dx), sVar(dy), sVar(dw), sVar(dh) }))
			{
				draw_set_alpha(1.0);
				return IntType(0);
			}
		}
		
		if (ObjType(obj_context_menu_level, level)->ani < IntType(1))
			clip_end();
		draw_set_alpha(1.0);
		return 0.0;
	}
	
	VarType debug(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		StringType cap, valstr;
		if (!dev_mode)
			return argument[argument_count - IntType(1)];
		cap = string_repeat(/*"\t"*/ STR(1057), global::debug_indent) + string(argument[IntType(0)]);
		valstr = /*""*/ STR(0);
		if (argument_count > IntType(1))
		{
			valstr = /*": "*/ STR(1058);
			for (IntType a = IntType(1); a < argument_count; a++)
			{
				valstr += string(argument[a]);
				if (a < argument_count - IntType(1))
					valstr += /*", "*/ STR(1059);
			}
		}
		show_debug_message(cap + valstr);
		return argument[argument_count - IntType(1)];
	}
	
	void debug_ds_list(VarType argument0)
	{
		IntType list = argument0;
		debug({ /*"Elements"*/ STR(1060), ds_list_size((IntType)(list)) });
		for (IntType i = IntType(0); i < ds_list_size(list); i++)
			debug({ /*"    "*/ STR(1061) + string(DsList(list).Value(i)) });
	}
	
	void debug_ds_map(IntType map)
	{
		IntType keylist;
		VarType key;
		keylist = ds_list_create();
		key = ds_map_find_first((IntType)(map));
		while (!is_undefined(key))
		{
			ds_list_add({ keylist, key });
			key = ds_map_find_next((IntType)(map), key);
		}
		
		ds_list_sort(keylist, true);
		debug({ /*"Elements"*/ STR(1060), ds_list_size(keylist) });
		for (IntType i = IntType(0); i < ds_list_size(keylist); i++)
			debug({ /*"   "*/ STR(1062) + string(DsList(keylist).Value(i)) + /*" => "*/ STR(1063) + string(DsMap(map).Value(DsList(keylist).Value(i))) });
		ds_list_destroy(keylist);
	}
	
	RealType debug_info_draw(ScopeAny self)
	{
		if (!sBool(debug_info))
			return IntType(0);
		StringType str = /*"DEBUG INFO:\n"*/ STR(1064);
		str += /*"fps: "*/ STR(1065) + string(gmlGlobal::fps) + /*" \n"*/ STR(1066);
		str += /*"fps_real: "*/ STR(1067) + string(gmlGlobal::fps_real) + /*" \n"*/ STR(1066);
		str += /*"delta: "*/ STR(1068) + string(global::delta) + /*" \n"*/ STR(1066);
		str += /*"DPI: "*/ STR(1069) + string(display_get_dpi_x()) + /*","*/ STR(1070) + string(display_get_dpi_y()) + /*" \n"*/ STR(1066);
		str += /*"instance_count: "*/ STR(1071) + string(gmlGlobal::instance_count) + /*" \n"*/ STR(1066);
		str += /*"render_world() calls: "*/ STR(1072) + string(global::render_world_count) + /*" \n"*/ STR(1066);
		str += /*"Vertex buffer triangles: "*/ STR(1073) + string(get_vertex_buffer_triangles()) + /*" \n"*/ STR(1066);
		str += /*"Vertex buffer render calls: "*/ STR(1074) + string(get_vertex_buffer_render_calls()) + /*" \n"*/ STR(1066);
		str += /*"Primitive lines: "*/ STR(1075) + string(get_primitive_lines()) + /*" \n"*/ STR(1066);
		str += /*"Primitive triangles: "*/ STR(1076) + string(get_primitive_triangles()) + /*" \n"*/ STR(1066);
		str += /*"Primitive render calls: "*/ STR(1077) + string(get_primitive_render_calls()) + /*" \n"*/ STR(1066);
		str += /*"[F12 to disable]"*/ STR(1078);
		sVar(content_x) = IntType(0);
		sVar(content_y) = IntType(0);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = sReal(window_height);
		draw_label(self, { str, sReal(window_width) - IntType(7), sReal(window_height) - IntType(7), fa_right, fa_bottom, c_black, IntType(1), sInt(font_value) });
		draw_label(self, { str, sReal(window_width) - IntType(8), sReal(window_height) - IntType(8), fa_right, fa_bottom, c_yellow, IntType(1), sInt(font_value) });
		return 0.0;
	}
	
	void debug_timer_start()
	{
		global::debug_timer = current_time();
	}
	
	void debug_timer_stop(StringType str)
	{
		debug({ str, string(current_time() - global::debug_timer) + /*" msec"*/ STR(1079) });
	}
	
	StringType dec_to_hex(RealType dec, RealType len)
	{
		if (!(dec > 0))
			return /*"0"*/ STR(1080);
		StringType h, hex, hi, lo;
		RealType byte;
		h = /*"0123456789ABCDEF"*/ STR(1055);
		hex = /*""*/ STR(0);
		while (dec > 0)
		{
			byte = (IntType)dec & (IntType)IntType(255);
			hi = string_char_at(h, (IntType)((IntType)(byte / IntType(16)) + IntType(1)));
			lo = string_char_at(h, (IntType)(mod(byte, IntType(16)) + IntType(1)));
			hex = hi + lo + hex;
			dec = (IntType)dec >> (IntType)IntType(8);
		}
		
		for (IntType _it = 0, _it_max = max({ IntType(0), len - string_length(hex) }); _it < _it_max; _it++)
			hex = /*"0"*/ STR(1080) + hex;
		return hex;
	}
	
	VarType directory_create_lib(StringType dir)
	{
		return lib_directory_create(dir);
	}
	
	VarType directory_delete_lib(StringType dir)
	{
		return lib_directory_delete(dir);
	}
	
	RealType directory_exists_lib(VarType dir)
	{
		if (dir == /*""*/ STR(0))
			return IntType(0);
		return lib_directory_exists(dir);
	}
	
	StringType directory_name(StringType dir)
	{
		return filename_name(filename_dir(dir + /*".ext"*/ STR(1081))) + /*"/"*/ STR(16);
	}
	
	StringType dir_get_string(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return /*"east"*/ STR(905);
			}
			case e_dir_WEST:
			{
				return /*"west"*/ STR(906);
			}
			case e_dir_SOUTH:
			{
				return /*"south"*/ STR(907);
			}
			case e_dir_NORTH:
			{
				return /*"north"*/ STR(908);
			}
			case e_dir_UP:
			{
				return /*"up"*/ STR(924);
			}
			case e_dir_DOWN:
			{
				return /*"down"*/ STR(925);
			}
		}
		
		return /*""*/ STR(0);
	}
	
	VecType dir_get_vec3(IntType dir)
	{
		switch ((IntType)dir)
		{
			case e_dir_EAST:
			{
				return vec3(IntType(1), IntType(0), IntType(0));
			}
			case e_dir_WEST:
			{
				return vec3(-IntType(1), IntType(0), IntType(0));
			}
			case e_dir_SOUTH:
			{
				return vec3(IntType(0), IntType(1), IntType(0));
			}
			case e_dir_NORTH:
			{
				return vec3(IntType(0), -IntType(1), IntType(0));
			}
			case e_dir_UP:
			{
				return vec3(IntType(0), IntType(0), IntType(1));
			}
			case e_dir_DOWN:
			{
				return vec3(IntType(0), IntType(0), -IntType(1));
			}
		}
		
		return vec3(IntType(0), IntType(0), IntType(0));
	}
	
	void draw_bezier_curve(ArrType p1, ArrType p2, ArrType p3, ArrType p4, RealType w, VarType color, RealType alpha)
	{
		IntType prevcolor;
		RealType prevalpha;
		VecType p, prevp;
		prevcolor = draw_get_color();
		prevalpha = draw_get_alpha();
		draw_set_color((IntType)(color));
		draw_set_alpha(alpha);
		p = ArrType::From({ IntType(0), IntType(0) });
		for (RealType i = IntType(0); i < IntType(64); i++)
		{
			prevp = p;
			p = bezier_curve_cubic(p1, p2, p3, p4, i / 64.0);
			if (i == IntType(0))
				continue;
			draw_image({ ID_spr_handle, IntType(0), prevp.Real(X_), prevp.Real(Y_), .75, point_distance(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)), color, alpha, point_direction(prevp.Real(X_), prevp.Real(Y_), p.Real(X_), p.Real(Y_)) - IntType(90) });
		}
		draw_set_color(prevcolor);
		draw_set_alpha(prevalpha);
	}
	
	void draw_bezier_graph(ScopeAny self, VarType xx, VarType yy, RealType wid, RealType hei, ArrType points, BoolType sync)
	{
		RealType vertical, boxw, boxh;
		VarType boxx, boxy;
		BoolType update;
		vertical = (hei > wid);
		boxx = xx;
		boxy = yy + hei / 6.0;
		boxw = wid;
		boxh = hei / 1.5;
		update = false;
		draw_box(xx, yy, wid, hei, false, global::c_level_bottom, IntType(1));
		draw_box(boxx, boxy, boxw, boxh, false, global::c_level_top, IntType(1));
		draw_outline(xx, yy, wid, hei, IntType(1), global::c_border, global::a_border, true);
		VarType easeinxpos, easeoutxpos, colorin, colorout;
		RealType easeinypos, easeoutypos;
		easeinxpos = boxx + boxw * points.Value(IntType(0));
		easeinypos = (boxy + boxh) - boxh * points.Value(IntType(1));
		easeoutxpos = boxx + boxw * points.Value(IntType(2));
		easeoutypos = (boxy + boxh) - boxh * points.Value(IntType(3));
		gpu_set_cullmode((IntType)(false));
		clip_begin(xx, yy, wid, hei);
		gpu_set_tex_filter(true);
		draw_bezier_curve(ArrType::From({ boxx, boxy + boxh }), ArrType::From({ easeinxpos, easeinypos }), ArrType::From({ easeoutxpos, easeoutypos }), ArrType::From({ boxx + boxw, boxy }), IntType(2), global::c_text_secondary, global::a_text_secondary);
		if (global::tl_edit != null_)
			draw_box(xx + wid * idReal(global::tl_edit, keyframe_progress), yy, IntType(2), hei, false, c_red, .30);
		draw_image({ ID_spr_handle, IntType(0), boxx, boxy + boxh, .75, point_distance(boxx, boxy + boxh, easeinxpos, easeinypos), global::c_accent, IntType(1), point_direction(boxx, boxy + boxh, easeinxpos, easeinypos) - IntType(90) });
		draw_image({ ID_spr_handle, IntType(0), boxx + boxw, boxy, .75, point_distance(boxx + boxw, boxy, easeoutxpos, easeoutypos), global::c_accent, IntType(1), point_direction(boxx + boxw, boxy, easeoutxpos, easeoutypos) - IntType(90) });
		gpu_set_tex_filter(false);
		clip_end();
		colorin = (easeinypos < yy || easeinypos > yy + hei ? global::c_error : global::c_accent);
		easeinxpos = clamp(easeinxpos, boxx, boxx + boxw);
		easeinypos = clamp(easeinypos, yy, yy + hei);
		colorout = (easeoutypos < yy || easeoutypos > yy + hei ? global::c_error : global::c_accent);
		easeoutxpos = clamp(easeoutxpos, boxx, boxx + boxw);
		easeoutypos = clamp(easeoutypos, yy, yy + hei);
		draw_box(easeinxpos - IntType(6), easeinypos - IntType(6), IntType(12), IntType(12), false, colorin, IntType(1));
		draw_box(easeinxpos - IntType(3), easeinypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1));
		draw_box(easeoutxpos - IntType(6), easeoutypos - IntType(6), IntType(12), IntType(12), false, colorout, IntType(1));
		draw_box(easeoutxpos - IntType(3), easeoutypos - IntType(3), IntType(6), IntType(6), false, global::c_level_top, IntType(1));
		if (app_mouse_box(self, easeinxpos - IntType(5), easeinypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereasein"*/ STR(1082);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeinxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeinypos;
			}
		}
		if (app_mouse_box(self, easeoutxpos - IntType(5), easeoutypos - IntType(5), IntType(10), IntType(10)))
		{
			sInt(mouse_cursor) = cr_handpoint;
			sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
			sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			if (sBool(mouse_left))
			{
				sVar(window_busy) = /*"beziereaseout"*/ STR(1083);
				sVar(handle_drag_offset_x) = gmlGlobal::mouse_x - easeoutxpos;
				sVar(handle_drag_offset_y) = gmlGlobal::mouse_y - easeoutypos;
			}
		}
		points[IntType(0)] *= 100.0;
		points[IntType(1)] *= 100.0;
		points[IntType(2)] *= 100.0;
		points[IntType(3)] *= 100.0;
		if (sVar(window_busy) == /*"beziereasein"*/ STR(1082))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(0)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(1)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(2)] = IntType(100) - points.Value(IntType(0));
					points[IntType(3)] = IntType(100) - points.Value(IntType(1));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (sVar(window_busy) == /*"beziereaseout"*/ STR(1083))
		{
			sInt(mouse_cursor) = cr_handpoint;
			if (!(sInt(mouse_still) > 0))
			{
				points[IntType(2)] = floor(percent(gmlGlobal::mouse_x - sVar(handle_drag_offset_x), boxx, boxx + boxw) * IntType(100));
				points[IntType(3)] = floor(percent(gmlGlobal::mouse_y - sVar(handle_drag_offset_y), boxy + boxh, boxy, false) * IntType(100));
				if (sync)
				{
					points[IntType(0)] = IntType(100) - points.Value(IntType(2));
					points[IntType(1)] = IntType(100) - points.Value(IntType(3));
				}
				update = true;
			}
			if (!sBool(mouse_left))
				sVar(window_busy) = /*""*/ STR(0);
		}
		if (update)
		{
			points[IntType(0)] /= 100.0;
			points[IntType(1)] /= 100.0;
			points[IntType(2)] /= 100.0;
			points[IntType(3)] /= 100.0;
			if (sync)
				action_tl_frame_ease_all(self, points, false);
			else
				if (sVar(window_busy) == /*"beziereasein"*/ STR(1082))
					action_tl_frame_ease_in(self, points, false);
				else
					action_tl_frame_ease_out(self, ArrType::From({ points.Value(IntType(2)), points.Value(IntType(3)) }), false);
			
			
		}
	}
	
}
