/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.06.23 22:26:53 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void app_update_tl_edit_tabs(ScopeAny self)
	{
		BoolType showtl, showkf;
		showtl = false;
		showkf = false;
		if (global::tl_edit_amount > IntType(0))
		{
			showtl = true;
			if (idVar(global::tl_edit, type) == e_tl_type_AUDIO)
				showkf = (idVar(global::tl_edit, keyframe_select) != null_);
			else
				showkf = true;
			
		}
		if (showtl)
			tab_show(self, sInt(timeline_editor));
		else
			tab_close(self, sInt(timeline_editor));
		
		if (showkf)
			tab_show(self, sInt(frame_editor));
		else
			tab_close(self, sInt(frame_editor));
		
	}
	
	void app_update_toasts()
	{
		if (global::_app->toast_script != null_)
		{
			if (global::_app->toast_script_value != null_)
				script_execute(ScopeAny(global::_app->id), { global::_app->toast_script, global::_app->toast_script_value });
			else
				script_execute(ScopeAny(global::_app->id), { global::_app->toast_script });
			
		}
		global::_app->toast_script = null_;
		global::_app->toast_script_value = null_;
		withAll (obj_toast, global::_app->id)
		{
			if (self->remove)
			{
				if (global::_app->setting_reduced_motion > 0)
					self->remove_alpha = IntType(0);
				else
					self->remove_alpha -= (.1 * global::delta);
				
			}
		}
		
		withAll (obj_toast, global::_app->id)
		{
			if (self->remove && self->remove_alpha < IntType(0))
				withOne (app, global::_app->id, self->id)
					toast_close(ScopeAny(self), self.otherId);
			
		}
		
		global::_app->toast_amount = ds_list_size(global::_app->toast_list);
		RealType toasty = global::_app->window_height;
		for (RealType i = global::_app->toast_amount - IntType(1); i >= IntType(0); i--)
		{
			IntType toast = DsList(global::_app->toast_list).Value(i);
			if (ObjType(obj_toast, toast)->remove)
				continue;
			withOne (obj_toast, toast, global::_app->id)
			{
				toasty -= (16.0 + self->toast_height);
				self->toast_goal_y = toasty;
				self->toast_y += (self->toast_goal_y - self->toast_y) / max({ IntType(1), 2.5 / global::delta });
			}
			
		}
	}
	
	RealType app_update_window()
	{
		if (global::_app->window_width != window_get_width() || global::_app->window_height != window_get_height())
		{
			RealType ww, hh;
			IntType xx, yy;
			ww = window_get_width();
			hh = window_get_height();
			if (ww <= IntType(0) || hh <= IntType(0))
				return IntType(0);
			xx = window_get_x();
			yy = window_get_y();
			display_reset(IntType(0), (IntType)(false));
			window_set_rectangle(xx, yy, (IntType)(ww), (IntType)(hh));
			surface_resize(gmlGlobal::application_surface, (IntType)(ww), (IntType)(hh));
			camera_set_view_pos(global::cam_window, 0.0, 0.0);
			camera_set_view_size(global::cam_window, ww, hh);
			view_set_wport(IntType(0), (IntType)(ww));
			view_set_hport(IntType(0), (IntType)(hh));
			global::_app->window_width = ww;
			global::_app->window_height = hh;
		}
		return 0.0;
	}
	
	RealType app_update_work_camera(ScopeAny self)
	{
		if (sBool(cam_work_jump))
		{
			sBool(cam_work_jump) = false;
			return IntType(0);
		}
		if (sVar(window_busy) == /*""*/ STR(0))
		{
			if (global::tl_edit != null_)
			{
				sInt(cam_work_focus_tl) = global::tl_edit;
				if (idBool(sInt(cam_work_focus_tl), world_pos_2d_error))
					sInt(cam_work_focus_tl) = null_;
				if (sInt(cam_work_focus_tl) > 0)
					sVar(cam_work_focus) = point3D_copy(idVar(sInt(cam_work_focus_tl), world_pos));
			}
			else
				sInt(cam_work_focus_tl) = null_;
			
		}
		sVar(cam_work_zoom) += (sVar(cam_work_zoom_goal) - sVar(cam_work_zoom)) / max({ IntType(1), 3.0 / global::delta });
		sVar(cam_work_zoom) = clamp(sVar(cam_work_zoom), IntType(1), sVar(project_render_distance));
		if (sVec(cam_work_focus_last).Real(X_) != sVar(cam_work_focus).Value(X_) || sVec(cam_work_focus_last).Real(Y_) != sVar(cam_work_focus).Value(Y_) || sVec(cam_work_focus_last).Real(Z_) != sVar(cam_work_focus).Value(Z_))
			camera_work_set_angle();
		sVec(cam_work_focus_last) = point3D_copy(sVar(cam_work_focus));
		camera_work_set_from(self);
		return 0.0;
	}
	
	BoolType asset_load(ScopeAny self, VarArgs argument)
	{
		IntType argument_count = argument.Size();
		VarType fn;
		if (sReal(history_undo) > 0)
		{
			withOne (obj_history, global::history_data, self->id)
				history_destroy_loaded(self);
			
			tl_update_length();
			tl_update_list(self);
			ObjType(obj_preview, sInt(lib_preview))->update = true;
			ObjType(obj_preview, sInt(res_preview))->update = true;
			return false;
		}
		else
			if (sReal(history_redo) > 0)
				fn = ObjType(obj_history, global::history_data)->filename;
			else
			{
				if (argument_count > IntType(0))
					fn = argument[IntType(0)];
				else
					fn = file_dialog_open_asset();
				
			}
		
		
		if (fn == /*""*/ STR(0) || !file_exists_lib(fn))
			return false;
		StringType ext = string_lower(filename_ext(fn));
		if (ext == /*".zip"*/ STR(5))
		{
			StringType validfile = unzip_asset(fn);
			if (file_exists_lib(validfile))
			{
				fn = validfile;
				ext = filename_ext(fn);
			}
			else
			{
				if (directory_exists_lib(unzip_directory + /*"assets"*/ STR(723)))
					action_res_pack_load(self, fn);
				else
					error(/*"erroropenassetzip"*/ STR(724));
				
				return false;
			}
			
		}
		BoolType legacy = false;
		switch (StringType(ext).id)
		{
			case 725: // .miobject
			case 726: // .miparticles
			case 727: // .miproject
			{
				legacy = false;
				break;
			}
			case 728: // .object
			case 729: // .particles
			case 730: // .mproj
			case 731: // .mani
			{
				legacy = true;
				break;
			}
			case 33: // .miframes
			case 732: // .keyframes
			{
				log({ /*"Opening keyframes"*/ STR(34), fn });
				action_tl_keyframes_load(self, fn);
				return true;
			}
			case 733: // .schematic
			case 734: // .nbt
			case 735: // .blocks
			{
				log({ /*"Opening scenery"*/ STR(736), fn });
				action_lib_scenery_load(self, fn);
				return true;
			}
			case 737: // .mimodel
			case 738: // .json
			{
				log({ /*"Opening model"*/ STR(739), fn });
				action_res_model_load(self, fn);
				return true;
			}
			case 740: // .mp3
			case 741: // .wav
			case 742: // .ogg
			case 743: // .flac
			case 744: // .wma
			case 745: // .m4a
			{
				log({ /*"Opening audio"*/ STR(746), fn });
				action_res_sound_load(self, fn);
				return true;
			}
			case 747: // .ttf
			{
				log({ /*"Adding font"*/ STR(748), fn });
				action_res_font_load(self, fn);
				return true;
			}
			case 6: // .png
			case 749: // .jpg
			case 750: // .jpeg
			{
				log({ /*"Opening image"*/ STR(751), fn });
				ObjType(obj_popup, sInt(popup_importimage))->filename = fn;
				popup_show(self, sInt(popup_importimage));
				return true;
			}
		}
		
		IntType hobj = null_;
		if (!(sReal(history_redo) > 0))
			hobj = history_set(self, ID_asset_load);
		IntType rootmap;
		if (!legacy)
		{
			log({ /*"Opening asset"*/ STR(752), fn });
			rootmap = project_load_start(fn);
			if (rootmap == null_)
				return false;
		}
		else
		{
			log({ /*"Opening legacy asset"*/ STR(753), fn });
			if (!project_load_legacy_start(fn))
				return false;
		}
		
		project_reset_loaded(self);
		global::save_folder = sStr(project_folder);
		global::load_folder = filename_dir(fn);
		log({ /*"save_folder"*/ STR(754), global::save_folder });
		log({ /*"load_folder"*/ STR(755), global::load_folder });
		switch (StringType(ext).id)
		{
			case 727: // .miproject
			case 725: // .miobject
			{
				project_load_objects(rootmap);
				project_load_find_save_ids(self);
				project_load_update(self);
				break;
			}
			
			case 728: // .object
			{
				project_load_legacy_objects();
				project_load_find_save_ids(self);
				project_load_update(self);
				buffer_delete(global::buffer_current);
				break;
			}
			
			case 726: // .miparticles
			{
				IntType temp = (new obj_template)->id;
				withOne (obj_template, temp, self->id)
				{
					self->loaded = true;
					self->load_id = self->save_id;
					DsMap(global::save_id_map)[self->load_id] = self->load_id;
					self->type = e_temp_type_PARTICLE_SPAWNER;
					project_load_particles(ScopeAny(self), DsMap(rootmap).Value(/*"particles"*/ STR(520)));
					sortlist_add(idInt(self.otherId, lib_list), self->id);
				}
				
				project_load_objects(rootmap);
				project_load_find_save_ids(self);
				withOne (obj_template, temp, self->id)
					withOne (obj_timeline, temp_animate(ScopeAny(self)), self->id)
						self->loaded = true;
				
				
				project_load_update(self);
				break;
			}
			
			case 729: // .particles
			{
				IntType temp = (new obj_template)->id;
				withOne (obj_template, temp, self->id)
				{
					self->loaded = true;
					self->load_id = self->save_id;
					DsMap(global::save_id_map)[self->load_id] = self->load_id;
					self->type = e_temp_type_PARTICLE_SPAWNER;
					project_load_legacy_particles(ScopeAny(self));
					sortlist_add(idInt(self.otherId, lib_list), self->id);
				}
				
				project_load_legacy_objects();
				project_load_find_save_ids(self);
				withOne (obj_template, temp, self->id)
					withOne (obj_timeline, temp_animate(ScopeAny(self)), self->id)
						self->loaded = true;
				
				
				project_load_update(self);
				buffer_delete(global::buffer_current);
				break;
			}
			
			case 730: // .mproj
			{
				withOne (obj_data, (new obj_data)->id, self->id)
				{
					project_load_legacy_project(ScopeAny(self));
					instance_destroy(ScopeAny(self));
				}
				
				project_load_legacy_objects();
				project_load_find_save_ids(self);
				project_load_update(self);
				buffer_delete(global::buffer_current);
				break;
			}
			
			case 731: // .mani
			{
				project_load_legacy_beta(self, false);
				project_load_find_save_ids(self);
				project_load_update(self);
				buffer_delete(global::buffer_current);
				break;
			}
			
		}
		
		withOne (obj_history, hobj, self->id)
		{
			self->filename = fn;
			history_save_loaded(self);
		}
		
		project_reset_loaded(self);
		log({ /*"Asset loaded"*/ STR(756) });
		return true;
	}
	
	void background_ground_startup()
	{
		RealType totalsize, size, rep;
		log({ /*"Ground vbuffer init"*/ STR(757) });
		totalsize = ((IntType)(global::_app->project_render_distance / IntType(256))) * IntType(256);
		size = totalsize / 16.0;
		rep = size / 16.0;
		global::_app->background_ground_texture = null_;
		global::_app->background_ground_texture_material = null_;
		global::_app->background_ground_texture_normal = null_;
		global::_app->background_ground_ani = false;
		global::_app->background_ground_material_ani = false;
		global::_app->background_ground_normal_ani = false;
		global::_app->background_ground_ani_texture[IntType(0)] = null_;
		global::_app->background_ground_ani_texture_material[IntType(0)] = null_;
		global::_app->background_ground_ani_tex_normal[IntType(0)] = null_;
		global::_app->background_ground_vbuffer = vbuffer_start();
		for (RealType xx = -totalsize; xx < totalsize; xx += size)
		{
			for (RealType yy = -totalsize; yy < totalsize; yy += size)
			{
				vertex_add({ xx, yy, -0.01, IntType(0), IntType(0), IntType(1), IntType(0), IntType(0) });
				vertex_add({ xx + size, yy, -0.01, IntType(0), IntType(0), IntType(1), rep, IntType(0) });
				vertex_add({ xx, yy + size, -0.01, IntType(0), IntType(0), IntType(1), IntType(0), rep });
				vertex_add({ xx + size, yy, -0.01, IntType(0), IntType(0), IntType(1), rep, IntType(0) });
				vertex_add({ xx + size, yy + size, -0.01, IntType(0), IntType(0), IntType(1), rep, rep });
				vertex_add({ xx, yy + size, -0.01, IntType(0), IntType(0), IntType(1), IntType(0), rep });
			}
		}
		vbuffer_done();
	}
	
	RealType background_ground_update_texture(ScopeAny self)
	{
		if (!idBool(sVar(background_ground_tex), ready) || (sVar(background_ground_slot) == sVar(background_ground_slot_prev) && idVar(sVar(background_ground_tex), save_id) == sVar(background_ground_tex_prev)))
			return IntType(0);
		sVar(background_ground_slot_prev) = sVar(background_ground_slot);
		sVar(background_ground_tex_prev) = idVar(sVar(background_ground_tex), save_id);
		if (sBool(background_ground_ani))
		{
			if (sArr(background_ground_ani_texture).Value(IntType(0)) != null_)
				for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
					texture_free(sArr(background_ground_ani_texture).Value(f));
		}
		else
			if (sInt(background_ground_texture) != null_)
				texture_free(sInt(background_ground_texture));
		
		RealType size, bx, by;
		IntType surf;
		VarType tex;
		if (sVar(background_ground_slot) < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)))
		{
			sBool(background_ground_ani) = false;
			sVar(background_ground_name) = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list).Value(sVar(background_ground_slot));
			size = texture_width(idInt(sVar(background_ground_tex), block_sheet_texture)) / block_sheet_width;
			bx = (mod(sVar(background_ground_slot), block_sheet_width)) * size;
			by = ((IntType)(sVar(background_ground_slot) / block_sheet_width)) * size;
		}
		else
		{
			if (idVar(sVar(background_ground_tex), block_sheet_ani_texture) == null_)
			{
				sBool(background_ground_ani) = false;
				sInt(background_ground_texture) = texture_create_missing();
				sVar(background_ground_name) = /*""*/ STR(0);
				return IntType(0);
			}
			RealType slot = sVar(background_ground_slot) - ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list));
			sBool(background_ground_ani) = true;
			sVar(background_ground_name) = DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_ani_list).Value(slot);
			size = texture_width(idVar(sVar(background_ground_tex), block_sheet_ani_texture).Value(IntType(0))) / block_sheet_ani_width;
			bx = (mod(slot, block_sheet_ani_width)) * size;
			by = ((IntType)(slot / block_sheet_ani_width)) * size;
		}
		
		draw_texture_start();
		surf = surface_create((IntType)(size), (IntType)(size));
		surface_set_target(surf);
	{
		if (sBool(background_ground_ani))
		{
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
			{
				draw_clear_alpha(c_black, 0.0);
				draw_texture_part({ idVar(sVar(background_ground_tex), block_sheet_ani_texture).Value(f), IntType(0), IntType(0), bx, by, size, size });
				sArr(background_ground_ani_texture)[f] = texture_surface(surf);
				sprite_set_texture_page(sArr(background_ground_ani_texture).Value(f), false);
			}
		}
		else
		{
			draw_clear_alpha(c_black, 0.0);
			draw_texture_part({ idInt(sVar(background_ground_tex), block_sheet_texture), IntType(0), IntType(0), bx, by, size, size });
			sInt(background_ground_texture) = texture_surface(surf);
			sprite_set_texture_page(sInt(background_ground_texture), false);
		}
		
	}
		surface_reset_target();
		surface_free(surf);
		draw_texture_done();
		return 0.0;
	}
	
	RealType background_ground_update_texture_material(ScopeAny self)
	{
		if (!idBool(sVar(background_ground_tex_material), ready) || (sVar(background_ground_slot) == sVar(background_ground_slot_material) && idVar(sVar(background_ground_tex_material), save_id) == sVar(background_ground_tex_material_prev)))
			return IntType(0);
		sVar(background_ground_slot_material) = sVar(background_ground_slot);
		sVar(background_ground_tex_material_prev) = idVar(sVar(background_ground_tex_material), save_id);
		if (sBool(background_ground_material_ani))
		{
			if (sArr(background_ground_ani_texture_material).Value(IntType(0)) != null_)
				for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
					texture_free(sArr(background_ground_ani_texture_material).Value(f));
		}
		else
			if (sInt(background_ground_texture_material) != null_)
				texture_free(sInt(background_ground_texture_material));
		
		RealType size, bx, by;
		IntType surf;
		VarType tex;
		if (sVar(background_ground_slot) < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)))
		{
			sBool(background_ground_material_ani) = false;
			size = ceil(texture_width(idInt(sVar(background_ground_tex_material), block_sheet_texture_material)) / block_sheet_width);
			bx = (mod(sVar(background_ground_slot), block_sheet_width)) * size;
			by = ((IntType)(sVar(background_ground_slot) / block_sheet_width)) * size;
		}
		else
		{
			if (idVar(sVar(background_ground_tex_material), block_sheet_ani_texture_material) == null_)
			{
				sBool(background_ground_material_ani) = false;
				sInt(background_ground_texture_material) = texture_create_fill(c_black);
				return IntType(0);
			}
			RealType slot = sVar(background_ground_slot) - ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list));
			sBool(background_ground_material_ani) = true;
			size = ceil(texture_width(idVar(sVar(background_ground_tex_material), block_sheet_ani_texture_material).Value(IntType(0))) / block_sheet_ani_width);
			bx = (mod(slot, block_sheet_ani_width)) * size;
			by = ((IntType)(slot / block_sheet_ani_width)) * size;
		}
		
		draw_texture_start();
		surf = surface_create((IntType)(size), (IntType)(size));
		surface_set_target(surf);
	{
		if (sBool(background_ground_material_ani))
		{
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
			{
				draw_clear_alpha(c_black, 0.0);
				draw_texture_part({ idVar(sVar(background_ground_tex_material), block_sheet_ani_texture_material).Value(f), IntType(0), IntType(0), bx, by, size, size });
				sArr(background_ground_ani_texture_material)[f] = texture_surface(surf);
			}
		}
		else
		{
			draw_clear_alpha(c_black, 0.0);
			draw_texture_part({ idInt(sVar(background_ground_tex_material), block_sheet_texture_material), IntType(0), IntType(0), bx, by, size, size });
			sInt(background_ground_texture_material) = texture_surface(surf);
		}
		
	}
		surface_reset_target();
		surface_free(surf);
		draw_texture_done();
		return 0.0;
	}
	
	RealType background_ground_update_texture_normal(ScopeAny self)
	{
		if (!idBool(sVar(background_ground_tex_normal), ready) || (sVar(background_ground_slot) == sVar(background_ground_slot_normal) && idVar(sVar(background_ground_tex_normal), save_id) == sVar(background_ground_tex_normal_prev)))
			return IntType(0);
		sVar(background_ground_slot_normal) = sVar(background_ground_slot);
		sVar(background_ground_tex_normal_prev) = idVar(sVar(background_ground_tex_normal), save_id);
		if (sBool(background_ground_normal_ani))
		{
			if (sArr(background_ground_ani_tex_normal).Value(IntType(0)) != null_)
				for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
					texture_free(sArr(background_ground_ani_texture_normal).Value(f));
		}
		else
			if (sInt(background_ground_texture_normal) != null_)
				texture_free(sInt(background_ground_texture_normal));
		
		RealType size, bx, by;
		IntType surf;
		VarType tex;
		if (sVar(background_ground_slot) < ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list)))
		{
			sBool(background_ground_normal_ani) = false;
			size = ceil(texture_width(idInt(sVar(background_ground_tex_normal), block_sheet_tex_normal)) / block_sheet_width);
			bx = (mod(sVar(background_ground_slot), block_sheet_width)) * size;
			by = ((IntType)(sVar(background_ground_slot) / block_sheet_width)) * size;
		}
		else
		{
			if (idVar(sVar(background_ground_tex_normal), block_sheet_ani_tex_normal) == null_)
			{
				sBool(background_ground_normal_ani) = false;
				sInt(background_ground_texture_normal) = sprite_duplicate(ID_spr_default_normal);
				return IntType(0);
			}
			RealType slot = sVar(background_ground_slot) - ds_list_size((IntType)(ObjType(obj_minecraft_assets, global::mc_assets)->block_texture_list));
			sBool(background_ground_normal_ani) = true;
			size = ceil(texture_width(idVar(sVar(background_ground_tex_normal), block_sheet_ani_tex_normal).Value(IntType(0))) / block_sheet_ani_width);
			bx = (mod(slot, block_sheet_ani_width)) * size;
			by = ((IntType)(slot / block_sheet_ani_width)) * size;
		}
		
		draw_texture_start();
		surf = surface_create((IntType)(size), (IntType)(size));
		surface_set_target(surf);
	{
		if (sBool(background_ground_normal_ani))
		{
			for (IntType f = IntType(0); f < block_sheet_ani_frames; f++)
			{
				draw_clear_alpha(c_black, 0.0);
				draw_texture_part({ idVar(sVar(background_ground_tex_normal), block_sheet_ani_tex_normal).Value(f), IntType(0), IntType(0), bx, by, size, size });
				sArr(background_ground_ani_texture_normal)[f] = texture_surface(surf);
			}
		}
		else
		{
			draw_clear_alpha(c_black, 0.0);
			draw_texture_part({ idInt(sVar(background_ground_tex_normal), block_sheet_tex_normal), IntType(0), IntType(0), bx, by, size, size });
			sInt(background_ground_texture_normal) = texture_surface(surf);
		}
		
	}
		surface_reset_target();
		surface_free(surf);
		draw_texture_done();
		return 0.0;
	}
	
	RealType background_sky_night_alpha()
	{
		return smoothstep(percent(IntType(1) - max({ IntType(0), vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), IntType(1))) }), .85, IntType(1)));
	}
	
	RealType background_sky_rise_set_alpha(BoolType rise)
	{
		RealType t, d, a;
		t = mod_fix(global::_app->background_sky_time, IntType(360));
		d = percent(vec3_dot(global::_app->background_sun_direction, vec3(IntType(0), IntType(0), IntType(1))), -0.175, 0.325);
		if (d > 0.5)
			a = percent(d, IntType(1), 0.5);
		else
			a = percent(d, IntType(0), .5);
		
		if ((rise && t < IntType(180)) || (!rise && t > IntType(180)))
			a = IntType(0);
		return smoothstep(a);
	}
	
	void background_sky_startup()
	{
		global::_app->background_image_sphere_vbuffer = null_;
		global::_app->background_image_cube_vbuffer = null_;
		global::_app->background_image_cube_mapped_vbuffer = null_;
		global::_app->background_fog_texture = texture_sprite(ID_spr_fog);
		global::_app->background_fog_vbuffer = null_;
		global::_app->background_sky_stars_texture = texture_sprite(ID_spr_stars);
		global::_app->background_sky_stars_vbuffer = null_;
		global::_app->background_sky_sun_moon_vbuffer = null_;
		global::_app->background_sky_clouds_vbuffer = null_;
		global::_app->background_sky_clouds_vbuffer_pos = ArrType::From({});
	}
	
	void background_sky_update()
	{
		if (!(global::_app->background_fog_color_custom > 0))
		{
			global::_app->background_fog_color_final = global::_app->background_sky_color;
			if (!(global::_app->background_image_show > 0))
			{
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color((IntType)(global::_app->background_fog_color_final), IntType(0), 0.95), global::_app->background_night_alpha);
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), c_white, (IntType(1) - global::_app->background_night_alpha) * 0.58);
				global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_blue, c_black, 0.3), global::_app->background_night_alpha * 0.05);
				if (global::_app->background_twilight > 0)
				{
					RealType cam_xyangle, p;
					cam_xyangle = point_direction(global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_to.Real(X_), global::cam_to.Real(Y_)) - global::_app->background_sky_rotation;
					p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(90))) / 180.0, IntType(1));
					global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_sunset_start, c_sunset_end, global::_app->background_sunset_alpha), global::_app->background_sunset_alpha * p);
					p = clamp(IntType(0), IntType(1) - abs(angle_difference_fix(cam_xyangle, IntType(270))) / 180.0, IntType(1));
					global::_app->background_fog_color_final = merge_color((IntType)(global::_app->background_fog_color_final), merge_color(c_sunset_start, c_sunset_end, global::_app->background_sunrise_alpha), global::_app->background_sunrise_alpha * p);
				}
			}
		}
		if (global::_app->background_fog_custom_object_color > 0)
			global::_app->background_fog_object_color_final = global::_app->background_fog_object_color;
		else
			global::_app->background_fog_object_color_final = global::_app->background_fog_color_final;
		
		RealType alphay;
		if (global::_app->background_sky_clouds_mode == /*"faded"*/ STR(758))
			alphay = percent(global::cam_from.Real(Z_), global::_app->background_sky_clouds_height, global::_app->background_sky_clouds_height - IntType(250));
		else
			alphay = IntType(1);
		
		global::_app->background_clouds_alpha = (global::_app->background_sky_clouds_mode == /*"faded"*/ STR(758) ? IntType(1) - min({ global::_app->background_night_alpha, 0.95 }) : .8 - min({ global::_app->background_night_alpha, 0.75 })) * alphay;
		global::_app->background_sky_clouds_final = merge_color((IntType)(global::_app->background_sky_clouds_color), make_color_rgb(IntType(120), IntType(120), IntType(255)), global::_app->background_night_alpha);
		global::_app->background_sky_clouds_vbuffer_pos = ArrType::From({});
		RealType size, offset, xo, yo, num, xx;
		IntType i;
		size = global::_app->background_sky_clouds_size * IntType(32);
		offset = (mod((global::_app->background_sky_clouds_speed * (global::_app->background_time * 0.25 + global::_app->background_sky_time * IntType(100)) + global::_app->background_sky_clouds_offset), size));
		xo = ((IntType)(global::cam_from.Real(X_) / size)) * size;
		yo = ((IntType)(global::cam_from.Real(Y_) / size)) * size - offset;
		num = (ceil((RealType)global::_app->background_fog_distance / size) + IntType(1)) * size;
		xx = -num;
		i = IntType(0);
		while (xx < num)
		{
			RealType yy = -num;
			while (yy < num)
			{
				global::_app->background_sky_clouds_vbuffer_pos[i] = point3D(xx + xo, yy + yo, global::_app->background_sky_clouds_height);
				i++;
				yy += size;
			}
			
			xx += size;
		}
		
	}
	
	RealType background_sky_update_clouds(ScopeAny self)
	{
		VarType tex, hei;
		RealType texwid, texhei, texsize, topalpha, cloudsize;
		IntType col, colsidesdark, colsideslight, coltop, colbottom;
		if (!idBool(sVar(background_sky_clouds_tex), ready))
			return IntType(0);
		tex = ((idVar(sVar(background_sky_clouds_tex), type) == e_res_type_PACK) ? idVar(sVar(background_sky_clouds_tex), clouds_texture) : idVar(sVar(background_sky_clouds_tex), texture));
		texwid = texture_width(tex);
		texhei = texture_height(tex);
		texsize = max({ texwid, texhei });
		hei = IntType(0);
		if (sVar(background_sky_clouds_mode) == /*"faded"*/ STR(758))
		{
			colsidesdark = c_white;
			colsideslight = c_white;
			coltop = c_white;
			colbottom = c_white;
			topalpha = IntType(0);
		}
		else
		{
			colsidesdark = c_clouds_sidesdark;
			colsideslight = c_clouds_sideslight;
			coltop = c_clouds_top;
			colbottom = c_clouds_bottom;
			topalpha = IntType(1);
		}
		
		if (sVar(background_sky_clouds_vbuffer) > 0)
			vbuffer_destroy(sVar(background_sky_clouds_vbuffer));
		sVar(background_sky_clouds_vbuffer) = vbuffer_start();
		cloudsize = sVar(background_sky_clouds_size) * IntType(32);
		if (sVar(background_sky_clouds_mode) != /*"flat"*/ STR(759))
		{
			IntType surf = surface_create((IntType)(texwid), (IntType)(texhei));
			surface_set_target(surf);
		{
			draw_clear_alpha(c_black, 0.0);
			draw_texture({ tex, IntType(0), IntType(0) });
		}
			surface_reset_target();
			global::buffer_current = buffer_create((IntType)(texwid * texhei * IntType(4)), buffer_fixed, IntType(4));
			buffer_get_surface(global::buffer_current, surf, IntType(0));
			buffer_seek(global::buffer_current, buffer_seek_start, IntType(0));
			ArrType hascolor;
			for (IntType py = IntType(0); py < texhei; py++)
				for (IntType px = IntType(0); px < texwid; px++)
					hascolor[px][py] = ((IntType)buffer_read_int_uns() >> (IntType)IntType(24) == IntType(255));
			buffer_delete(global::buffer_current);
			surface_free(surf);
			RealType pw, ph, blockw, blockh;
			pw = 1.0 / texwid;
			ph = 1.0 / texhei;
			blockw = cloudsize / texwid;
			blockh = cloudsize / texhei;
			hei = sVar(background_sky_clouds_thickness);
			for (IntType xx = IntType(0); xx < texwid; xx++)
			{
				for (IntType yy = IntType(0); yy < texhei; yy++)
				{
					RealType vx, vy, tx, ty;
					if (!hascolor[xx][yy])
						continue;
					vx = xx * blockw;
					vy = yy * blockh;
					tx = xx * pw;
					ty = yy * ph;
					if (!hascolor[mod((xx + IntType(1)), texwid)][yy])
					{
						global::vertex_rgb = colsidesdark;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(1), IntType(0), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(1), IntType(0), IntType(0), tx, ty + ph });
						vertex_add({ vx + blockw, vy, hei, IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx + blockw, vy, hei, IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy, IntType(0), IntType(1), IntType(0), IntType(0), tx + pw, ty });
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(1), IntType(0), IntType(0), tx, ty });
					}
					if (!hascolor[mod_fix(xx - IntType(1), texwid)][yy])
					{
						global::vertex_rgb = colsidesdark;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy, IntType(0), -IntType(1), IntType(0), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx, vy, hei, -IntType(1), IntType(0), IntType(0), tx, ty + ph });
						vertex_add({ vx, vy + blockh, hei, -IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx, vy + blockh, hei, -IntType(1), IntType(0), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy + blockh, IntType(0), -IntType(1), IntType(0), IntType(0), tx + pw, ty });
						vertex_add({ vx, vy, IntType(0), -IntType(1), IntType(0), IntType(0), tx, ty });
					}
					if (!hascolor[xx][mod((yy + IntType(1)), texhei)])
					{
						global::vertex_rgb = colsideslight;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx, ty + ph });
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx + blockw, vy + blockh, hei, IntType(0), IntType(1), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx + pw, ty });
						vertex_add({ vx, vy + blockh, IntType(0), IntType(0), IntType(1), IntType(0), tx, ty });
					}
					if (!hascolor[xx][mod_fix(yy - IntType(1), texhei)])
					{
						global::vertex_rgb = colsideslight;
						global::vertex_alpha = IntType(1);
						vertex_add({ vx + blockw, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx, ty });
						global::vertex_alpha = topalpha;
						vertex_add({ vx + blockw, vy, hei, IntType(0), -IntType(1), IntType(0), tx, ty + ph });
						vertex_add({ vx, vy, hei, IntType(0), -IntType(1), IntType(0), tx + pw, ty + ph });
						vertex_add({ vx, vy, hei, IntType(0), -IntType(1), IntType(0), tx + pw, ty + ph });
						global::vertex_alpha = IntType(1);
						vertex_add({ vx, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx + pw, ty });
						vertex_add({ vx + blockw, vy, IntType(0), IntType(0), -IntType(1), IntType(0), tx, ty });
					}
				}
			}
		}
		col = (sVar(background_sky_clouds_mode) == /*"flat"*/ STR(759) ? coltop : colbottom);
		global::vertex_rgb = col;
		global::vertex_alpha = IntType(1);
		vertex_add({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(0) });
		vertex_add({ IntType(0), cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(1) });
		vertex_add({ cloudsize, cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, cloudsize, IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(1), IntType(0) });
		vertex_add({ IntType(0), IntType(0), IntType(0), IntType(0), IntType(0), -IntType(1), IntType(0), IntType(0) });
		global::vertex_rgb = coltop;
		global::vertex_alpha = topalpha;
		vertex_add({ IntType(0), IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(0) });
		vertex_add({ cloudsize, IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(0) });
		vertex_add({ cloudsize, cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(1) });
		vertex_add({ cloudsize, cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(1), IntType(1) });
		vertex_add({ IntType(0), cloudsize, hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(1) });
		vertex_add({ IntType(0), IntType(0), hei, IntType(0), IntType(0), IntType(1), IntType(0), IntType(0) });
		global::vertex_rgb = c_white;
		global::vertex_alpha = IntType(1);
		vbuffer_done();
		return 0.0;
	}
	
	void background_sky_update_sun()
	{
		RealType range = (RealType)global::_app->project_render_distance / 8.0;
		global::_app->background_light_data[IntType(0)] = lengthdir_x(range, global::_app->background_sky_rotation - IntType(90)) * lengthdir_x(1.0, global::_app->background_sky_time + 90.0);
		global::_app->background_light_data[IntType(1)] = lengthdir_y(range, global::_app->background_sky_rotation - IntType(90)) * lengthdir_x(1.0, global::_app->background_sky_time + 90.0);
		global::_app->background_light_data[IntType(2)] = lengthdir_z(range, global::_app->background_sky_time + IntType(90));
		if (mod_fix(global::_app->background_sky_time, IntType(360)) == IntType(0))
			global::_app->background_light_data[IntType(0)] += 0.1;
		global::_app->background_sun_direction = vec3_normalize(ArrType::From({ global::_app->background_light_data.Value(IntType(0)), global::_app->background_light_data.Value(IntType(1)), global::_app->background_light_data.Value(IntType(2)) }));
		global::_app->background_light_data[IntType(3)] = range / 2.0;
		global::_app->background_light_data[IntType(4)] = ((RealType)color_get_red(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(5)] = ((RealType)color_get_green(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(6)] = ((RealType)color_get_blue(global::_app->background_sunlight_color_final) / 255.0) * global::_app->background_sunlight_strength;
		global::_app->background_light_data[IntType(7)] = range * IntType(2);
	}
	
	void bench_clear()
	{
		withAll (obj_template, noone)
			if (self->creator == global::_app->bench_settings)
				instance_destroy(ScopeAny(self));
		
		withAll (obj_resource, noone)
			if (self->creator == global::_app->bench_settings)
				instance_destroy(ScopeAny(self));
		
	}
	
	RealType bench_click(ScopeAny self, VarType type)
	{
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == type && sStr(bench_show_ani_type) == /*""*/ STR(0))
		{
			action_bench_create(self);
			sStr(bench_show_ani_type) = /*"hide"*/ STR(760);
			return IntType(0);
		}
		withOne (obj_bench_settings, sInt(bench_settings), self->id)
		{
			ObjType(obj_bench_settings, self->id)->type = type;
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_CHARACTER)
			{
				if (ds_list_find_index(ObjType(obj_sortlist, self->char_list)->list, self->model_name) < IntType(0))
				{
					self->model_name = default_model;
					self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
				}
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_SPECIAL_BLOCK)
			{
				if (ds_list_find_index(ObjType(obj_sortlist, self->special_block_list)->list, self->model_name) < IntType(0))
				{
					self->model_name = default_special_block;
					self->model_state = array_copy_1d(ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(sVar(model_name)))->default_state);
				}
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_BODYPART)
			{
				self->model_tex = global::mc_res;
				self->model_tex_material = global::mc_res;
				self->model_tex_normal = global::mc_res;
				temp_update_model(ScopeAny(self));
				temp_update_model_part(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
			}
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_BLOCK)
				temp_update_block(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_ITEM)
				render_generate_item(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_SHAPE)
				temp_update_shape(ScopeAny(self));
			if (ObjType(obj_bench_settings, self->id)->type == e_tl_type_MODEL)
			{
				self->model_tex = null_;
				self->model_tex_material = null_;
				self->model_tex_normal = null_;
				temp_update_model(ScopeAny(self));
				temp_update_model_shape(ScopeAny(self));
				if (show_modelbench_popup)
					withOne (app, global::_app->id, self->id)
						if (!ObjType(obj_popup, global::_app->popup_modelbench)->hidden && !ObjType(obj_popup, global::_app->popup_modelbench)->not_now)
							popup_show(ScopeAny(self), global::_app->popup_modelbench);
				
			}
		}
		
		if (ObjType(obj_bench_settings, sInt(bench_settings))->type == e_tl_type_PARTICLE_SPAWNER)
			bench_update_particles_list(self);
		withOne (obj_preview, ObjType(obj_bench_settings, sInt(bench_settings))->preview, self->id)
		{
			particle_spawner_clear(ScopeAny(self));
			preview_reset_view(ScopeAny(self));
			self->update = true;
		}
		
		bench_clear();
		sVar(bench_settings_ani) = IntType(0);
		return 0.0;
	}
	
	RealType bench_draw(ScopeAny self)
	{
		if (sStr(bench_show_ani_type) == /*""*/ STR(0) && sVar(bench_show_ani) == IntType(0))
			return IntType(0);
		StringType func;
		VarType ani;
		VarType sdx, sdy, ymax;
		func = /*""*/ STR(0);
		if (sStr(bench_show_ani_type) == /*"show"*/ STR(761))
		{
			sVar(bench_show_ani) = test_reduced_motion(IntType(1), min({ IntType(1), sVar(bench_show_ani) + 0.1 * global::delta }));
			if (sVar(bench_show_ani) == IntType(1))
				sStr(bench_show_ani_type) = /*""*/ STR(0);
			func = /*"easeoutcirc"*/ STR(567);
		}
		else
			if (sStr(bench_show_ani_type) == /*"hide"*/ STR(760))
			{
				sVar(bench_show_ani) = test_reduced_motion(IntType(0), max({ IntType(0), sVar(bench_show_ani) - 0.1 * global::delta }));
				if (sVar(bench_show_ani) == IntType(0))
					sStr(bench_show_ani_type) = /*""*/ STR(0);
				func = /*"easeincirc"*/ STR(566);
			}
		
		if (sVar(bench_show_ani) == IntType(0))
		{
			if (sVar(window_busy) == /*"bench"*/ STR(762))
				sVar(window_busy) = /*""*/ STR(0);
			ObjType(obj_bench_settings, sInt(bench_settings))->height = IntType(0);
			ObjType(obj_bench_settings, sInt(bench_settings))->height_goal = sReal(bench_height);
			return IntType(0);
		}
		else
			ObjType(obj_bench_settings, sInt(bench_settings))->height = ObjType(obj_bench_settings, sInt(bench_settings))->height_goal;
		
		if (sVar(window_busy) == /*"bench"*/ STR(762))
			sVar(window_busy) = /*""*/ STR(0);
		ani = ease(func, sVar(bench_show_ani));
		sVar(content_x) = ObjType(obj_bench_settings, sInt(bench_settings))->posx - (IntType(8) - (IntType(8) * ani));
		sVar(content_y) = ObjType(obj_bench_settings, sInt(bench_settings))->posy;
		sVar(content_width) = IntType(534);
		sVar(content_height) = ObjType(obj_bench_settings, sInt(bench_settings))->height;
		sBool(content_mouseon) = !sBool(popup_mouseon);
		sVar(dx) = sVar(content_x);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = sVar(content_height);
		if (!app_mouse_box(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height)) && sBool(mouse_left_pressed) && sVar(window_busy) == /*""*/ STR(0))
		{
			sStr(bench_show_ani_type) = /*"hide"*/ STR(760);
			sVar(window_focus) = /*""*/ STR(0);
			app_mouse_clear(self);
		}
		draw_set_alpha(ani);
		draw_dropshadow(self, sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), c_black, IntType(1));
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_outline(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), IntType(1), global::c_border, global::a_border, true);
		clip_begin(sVar(content_x) - IntType(4), sVar(content_y) - IntType(4), sVar(content_width) + IntType(8), sVar(content_height) + IntType(8));
		sdx = sVar(dx);
		sdy = sVar(dy);
		sVar(dy) += IntType(8);
		RealType types, divides, lefth;
		BoolType skipasset;
		types = IntType(13);
		divides = IntType(4);
		lefth = (types * IntType(32)) + (divides * IntType(9));
		for (IntType i = IntType(0); i < ds_list_size(idInt(sInt(bench_type_list), item)); i++)
		{
			skipasset = false;
			if (!(sReal(setting_advanced_mode) > 0))
			{
				if (ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->name == /*"typemodel"*/ STR(169) || ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->name == /*"typebackground"*/ STR(181))
					skipasset = true;
			}
			if (!skipasset)
			{
				list_item_draw(self, { DsList(idInt(sInt(bench_type_list), item)).Value(i), sVar(dx), sVar(dy), IntType(192), (sReal(window_compact) > 0) ? IntType(28) : IntType(32), (ObjType(obj_bench_settings, sInt(bench_settings))->type == ObjType(obj_list_item, DsList(idInt(sInt(bench_type_list), item)).Value(i))->value), IntType(0), IntType(5) });
				sVar(dy) += ((sReal(window_compact) > 0) ? IntType(28) : IntType(32));
			}
			if (i == IntType(2) || i == IntType(6) || i == IntType(9))
			{
				draw_divide(sVar(dx) + IntType(5), sVar(dy) + IntType(4), IntType(184));
				sVar(dy) += IntType(9);
			}
		}
		sVar(dy) += IntType(8);
		ymax = sVar(dy);
		sVar(dy) = sdy + IntType(12);
		sVar(dx) += IntType(192) + IntType(12);
		sVar(dw) = (sVar(content_width) - IntType(192)) - IntType(24);
		bench_draw_settings(self, sVar(dx), sVar(dy), sVar(dw), sVar(dh));
		ymax = max({ sVar(dy), ymax });
		sVar(dy) = ymax;
		draw_divide_vertical(sdx + IntType(193), sdy, ObjType(obj_bench_settings, sInt(bench_settings))->height);
		ObjType(obj_bench_settings, sInt(bench_settings))->height_goal = sVar(dy) - sdy;
		clip_end();
		draw_set_alpha(1.0);
		if (sVar(window_busy) == /*""*/ STR(0) && sStr(bench_show_ani_type) != /*"hide"*/ STR(760))
			sVar(window_busy) = /*"bench"*/ STR(762);
		return 0.0;
	}
	
}
