/*
	NOTE:
	This file was autogenerated by CppGen, changes may be overwritten and forever lost!
	Modify at your own risk!
	
	[ Generated on 2023.08.25 12:18:14 ]
*/

#include "Scripts.hpp"

namespace CppProject
{
	void shader_material_uniforms(Scope<obj_shader> self)
	{
		new_shader_uniform(self, /*"uDefaultEmissive"*/ STR(2860));
		new_shader_uniform(self, /*"uDefaultSubsurface"*/ STR(2861));
		new_shader_sampler(self, /*"uTextureMaterial"*/ STR(2862));
		new_shader_sampler(self, /*"uTextureNormal"*/ STR(2863));
		new_shader_uniform(self, /*"uMaterialFormat"*/ STR(2529));
		new_shader_uniform(self, /*"uRoughness"*/ STR(2533));
		new_shader_uniform(self, /*"uMetallic"*/ STR(2532));
		new_shader_uniform(self, /*"uEmissive"*/ STR(2534));
		new_shader_uniform(self, /*"uSSS"*/ STR(2542));
		new_shader_uniform(self, /*"uSSSRadius"*/ STR(2543));
		new_shader_uniform(self, /*"uSSSColor"*/ STR(2544));
		new_shader_uniform(self, /*"uSSSHighlight"*/ STR(2864));
		new_shader_uniform(self, /*"uSSSHighlightStrength"*/ STR(2865));
		new_shader_uniform(self, /*"uIsWater"*/ STR(2535));
	}
	
	void shader_noise_set(ScopeAny self)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2805)), surface_get_texture((IntType)(global::render_grain_noise)));
		gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2805)), true);
		gpu_set_tex_filter_ext(DsMap(sInt(sampler_map)).Value(/*"uNoiseBuffer"*/ STR(2805)), true);
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2757), global::render_width, global::render_height);
		render_set_uniform(/*"uStrength"*/ STR(2866), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_STRENGTH));
		render_set_uniform(/*"uSaturation"*/ STR(2770), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_SATURATION));
		render_set_uniform(/*"uSize"*/ STR(2867), vec2_mul(vec2(max({ ceil((RealType)global::render_width / 8.0), ceil((RealType)global::render_height / 8.0) })), idVar(global::render_camera, value).Value(e_value_CAM_GRAIN_SIZE)));
	}
	
	void shader_outline_set(RealType width, RealType height)
	{
		render_set_uniform_vec2(/*"uTexSize"*/ STR(2762), width, height);
	}
	
	void shader_palette_set(ScopeAny self, VarType palette, VarType palettekey)
	{
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uPalette"*/ STR(2868)), sprite_get_texture((IntType)(palette), IntType(0)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uPalette"*/ STR(2868)), false);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uPaletteKey"*/ STR(2869)), sprite_get_texture((IntType)(palettekey), IntType(0)));
		gpu_set_texfilter_ext(DsMap(sInt(sampler_map)).Value(/*"uPaletteKey"*/ STR(2869)), false);
		render_set_uniform(/*"uPaletteSize"*/ STR(2870), sprite_get_width((IntType)(palette)));
	}
	
	void shader_reset_uniforms()
	{
		global::shader_uniform_color_ext = null_;
		global::shader_uniform_rgb_add = null_;
		global::shader_uniform_rgb_sub = null_;
		global::shader_uniform_hsb_add = null_;
		global::shader_uniform_hsb_sub = null_;
		global::shader_uniform_hsb_mul = null_;
		global::shader_uniform_mix_color = null_;
		global::shader_uniform_mix_percent = null_;
		global::shader_uniform_emissive = null_;
		global::shader_uniform_metallic = null_;
		global::shader_uniform_roughness = null_;
		global::shader_uniform_wind = null_;
		global::shader_uniform_wind_terrain = null_;
		global::shader_uniform_fog = null_;
		global::shader_uniform_sss = null_;
		global::shader_uniform_sss_red = null_;
		global::shader_uniform_sss_green = null_;
		global::shader_uniform_sss_blue = null_;
		global::shader_uniform_sss_color = null_;
		global::shader_uniform_wind_strength = null_;
		global::shader_uniform_glow = null_;
		global::shader_uniform_glow_texture = null_;
		global::shader_uniform_glow_color = null_;
	}
	
	void shader_set_uniform_color(VarType index, VarType color, VarType alpha)
	{
		shader_submit_vec4(index, (RealType)color_get_red((IntType)(color)) / 255.0, (RealType)color_get_green((IntType)(color)) / 255.0, (RealType)color_get_blue((IntType)(color)) / 255.0, alpha);
	}
	
	BoolType shader_startup()
	{
		global::shader_clip_x = IntType(0);
		global::shader_clip_y = IntType(0);
		global::shader_clip_width = IntType(0);
		global::shader_clip_height = IntType(0);
		global::shader_clip_active = false;
		global::shader_mask = false;
		log({ /*"Shader init"*/ STR(2871) });
		log({ /*"shaders_are_supported"*/ STR(2872), yesno(shaders_are_supported()) });
		BoolType err = false;
		if (!shaders_are_supported())
			err = true;
		global::shader_check_uniform = false;
		if (!err)
		{
			global::shader_map = ds_map_create();
			new_shader(/*"shader_alpha_fix"*/ STR(2873));
			new_shader(/*"shader_alpha_test"*/ STR(2874));
			new_shader(/*"shader_blend"*/ STR(2875));
			new_shader(/*"shader_border"*/ STR(2876));
			new_shader(/*"shader_outline"*/ STR(2877));
			new_shader(/*"shader_palette"*/ STR(2878));
			new_shader(/*"shader_color_camera"*/ STR(2879));
			new_shader(/*"shader_color_fog"*/ STR(2880));
			new_shader(/*"shader_color_fog_lights"*/ STR(2881));
			new_shader(/*"shader_depth"*/ STR(2882));
			new_shader(/*"shader_depth_ortho"*/ STR(2883));
			new_shader(/*"shader_depth_point"*/ STR(2884));
			new_shader(/*"shader_draw_texture"*/ STR(2885));
			new_shader(/*"shader_replace"*/ STR(2886));
			new_shader(/*"shader_replace_alpha"*/ STR(2887));
			new_shader(/*"shader_high_dof"*/ STR(2888));
			new_shader(/*"shader_high_dof_coc"*/ STR(2889));
			new_shader(/*"shader_high_dof_coc_blur"*/ STR(2890));
			new_shader(/*"shader_high_fog"*/ STR(2891));
			new_shader(/*"shader_high_fog_apply"*/ STR(2892));
			new_shader(/*"shader_high_light_point"*/ STR(2893));
			new_shader(/*"shader_high_light_point_shadowless"*/ STR(2894));
			new_shader(/*"shader_high_light_spot"*/ STR(2895));
			new_shader(/*"shader_high_light_sun"*/ STR(2896));
			new_shader(/*"shader_high_ssao"*/ STR(2897));
			new_shader(/*"shader_color_glow"*/ STR(2898));
			new_shader(/*"shader_high_bloom_threshold"*/ STR(2899));
			new_shader(/*"shader_add"*/ STR(2900));
			new_shader(/*"shader_blur"*/ STR(2901));
			new_shader(/*"shader_color_correction"*/ STR(2902));
			new_shader(/*"shader_vignette"*/ STR(2903));
			new_shader(/*"shader_noise"*/ STR(2904));
			new_shader(/*"shader_ca"*/ STR(2905));
			new_shader(/*"shader_distort"*/ STR(2906));
			new_shader(/*"shader_high_lighting_apply"*/ STR(2907));
			new_shader(/*"shader_high_samples_add"*/ STR(2908));
			new_shader(/*"shader_high_samples_unpack"*/ STR(2909));
			new_shader(/*"shader_high_depth_normal"*/ STR(2910));
			new_shader(/*"shader_high_material"*/ STR(2911));
			new_shader(/*"shader_high_subsurface"*/ STR(2912));
			new_shader(/*"shader_high_subsurface_scatter"*/ STR(2913));
			new_shader(/*"shader_high_raytrace"*/ STR(2914));
			new_shader(/*"shader_high_raytrace_resolve"*/ STR(2915));
			new_shader(/*"shader_high_indirect_blur"*/ STR(2916));
			new_shader(/*"shader_tonemap"*/ STR(2917));
			new_shader(/*"shader_clip"*/ STR(2918));
			new_shader(/*"shader_high_glint"*/ STR(2919));
			global::shader_texture_surface = false;
			global::shader_texture_filter_linear = false;
			global::shader_texture_filter_mipmap = false;
			global::shader_texture_width = IntType(0);
			global::shader_texture_height = IntType(0);
			withAll (obj_shader, noone)
			{
				log({ self->name + /*" compiled"*/ STR(2920), yesno(shader_is_compiled(self->shader)) });
				if (!shader_is_compiled(self->shader))
				{
					err = true;
					break;
				}
			}
			
		}
		if (err)
		{
			log({ /*"Shader compilation failed"*/ STR(2921) });
			log({ /*"Try updating your graphics drivers"*/ STR(2922), link_article_drivers });
			if (show_question(/*"Some shaders failed to compile.\nCheck that your graphics drivers are up-to-date and restart Mine-imator.\n\nOpen support article about updating graphics drivers?"*/ STR(2923)))
				open_url(drivers_url_get());
			game_end();
			return false;
		}
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_border), noone)
		{
			new_shader_uniform(self, /*"uTexSize"*/ STR(2762));
			new_shader_uniform(self, /*"uColor"*/ STR(2763));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_outline), noone)
		{
			new_shader_uniform(self, /*"uTexSize"*/ STR(2762));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_palette), noone)
		{
			new_shader_sampler(self, /*"uPalette"*/ STR(2868));
			new_shader_sampler(self, /*"uPaletteKey"*/ STR(2869));
			new_shader_uniform(self, /*"uPaletteSize"*/ STR(2870));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_camera), noone)
		{
			new_shader_uniform(self, /*"uBrightness"*/ STR(2769));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2082));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2083));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2084));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2085));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2086));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2087));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_fog), noone)
		{
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2081));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2082));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2083));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2084));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2085));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2086));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2087));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_fog_lights), noone)
		{
			shader_material_uniforms(self);
			new_shader_sampler(self, /*"uGlintTexture"*/ STR(2547));
			new_shader_uniform(self, /*"uGlintOffset"*/ STR(2548));
			new_shader_uniform(self, /*"uGlintSize"*/ STR(2550));
			new_shader_uniform(self, /*"uGlintEnabled"*/ STR(2546));
			new_shader_uniform(self, /*"uGlintStrength"*/ STR(2549));
			new_shader_uniform(self, /*"uIsGround"*/ STR(2537));
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2081));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2082));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2083));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2084));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2085));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2086));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2087));
			new_shader_uniform(self, /*"uLightAmount"*/ STR(2774));
			new_shader_uniform(self, /*"uSunDirection"*/ STR(2773));
			new_shader_uniform(self, /*"uLightData"*/ STR(2775));
			new_shader_uniform(self, /*"uAmbientColor"*/ STR(2776));
			new_shader_uniform(self, /*"uFallbackColor"*/ STR(2777));
			new_shader_uniform(self, /*"uTonemapper"*/ STR(2778));
			new_shader_uniform(self, /*"uExposure"*/ STR(2779));
			new_shader_uniform(self, /*"uGamma"*/ STR(2780));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_depth), noone)
		{
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_depth_point), noone)
		{
			new_shader_uniform(self, /*"uEye"*/ STR(2781));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_draw_texture), noone)
			new_shader_uniform(self, /*"uMask"*/ STR(2811));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_replace), noone)
			new_shader_uniform(self, /*"uReplaceColor"*/ STR(2536));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_replace_alpha), noone)
			new_shader_uniform(self, /*"uReplaceColor"*/ STR(2536));
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof), noone)
		{
			new_shader_sampler(self, /*"uBlurBuffer"*/ STR(2794));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uBlurSize"*/ STR(2795));
			new_shader_uniform(self, /*"uBias"*/ STR(2796));
			new_shader_uniform(self, /*"uThreshold"*/ STR(2787));
			new_shader_uniform(self, /*"uGain"*/ STR(2797));
			new_shader_uniform(self, /*"uFringe"*/ STR(2798));
			new_shader_uniform(self, /*"uFringeAngle"*/ STR(2799));
			new_shader_uniform(self, /*"uFringeStrength"*/ STR(2800));
			new_shader_uniform(self, /*"uSampleAmount"*/ STR(2801));
			new_shader_uniform(self, /*"uSamples"*/ STR(2759));
			new_shader_uniform(self, /*"uWeightSamples"*/ STR(2802));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof_coc), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_uniform(self, /*"uDepth"*/ STR(2791));
			new_shader_uniform(self, /*"uRange"*/ STR(2792));
			new_shader_uniform(self, /*"uFadeSize"*/ STR(2793));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_dof_coc_blur), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uPixelCheck"*/ STR(2789));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_fog), noone)
		{
			new_shader_uniform(self, /*"uCameraPos"*/ STR(2924));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_fog_apply), noone)
		{
			new_shader_sampler(self, /*"uFogBuffer"*/ STR(2803));
			new_shader_uniform(self, /*"uFogColor"*/ STR(1925));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_point), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
			new_shader_uniform(self, /*"uLightPosition"*/ STR(2816));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2817));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2818));
			new_shader_uniform(self, /*"uLightNear"*/ STR(2819));
			new_shader_uniform(self, /*"uLightFar"*/ STR(2820));
			new_shader_uniform(self, /*"uLightFadeSize"*/ STR(2821));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_uniform(self, /*"uDepthBufferSize"*/ STR(2824));
			new_shader_uniform(self, /*"uShadowPosition"*/ STR(2822));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2541));
			new_shader_uniform(self, /*"uLightSize"*/ STR(2823));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_point_shadowless), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
			new_shader_uniform(self, /*"uLightAmount"*/ STR(2774));
			new_shader_uniform(self, /*"uLightData"*/ STR(2775));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2541));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_spot), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
			new_shader_uniform(self, /*"uLightMatrix"*/ STR(2825));
			new_shader_uniform(self, /*"uShadowMatrix"*/ STR(2826));
			new_shader_uniform(self, /*"uLightPosition"*/ STR(2816));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2817));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2818));
			new_shader_uniform(self, /*"uLightNear"*/ STR(2819));
			new_shader_uniform(self, /*"uLightFar"*/ STR(2820));
			new_shader_uniform(self, /*"uLightFadeSize"*/ STR(2821));
			new_shader_uniform(self, /*"uLightSpotSharpness"*/ STR(2827));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2541));
			new_shader_uniform(self, /*"uLightSize"*/ STR(2823));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_light_sun), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
			new_shader_uniform(self, /*"uLightDirection"*/ STR(2831));
			new_shader_uniform(self, /*"uLightColor"*/ STR(2817));
			new_shader_uniform(self, /*"uLightStrength"*/ STR(2818));
			new_shader_uniform(self, /*"uSunNear"*/ STR(2829));
			new_shader_uniform(self, /*"uSunFar"*/ STR(2830));
			new_shader_sampler(self, /*"uDepthBuffer0"*/ STR(2832));
			new_shader_sampler(self, /*"uDepthBuffer1"*/ STR(2833));
			new_shader_sampler(self, /*"uDepthBuffer2"*/ STR(2834));
			new_shader_uniform(self, /*"uLightSpecular"*/ STR(2541));
			new_shader_uniform(self, /*"uLightMatBiasMVP"*/ STR(2828));
			new_shader_uniform(self, /*"uCascadeEndClipSpace"*/ STR(2835));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_ssao), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2804));
			new_shader_sampler(self, /*"uEmissiveBuffer"*/ STR(2855));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2805));
			new_shader_sampler(self, /*"uMaskBuffer"*/ STR(2856));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2788));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2843));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2844));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2806));
			new_shader_uniform(self, /*"uKernel"*/ STR(2758));
			new_shader_uniform(self, /*"uRadius"*/ STR(2760));
			new_shader_uniform(self, /*"uPower"*/ STR(2756));
			new_shader_uniform(self, /*"uColor"*/ STR(2763));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_glow), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uColorsExt"*/ STR(2081));
			new_shader_uniform(self, /*"uRGBAdd"*/ STR(2082));
			new_shader_uniform(self, /*"uRGBSub"*/ STR(2083));
			new_shader_uniform(self, /*"uHSBAdd"*/ STR(2084));
			new_shader_uniform(self, /*"uHSBSub"*/ STR(2085));
			new_shader_uniform(self, /*"uHSBMul"*/ STR(2086));
			new_shader_uniform(self, /*"uMixColor"*/ STR(2087));
			new_shader_uniform(self, /*"uGlow"*/ STR(2545));
			new_shader_uniform(self, /*"uGlowTexture"*/ STR(2539));
			new_shader_uniform(self, /*"uGlowColor"*/ STR(2538));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_bloom_threshold), noone)
		{
			new_shader_uniform(self, /*"uThreshold"*/ STR(2787));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_add), noone)
		{
			new_shader_sampler(self, /*"uAddTexture"*/ STR(2754));
			new_shader_uniform(self, /*"uAmount"*/ STR(2755));
			new_shader_uniform(self, /*"uPower"*/ STR(2756));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_blur), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uRadius"*/ STR(2760));
			new_shader_uniform(self, /*"uDirection"*/ STR(2761));
			new_shader_uniform(self, /*"uKernel"*/ STR(2758));
			new_shader_uniform(self, /*"uSamples"*/ STR(2759));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_color_correction), noone)
		{
			new_shader_uniform(self, /*"uContrast"*/ STR(2768));
			new_shader_uniform(self, /*"uBrightness"*/ STR(2769));
			new_shader_uniform(self, /*"uSaturation"*/ STR(2770));
			new_shader_uniform(self, /*"uVibrance"*/ STR(2771));
			new_shader_uniform(self, /*"uColorBurn"*/ STR(2772));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_vignette), noone)
		{
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uRadius"*/ STR(2760));
			new_shader_uniform(self, /*"uSoftness"*/ STR(2925));
			new_shader_uniform(self, /*"uStrength"*/ STR(2866));
			new_shader_uniform(self, /*"uColor"*/ STR(2763));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_noise), noone)
		{
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2805));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2806));
			new_shader_uniform(self, /*"uStrength"*/ STR(2866));
			new_shader_uniform(self, /*"uSaturation"*/ STR(2770));
			new_shader_uniform(self, /*"uSize"*/ STR(2867));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_ca), noone)
		{
			new_shader_uniform(self, /*"uBlurAmount"*/ STR(2764));
			new_shader_uniform(self, /*"uColorOffset"*/ STR(2765));
			new_shader_uniform(self, /*"uDistortChannels"*/ STR(2766));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_distort), noone)
		{
			new_shader_uniform(self, /*"uDistortAmount"*/ STR(2784));
			new_shader_uniform(self, /*"uRepeatImage"*/ STR(2785));
			new_shader_uniform(self, /*"uZoomAmount"*/ STR(2786));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_lighting_apply), noone)
		{
			new_shader_sampler(self, /*"uShadows"*/ STR(2808));
			new_shader_sampler(self, /*"uSpecular"*/ STR(2810));
			new_shader_sampler(self, /*"uMask"*/ STR(2811));
			new_shader_sampler(self, /*"uEmissive"*/ STR(2534));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2812));
			new_shader_uniform(self, /*"uShadowsEnabled"*/ STR(2807));
			new_shader_uniform(self, /*"uSpecularEnabled"*/ STR(2809));
			new_shader_uniform(self, /*"uReflectionsEnabled"*/ STR(2815));
			new_shader_uniform(self, /*"uFallbackColor"*/ STR(2777));
			new_shader_uniform(self, /*"uGamma"*/ STR(2780));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_samples_add), noone)
		{
			new_shader_sampler(self, /*"uSamplesExp"*/ STR(2849));
			new_shader_sampler(self, /*"uSamplesDec"*/ STR(2850));
			new_shader_sampler(self, /*"uSamplesAlpha"*/ STR(2851));
			new_shader_sampler(self, /*"uSample"*/ STR(2852));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_samples_unpack), noone)
		{
			new_shader_sampler(self, /*"uSamplesExp"*/ STR(2849));
			new_shader_sampler(self, /*"uSamplesDec"*/ STR(2850));
			new_shader_sampler(self, /*"uSamplesAlpha"*/ STR(2851));
			new_shader_uniform(self, /*"uSamplesStrength"*/ STR(2853));
			new_shader_uniform(self, /*"uRenderBackground"*/ STR(2854));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_depth_normal), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2788));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_material), noone)
		{
			shader_material_uniforms(self);
			new_shader_uniform(self, /*"uIsSky"*/ STR(2540));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_subsurface), noone)
		{
			shader_material_uniforms(self);
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_subsurface_scatter), noone)
		{
			new_shader_sampler(self, /*"uSSSBuffer"*/ STR(2857));
			new_shader_sampler(self, /*"uSSSRangeBuffer"*/ STR(2858));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_sampler(self, /*"uDirect"*/ STR(2859));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2805));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2843));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2844));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uSamples"*/ STR(2759));
			new_shader_uniform(self, /*"uKernel"*/ STR(2758));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2806));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_raytrace), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2804));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2805));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2812));
			new_shader_sampler(self, /*"uDiffuseBuffer"*/ STR(2837));
			new_shader_sampler(self, /*"uDataBuffer"*/ STR(2842));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2788));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2806));
			new_shader_uniform(self, /*"uNear"*/ STR(2782));
			new_shader_uniform(self, /*"uFar"*/ STR(2783));
			new_shader_uniform(self, /*"uProjMatrix"*/ STR(2843));
			new_shader_uniform(self, /*"uProjMatrixInv"*/ STR(2844));
			new_shader_uniform(self, /*"uViewMatrixInv"*/ STR(2845));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uPrecision"*/ STR(2839));
			new_shader_uniform(self, /*"uThickness"*/ STR(2840));
			new_shader_uniform(self, /*"uRayType"*/ STR(2838));
			new_shader_uniform(self, /*"uRayDirection"*/ STR(2926));
			new_shader_uniform(self, /*"uRayDistance"*/ STR(2841));
			new_shader_uniform(self, /*"uFadeAmount"*/ STR(2847));
			new_shader_uniform(self, /*"uGamma"*/ STR(2780));
			new_shader_uniform(self, /*"uSkyColor"*/ STR(2846));
			new_shader_uniform(self, /*"uFogColor"*/ STR(1925));
			new_shader_uniform(self, /*"uIndirectStength"*/ STR(2848));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_indirect_blur), noone)
		{
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2804));
			new_shader_sampler(self, /*"uNoiseBuffer"*/ STR(2805));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2788));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
			new_shader_uniform(self, /*"uNoiseSize"*/ STR(2806));
			new_shader_uniform(self, /*"uSamples"*/ STR(2759));
			new_shader_uniform(self, /*"uBlurSize"*/ STR(2795));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_raytrace_resolve), noone)
		{
			new_shader_sampler(self, /*"uDataBuffer"*/ STR(2842));
			new_shader_sampler(self, /*"uDepthBuffer"*/ STR(2790));
			new_shader_sampler(self, /*"uNormalBuffer"*/ STR(2804));
			new_shader_sampler(self, /*"uMaterialBuffer"*/ STR(2812));
			new_shader_uniform(self, /*"uNormalBufferScale"*/ STR(2788));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_tonemap), noone)
		{
			new_shader_sampler(self, /*"uMask"*/ STR(2811));
			new_shader_uniform(self, /*"uTonemapper"*/ STR(2778));
			new_shader_uniform(self, /*"uExposure"*/ STR(2779));
			new_shader_uniform(self, /*"uGamma"*/ STR(2780));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_clip), noone)
		{
			new_shader_uniform(self, /*"uBox"*/ STR(2767));
			new_shader_uniform(self, /*"uScreenSize"*/ STR(2757));
		}
		
		withOne (obj_shader, DsMap(global::shader_map).Value(ID_shader_high_glint), noone)
		{
			new_shader_uniform(self, /*"uGamma"*/ STR(2780));
			new_shader_sampler(self, /*"uGlintTexture"*/ STR(2547));
			new_shader_uniform(self, /*"uGlintOffset"*/ STR(2548));
			new_shader_uniform(self, /*"uGlintSize"*/ STR(2550));
			new_shader_uniform(self, /*"uGlintEnabled"*/ STR(2546));
			new_shader_uniform(self, /*"uGlintStrength"*/ STR(2549));
		}
		
		return true;
	}
	
	void shader_tonemap_set(ScopeAny self, VarType mask)
	{
		render_set_uniform_int(/*"uTonemapper"*/ STR(2778), global::render_tonemapper);
		render_set_uniform(/*"uExposure"*/ STR(2779), global::render_exposure);
		render_set_uniform(/*"uGamma"*/ STR(2780), global::render_gamma);
		texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uMask"*/ STR(2811)), surface_get_texture((IntType)(mask)));
	}
	
	void shader_use(ScopeAny self)
	{
		shader_set(sInt(shader));
		global::shader_blend_color = c_white;
		global::shader_blend_alpha = IntType(1);
		render_set_uniform_color(/*"uBlendColor"*/ STR(1915), c_white, IntType(1));
		render_set_uniform(/*"uMetallic"*/ STR(2532), IntType(0));
		render_set_uniform(/*"uRoughness"*/ STR(2533), IntType(1));
		render_set_uniform(/*"uTAAMatrix"*/ STR(1930), global::taa_matrix);
		render_set_uniform(/*"uSampleIndex"*/ STR(1931), global::render_sample_current);
		render_set_uniform_int(/*"uAlphaHash"*/ STR(1932), global::render_alpha_hash);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uTime"*/ STR(1916))) && DsMap(sInt(uniform_map)).Value(/*"uTime"*/ STR(1916)) > -IntType(1))
		{
			render_set_uniform(/*"uTime"*/ STR(1916), global::_app->background_time);
			render_set_uniform(/*"uWindEnable"*/ STR(1917), IntType(0));
			render_set_uniform(/*"uWindTerrain"*/ STR(1918), IntType(1));
			render_set_uniform(/*"uWindSpeed"*/ STR(1919), global::_app->background_wind * global::_app->background_wind_speed);
			render_set_uniform(/*"uWindStrength"*/ STR(1920), global::_app->background_wind_strength * (IntType)global::_app->setting_wind_enable);
			render_set_uniform_vec2(/*"uWindDirection"*/ STR(1921), sin(degtorad(global::_app->background_wind_direction)), cos(degtorad(global::_app->background_wind_direction)));
			render_set_uniform(/*"uWindDirectionalSpeed"*/ STR(1922), global::_app->background_wind * global::_app->background_wind_directional_speed * .1 * global::_app->background_time);
			render_set_uniform(/*"uWindDirectionalStrength"*/ STR(1923), global::_app->background_wind * global::_app->background_wind_directional_strength * (IntType)global::_app->setting_wind_enable);
		}
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uFogShow"*/ STR(1924))) && DsMap(sInt(uniform_map)).Value(/*"uFogShow"*/ STR(1924)) > -IntType(1))
		{
			BoolType fog = (global::_app->background_fog_show > 0 && global::render_mode != e_render_mode_COLOR);
			render_set_uniform_int(/*"uFogShow"*/ STR(1924), bool_to_float(fog));
			render_set_uniform_color(/*"uFogColor"*/ STR(1925), global::_app->background_fog_object_color_final, IntType(1));
			render_set_uniform(/*"uFogDistance"*/ STR(1926), global::_app->background_fog_distance);
			render_set_uniform(/*"uFogSize"*/ STR(1927), global::_app->background_fog_size);
			render_set_uniform(/*"uFogHeight"*/ STR(1928), global::_app->background_fog_height);
		}
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uCameraPosition"*/ STR(1929))) && DsMap(sInt(uniform_map)).Value(/*"uCameraPosition"*/ STR(1929)) > -IntType(1))
			render_set_uniform_vec3(/*"uCameraPosition"*/ STR(1929), global::cam_from.Real(X_), global::cam_from.Real(Y_), global::cam_from.Real(Z_));
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uDefaultEmissive"*/ STR(2860))) && DsMap(sInt(uniform_map)).Value(/*"uDefaultEmissive"*/ STR(2860)) > -IntType(1))
			render_set_uniform(/*"uDefaultEmissive"*/ STR(2860), global::_app->project_render_block_emissive);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uDefaultSubsurface"*/ STR(2861))) && DsMap(sInt(uniform_map)).Value(/*"uDefaultSubsurface"*/ STR(2861)) > -IntType(1))
			render_set_uniform(/*"uDefaultSubsurface"*/ STR(2861), global::_app->project_render_block_subsurface);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uSSSHighlight"*/ STR(2864))) && DsMap(sInt(uniform_map)).Value(/*"uSSSHighlight"*/ STR(2864)) > -IntType(1))
			render_set_uniform(/*"uSSSHighlight"*/ STR(2864), IntType(1) - global::_app->project_render_subsurface_highlight);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uSSSHighlightStrength"*/ STR(2865))) && DsMap(sInt(uniform_map)).Value(/*"uSSSHighlightStrength"*/ STR(2865)) > -IntType(1))
			render_set_uniform(/*"uSSSHighlightStrength"*/ STR(2865), global::_app->project_render_subsurface_highlight_strength);
		if (!is_undefined(DsMap(sInt(uniform_map)).Value(/*"uGlintEnabled"*/ STR(2546))) && DsMap(sInt(uniform_map)).Value(/*"uGlintEnabled"*/ STR(2546)) > -IntType(1))
		{
			IntType tex = ObjType(obj_resource, global::mc_res)->glint_entity_texture;
			texture_set_stage(DsMap(sInt(sampler_map)).Value(/*"uGlintTexture"*/ STR(2547)), sprite_get_texture(tex, IntType(0)));
			gpu_set_texrepeat_ext(DsMap(sInt(sampler_map)).Value(/*"uGlintTexture"*/ STR(2547)), true);
			gpu_set_tex_filter_ext(DsMap(sInt(sampler_map)).Value(/*"uGlintTexture"*/ STR(2547)), true);
			render_set_uniform_vec2(/*"uGlintSize"*/ STR(2550), sprite_get_width(tex) * IntType(2), sprite_get_height(tex) * IntType(2));
			render_set_uniform_vec2(/*"uGlintOffset"*/ STR(2548), global::_app->background_time * (0.000625) * global::_app->project_render_glint_speed, global::_app->background_time * (0.00125) * global::_app->project_render_glint_speed);
			render_set_uniform_int(/*"uGlintEnabled"*/ STR(2546), IntType(1));
			render_set_uniform(/*"uGlintStrength"*/ STR(2549), global::_app->project_render_glint_strength);
			render_set_uniform(/*"uGamma"*/ STR(2780), global::render_gamma);
		}
		render_set_uniform(/*"uMask"*/ STR(2811), bool_to_float(global::shader_mask));
		if (sVar(script) > -IntType(1))
			script_execute(self, { sVar(script) });
	}
	
	void shader_vignette_set()
	{
		render_set_uniform_vec2(/*"uScreenSize"*/ STR(2757), global::render_width, global::render_height);
		render_set_uniform(/*"uRadius"*/ STR(2760), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_RADIUS));
		render_set_uniform(/*"uSoftness"*/ STR(2925), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_SOFTNESS));
		render_set_uniform(/*"uStrength"*/ STR(2866), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_STRENGTH));
		render_set_uniform_color(/*"uColor"*/ STR(2763), idVar(global::render_camera, value).Value(e_value_CAM_VIGNETTE_COLOR), IntType(1));
	}
	
	void shortcut_bar_add(VarType keybind, IntType mouse, StringType text)
	{
		ds_list_add({ global::_app->shortcut_bar_list, ArrType::From({ keybind, mouse, text_get({ /*"shortcut"*/ STR(2927) + text }) }) });
	}
	
	RealType shortcut_bar_draw(ScopeAny self)
	{
		if (!sBool(setting_show_shortcuts_bar))
			return IntType(0);
		sVar(content_x) = IntType(0);
		sVar(content_y) = sReal(window_height) - IntType(28);
		sVar(content_width) = sReal(window_width);
		sVar(content_height) = IntType(28);
		sVar(dx) = sVar(content_x) + IntType(12);
		sVar(dy) = sVar(content_y);
		sVar(dw) = sVar(content_width);
		sVar(dh) = IntType(28);
		draw_box(sVar(content_x), sVar(content_y), sVar(content_width), sVar(content_height), false, global::c_level_top, IntType(1));
		draw_divide(sVar(content_x), sVar(content_y), sVar(content_width));
		draw_gradient(sVar(content_x), sVar(content_y) - shadow_size, sVar(content_width), shadow_size, c_black, IntType(0), IntType(0), shadow_alpha, shadow_alpha);
		shortcut_bar_update();
		for (IntType i = IntType(0); i < ds_list_size(sInt(shortcut_bar_list)); i++)
			shortcut_draw(self, DsList(sInt(shortcut_bar_list)).Value(i));
		return 0.0;
	}
	
	void shortcut_bar_update()
	{
		if (global::_app->shortcut_bar_state != global::_app->shortcut_bar_state_prev)
		{
			ds_list_clear(global::_app->shortcut_bar_list);
			if (global::_app->shortcut_bar_state == /*"viewport"*/ STR(122) || global::_app->shortcut_bar_state == /*"viewportcam"*/ STR(2928))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"select"*/ STR(2470));
				if (global::_app->shortcut_bar_state == /*"viewport"*/ STR(122))
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_VIEW_TIMELINE))->keybind, null_, /*"viewtimeline"*/ STR(2929));
				shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"orbit"*/ STR(2321));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"pan"*/ STR(2930));
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"zoom"*/ STR(2340));
				shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"walk"*/ STR(2931));
			}
			if (global::_app->shortcut_bar_state == /*"cameramove"*/ STR(2932) || global::_app->shortcut_bar_state == /*"tlcameramove"*/ STR(2933))
			{
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FORWARD))->keybind, null_, /*"forward"*/ STR(1838));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_LEFT))->keybind, null_, /*"left"*/ STR(195));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_BACK))->keybind, null_, /*"back"*/ STR(860));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RIGHT))->keybind, null_, /*"right"*/ STR(196));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ASCEND))->keybind, null_, /*"ascend"*/ STR(2934));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_DESCEND))->keybind, null_, /*"descend"*/ STR(2935));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_FAST))->keybind, null_, /*"faster"*/ STR(2936));
				shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_SLOW))->keybind, null_, /*"slower"*/ STR(2937));
				if (global::_app->shortcut_bar_state == /*"tlcameramove"*/ STR(2933))
				{
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_FORWARD))->keybind, null_, /*"rollforward"*/ STR(2938));
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_BACK))->keybind, null_, /*"rollback"*/ STR(2939));
					shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_ROLL_RESET))->keybind, null_, /*"rollreset"*/ STR(2940));
				}
				else
					if (global::_app->window_state != /*"world_import"*/ STR(2737))
						shortcut_bar_add(ObjType(obj_keybind, global::keybinds.Value(e_keybind_CAM_RESET))->keybind, null_, /*"reset"*/ STR(2941));
				
			}
			if (string_contains(global::_app->shortcut_bar_state, /*"timeline"*/ STR(123)))
			{
				if (global::_app->shortcut_bar_state == /*"timelinekeyframes"*/ STR(2942))
				{
					shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"tlkeyframeselect"*/ STR(2943));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_CLICK_LEFT, /*"tlkeyframeselectadd"*/ STR(2944));
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tlkeyframeselectgroup"*/ STR(2945));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"tlkeyframeselectgroupadd"*/ STR(2946));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_CLICK_LEFT, /*"tlkeyframedeselect"*/ STR(2947));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_DRAG_LEFT, /*"tlkeyframedeselectgroup"*/ STR(2948));
				}
				if (global::_app->shortcut_bar_state == /*"timelinenames"*/ STR(2949))
				{
					shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"tltimelineselect"*/ STR(2950));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_CLICK_LEFT, /*"tltimelineselectadd"*/ STR(2951));
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tltimelineselectgroup"*/ STR(2952));
					shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"tltimelineselectgroupadd"*/ STR(2953));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_CLICK_LEFT, /*"tltimelinedeselect"*/ STR(2954));
					shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_DRAG_LEFT, /*"tltimelinedeselectgroup"*/ STR(2955));
				}
				if (global::_app->shortcut_bar_state == /*"timelinebar"*/ STR(2956))
				{
					shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"tlsettime"*/ STR(2957));
					shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"tlsetregion"*/ STR(2958));
				}
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"scrollvertical"*/ STR(2959));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_SCROLL, /*"scrollhorizontal"*/ STR(2960));
				shortcut_bar_add(keybind_new(null_, true, false, false), e_mouse_SCROLL, /*"zoom"*/ STR(2340));
			}
			if (global::_app->shortcut_bar_state == /*"worldimport"*/ STR(2961))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"worldcreateselection"*/ STR(2962));
				shortcut_bar_add(null_, e_mouse_DRAG_LEFT, /*"orbit"*/ STR(2321));
				shortcut_bar_add(ArrType::From({ null_, false, false, true }), null_, /*"worldignoreselection"*/ STR(2963));
				shortcut_bar_add(keybind_new(null_, false, true, false), e_mouse_DRAG_LEFT, /*"pan"*/ STR(2930));
				shortcut_bar_add(null_, e_mouse_SCROLL, /*"zoom"*/ STR(2340));
				shortcut_bar_add(null_, e_mouse_DRAG_RIGHT, /*"walk"*/ STR(2931));
			}
			if (global::_app->shortcut_bar_state == /*"worldimportselection"*/ STR(2964))
			{
				shortcut_bar_add(null_, e_mouse_CLICK_LEFT, /*"worldfinishselection"*/ STR(2965));
				shortcut_bar_add(null_, e_mouse_CLICK_RIGHT, /*"worldclearselection"*/ STR(2966));
			}
		}
		global::_app->shortcut_bar_state_prev = global::_app->shortcut_bar_state;
		global::_app->shortcut_bar_state = /*""*/ STR(0);
	}
	
	void shortcut_draw(ScopeAny self, ArrType shortcut)
	{
		IntType mouse;
		VarType yy;
		RealType padding, imgpadding;
		yy = sVar(dy) + ((RealType)sVar(dh) / 2.0);
		padding = IntType(10);
		imgpadding = IntType(4);
		draw_set_font(sInt(font_label));
		if (shortcut.Value(IntType(0)) != null_)
		{
			ArrType keyboardarray = string_split(text_control_name(shortcut.Value(IntType(0))), /*" + "*/ STR(2967));
			for (IntType i = IntType(0); i < array_length(VarType::CreateRef(keyboardarray)); i++)
			{
				StringType str = string_replace(keyboardarray.Value(i), /*"+ "*/ STR(2968), /*""*/ STR(0));
				IntType stringsize = string_width(str);
				draw_box(sVar(dx), yy - IntType(8), stringsize + IntType(12), IntType(16), false, global::c_text_tertiary, global::a_text_tertiary);
				draw_box(sVar(dx) + IntType(2), yy - IntType(6), stringsize + IntType(8), IntType(12), false, global::c_level_top, IntType(1));
				draw_label(self, { str, sVar(dx) + IntType(6), yy, fa_left, fa_middle, global::c_text_tertiary, global::a_text_tertiary });
				sVar(dx) += (stringsize + IntType(12)) + (i < (array_length(VarType::CreateRef(keyboardarray)) - IntType(1)) ? imgpadding : IntType(0));
			}
			sVar(dx) += (shortcut.Value(IntType(1)) == null_ ? padding : imgpadding);
		}
		if (shortcut.Value(IntType(1)) != null_)
		{
			switch ((IntType)shortcut.Value(IntType(1)))
			{
				case e_mouse_CLICK_LEFT:
				{
					mouse = icons_CLICK_LEFT;
					break;
				}
				case e_mouse_CLICK_MIDDLE:
				{
					mouse = icons_CLICK_MIDDLE;
					break;
				}
				case e_mouse_CLICK_RIGHT:
				{
					mouse = icons_CLICK_RIGHT;
					break;
				}
				case e_mouse_DRAG_LEFT:
				{
					mouse = icons_DRAG_LEFT;
					break;
				}
				case e_mouse_DRAG_MIDDLE:
				{
					mouse = icons_DRAG_MIDDLE;
					break;
				}
				case e_mouse_DRAG_RIGHT:
				{
					mouse = icons_DRAG_RIGHT;
					break;
				}
				case e_mouse_SCROLL:
				{
					mouse = icons_SCROLL;
					break;
				}
				default:
					mouse = icons_HELP;
			}
			
			draw_image({ ID_spr_icons, mouse, sVar(dx) + IntType(10), yy, IntType(1), IntType(1), global::c_text_tertiary, global::a_text_tertiary });
			sVar(dx) += IntType(20) + padding;
		}
		draw_set_font(sInt(font_value));
		draw_label(self, { shortcut.Value(IntType(2)), sVar(dx), yy, fa_left, fa_middle, global::c_text_secondary, global::a_text_secondary });
		sVar(dx) += string_width(shortcut.Value(IntType(2))) + IntType(36);
	}
	
	VarType simplex_lib(VarArgs argument)
	{
		IntType argument_count = argument.Size();
		if (argument_count > IntType(3))
			return lib_math_simplex4d(argument[IntType(0)], argument[IntType(1)], argument[IntType(2)], argument[IntType(3)]);
		if (argument_count > IntType(2))
			return lib_math_simplex3d(argument[IntType(0)], argument[IntType(1)], argument[IntType(2)]);
		if (argument_count > IntType(1))
			return lib_math_simplex2d(argument[IntType(0)], argument[IntType(1)]);
		return lib_math_simplex1d(argument[IntType(0)]);
	}
	
	RealType smoothstep(RealType xx)
	{
		return (xx * xx * (IntType(3) - IntType(2) * xx));
	}
	
	VarType snap(VarType val, RealType xx)
	{
		if (xx == IntType(0))
			return val;
		return round((RealType)val / xx) * xx;
	}
	
	void sortlist_add(IntType sortlist, VarType value, IntType index)
	{
		if (index >= IntType(0))
		{
			ds_list_insert(idInt(sortlist, list), index, value);
			ds_list_insert(idInt(sortlist, display_list), index, value);
		}
		else
		{
			ds_list_add({ idInt(sortlist, list), value });
			ds_list_add({ idInt(sortlist, display_list), value });
		}
		
	}
	
	void sortlist_clear(IntType slist)
	{
		ObjType(obj_sortlist, slist)->select = null_;
		ds_list_clear(ObjType(obj_sortlist, slist)->list);
		ds_list_clear(ObjType(obj_sortlist, slist)->display_list);
		ObjType(obj_sortlist, slist)->search = false;
		ObjType(obj_sortlist, slist)->column_sort = null_;
	}
	
	void sortlist_column_add(IntType slist, StringType name, RealType xx)
	{
		idArr(slist, column_name)[idInt(slist, columns)] = name;
		idArr(slist, column_x)[idInt(slist, columns)] = xx;
		idArr(slist, column_w)[idInt(slist, columns)] = IntType(0);
		idInt(slist, columns)++;
	}
	
	VarType sortlist_column_get(VarType slist, VarType value, IntType col)
	{
		switch (StringType(idArr(slist, column_name).Value(col)).id)
		{
			case 214: // libname
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, display_name)) + /*" ["*/ STR(1784) + string(idVar(value, save_id)) + /*"]"*/ STR(1211);
				return string_remove_newline(idVar(value, display_name));
			}
			case 215: // libtype
			{
				return text_get({ /*"type"*/ STR(775) + DsList(global::temp_type_name_list).Value(idVar(value, type)) });
			}
			case 216: // libinstances
			{
				return idInt(value, count);
			}
			case 186: // charname
			case 188: // spblockname
			case 189: // bodypartmodelname
			{
				return minecraft_asset_get_name(/*"model"*/ STR(8), ObjType(obj_model, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->model_name_map).Value(value))->name);
			}
			case 187: // blockname
			{
				return minecraft_asset_get_name(/*"block"*/ STR(4), ObjType(obj_block, DsMap(ObjType(obj_minecraft_assets, global::mc_assets)->block_name_map).Value(value))->name);
			}
			case 2969: // blockfilter
			{
				return minecraft_asset_get_name(/*"block"*/ STR(4), ObjType(obj_block, DsList(ObjType(obj_minecraft_assets, global::mc_assets)->block_list).Value(value))->name);
			}
			case 224: // particleeditortypename
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, name)) + /*" ["*/ STR(1784) + string(idVar(value, save_id)) + /*"]"*/ STR(1211);
				return string_remove_newline(idVar(value, name));
			}
			case 225: // particleeditortypekind
			{
				if (idVar(value, temp) == particle_sheet)
					return text_get({ /*"particleeditortypespritesheet"*/ STR(1337) });
				else
					if (idVar(value, temp) == particle_template)
						return text_get({ /*"particleeditortypetemplate"*/ STR(1336) });
					else
						return string_remove_newline(idVar(idVar(value, temp), display_name));
				
				
			}
			case 226: // particleeditortyperate
			{
				return string(floor(idVar(value, spawn_rate) * IntType(100))) + /*"%"*/ STR(212);
			}
			case 221: // resname
			{
				if (dev_mode_debug_saveid)
					return string_remove_newline(idVar(value, display_name)) + /*" ["*/ STR(1784) + string(idVar(value, save_id)) + /*"]"*/ STR(1211);
				return string_remove_newline(idVar(value, display_name));
			}
			case 2970: // resfilename
			{
				return string_remove_newline(idVar(value, filename));
			}
			case 222: // restype
			{
				return text_get({ /*"type"*/ STR(775) + DsList(global::res_type_name_list).Value(idVar(value, type)) });
			}
			case 223: // rescount
			{
				return idInt(value, count);
			}
			case 190: // particlepresetname
			{
				VarType fn = filename_new_ext(filename_name(value), /*""*/ STR(0));
				return text_exists(/*"particle"*/ STR(2971) + fn) ? text_get({ /*"particle"*/ STR(2971) + fn }) : fn;
			}
			
		}
		
		return VarType();
	}
	
}
